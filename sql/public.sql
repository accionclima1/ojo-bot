/*
 Navicat Premium Data Transfer

 Source Server         : Crane ojo-streamer db
 Source Server Type    : PostgreSQL
 Source Server Version : 90213
 Source Host           : ec2-54-83-32-64.compute-1.amazonaws.com
 Source Database       : d6or7541hmg7qi
 Source Schema         : public

 Target Server Type    : PostgreSQL
 Target Server Version : 90213
 File Encoding         : utf-8

 Date: 04/13/2016 08:38:25 AM
*/

-- ----------------------------
--  Sequence structure for app_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."app_seq";
CREATE SEQUENCE "public"."app_seq" INCREMENT 1 START 2 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "public"."app_seq" OWNER TO "s3rccp";

-- ----------------------------
--  Sequence structure for download_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."download_seq";
CREATE SEQUENCE "public"."download_seq" INCREMENT 1 START 469 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "public"."download_seq" OWNER TO "s3rccp";

-- ----------------------------
--  Sequence structure for id_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."id_seq";
CREATE SEQUENCE "public"."id_seq" INCREMENT 1 START 14 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "public"."id_seq" OWNER TO "s3rccp";

-- ----------------------------
--  Sequence structure for landslide_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."landslide_seq";
CREATE SEQUENCE "public"."landslide_seq" INCREMENT 1 START 7628 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "public"."landslide_seq" OWNER TO "s3rccp";

-- ----------------------------
--  Sequence structure for user_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "public"."user_seq";
CREATE SEQUENCE "public"."user_seq" INCREMENT 1 START 231 MAXVALUE 9223372036854775807 MINVALUE 1 CACHE 1;
ALTER TABLE "public"."user_seq" OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_in"(cstring);
CREATE FUNCTION "public"."hstore_in"(IN cstring) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_out("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_out"("public"."hstore");
CREATE FUNCTION "public"."hstore_out"(IN "public"."hstore") RETURNS "cstring" 
	AS '$libdir/hstore','hstore_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_out"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_recv(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_recv"(internal);
CREATE FUNCTION "public"."hstore_recv"(IN internal) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_recv'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_recv"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_send("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_send"("public"."hstore");
CREATE FUNCTION "public"."hstore_send"(IN "public"."hstore") RETURNS "bytea" 
	AS '$libdir/hstore','hstore_send'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_send"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_version_diag("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_version_diag"("public"."hstore");
CREATE FUNCTION "public"."hstore_version_diag"(IN "public"."hstore") RETURNS "int4" 
	AS '$libdir/hstore','hstore_version_diag'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_version_diag"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fetchval("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fetchval"("public"."hstore", text);
CREATE FUNCTION "public"."fetchval"(IN "public"."hstore", IN text) RETURNS "text" 
	AS '$libdir/hstore','hstore_fetchval'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."fetchval"(IN "public"."hstore", IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.slice_array("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."slice_array"("public"."hstore", _text);
CREATE FUNCTION "public"."slice_array"(IN "public"."hstore", IN _text) RETURNS "_text" 
	AS '$libdir/hstore','hstore_slice_to_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."slice_array"(IN "public"."hstore", IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.slice("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."slice"("public"."hstore", _text);
CREATE FUNCTION "public"."slice"(IN "public"."hstore", IN _text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_slice_to_hstore'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."slice"(IN "public"."hstore", IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isexists("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isexists"("public"."hstore", text);
CREATE FUNCTION "public"."isexists"(IN "public"."hstore", IN text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_exists'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."isexists"(IN "public"."hstore", IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.exist("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."exist"("public"."hstore", text);
CREATE FUNCTION "public"."exist"(IN "public"."hstore", IN text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_exists'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."exist"(IN "public"."hstore", IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.exists_any("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."exists_any"("public"."hstore", _text);
CREATE FUNCTION "public"."exists_any"(IN "public"."hstore", IN _text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_exists_any'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."exists_any"(IN "public"."hstore", IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.exists_all("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."exists_all"("public"."hstore", _text);
CREATE FUNCTION "public"."exists_all"(IN "public"."hstore", IN _text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_exists_all'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."exists_all"(IN "public"."hstore", IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isdefined("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isdefined"("public"."hstore", text);
CREATE FUNCTION "public"."isdefined"(IN "public"."hstore", IN text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_defined'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."isdefined"(IN "public"."hstore", IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.defined("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."defined"("public"."hstore", text);
CREATE FUNCTION "public"."defined"(IN "public"."hstore", IN text) RETURNS "bool" 
	AS '$libdir/hstore','hstore_defined'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."defined"(IN "public"."hstore", IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.delete("public"."hstore", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."delete"("public"."hstore", text);
CREATE FUNCTION "public"."delete"(IN "public"."hstore", IN text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_delete'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."delete"(IN "public"."hstore", IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.delete("public"."hstore", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."delete"("public"."hstore", _text);
CREATE FUNCTION "public"."delete"(IN "public"."hstore", IN _text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_delete_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."delete"(IN "public"."hstore", IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.delete("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."delete"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."delete"(IN "public"."hstore", IN "public"."hstore") RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_delete_hstore'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."delete"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hs_concat("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hs_concat"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hs_concat"(IN "public"."hstore", IN "public"."hstore") RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_concat'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hs_concat"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hs_contains("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hs_contains"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hs_contains"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_contains'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hs_contains"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hs_contained("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hs_contained"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hs_contained"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_contained'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hs_contained"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tconvert(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tconvert"(text, text);
CREATE FUNCTION "public"."tconvert"(IN text, IN text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_text'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."tconvert"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore"(text, text);
CREATE FUNCTION "public"."hstore"(IN text, IN text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_text'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore(_text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore"(_text, _text);
CREATE FUNCTION "public"."hstore"(IN _text, IN _text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_arrays'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore"(IN _text, IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore(_text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore"(_text);
CREATE FUNCTION "public"."hstore"(IN _text) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore"(IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore(record)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore"(record);
CREATE FUNCTION "public"."hstore"(IN record) RETURNS "public"."hstore" 
	AS '$libdir/hstore','hstore_from_record'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore"(IN record) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_to_array("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_to_array"("public"."hstore");
CREATE FUNCTION "public"."hstore_to_array"(IN "public"."hstore") RETURNS "_text" 
	AS '$libdir/hstore','hstore_to_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_to_array"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_to_matrix("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_to_matrix"("public"."hstore");
CREATE FUNCTION "public"."hstore_to_matrix"(IN "public"."hstore") RETURNS "_text" 
	AS '$libdir/hstore','hstore_to_matrix'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_to_matrix"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.akeys("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."akeys"("public"."hstore");
CREATE FUNCTION "public"."akeys"(IN "public"."hstore") RETURNS "_text" 
	AS '$libdir/hstore','hstore_akeys'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."akeys"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.avals("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."avals"("public"."hstore");
CREATE FUNCTION "public"."avals"(IN "public"."hstore") RETURNS "_text" 
	AS '$libdir/hstore','hstore_avals'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."avals"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.skeys("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."skeys"("public"."hstore");
CREATE FUNCTION "public"."skeys"(IN "public"."hstore") RETURNS SETOF "text" 
	AS '$libdir/hstore','hstore_skeys'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."skeys"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.svals("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."svals"("public"."hstore");
CREATE FUNCTION "public"."svals"(IN "public"."hstore") RETURNS SETOF "text" 
	AS '$libdir/hstore','hstore_svals'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."svals"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.each("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."each"("public"."hstore");
CREATE FUNCTION "public"."each"(IN hs "public"."hstore", OUT "key" text, OUT "value" text) RETURNS SETOF "record" 
	AS '$libdir/hstore','hstore_each'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."each"(IN hs "public"."hstore", OUT "key" text, OUT "value" text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.populate_record(anyelement, "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."populate_record"(anyelement, "public"."hstore");
CREATE FUNCTION "public"."populate_record"(IN anyelement, IN "public"."hstore") RETURNS "anyelement" 
	AS '$libdir/hstore','hstore_populate_record'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."populate_record"(IN anyelement, IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_eq("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_eq"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_eq"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_eq"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_ne("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_ne"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_ne"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_ne'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_ne"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_gt("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_gt"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_gt"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_gt"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_ge("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_ge"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_ge"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_ge"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_lt("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_lt"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_lt"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_lt"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_le("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_le"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_le"(IN "public"."hstore", IN "public"."hstore") RETURNS "bool" 
	AS '$libdir/hstore','hstore_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_le"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_cmp("public"."hstore", "public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_cmp"("public"."hstore", "public"."hstore");
CREATE FUNCTION "public"."hstore_cmp"(IN "public"."hstore", IN "public"."hstore") RETURNS "int4" 
	AS '$libdir/hstore','hstore_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_cmp"(IN "public"."hstore", IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hstore_hash("public"."hstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hstore_hash"("public"."hstore");
CREATE FUNCTION "public"."hstore_hash"(IN "public"."hstore") RETURNS "int4" 
	AS '$libdir/hstore','hstore_hash'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."hstore_hash"(IN "public"."hstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_in"(cstring);
CREATE FUNCTION "public"."ghstore_in"(IN cstring) RETURNS "public"."ghstore" 
	AS '$libdir/hstore','ghstore_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_out("public"."ghstore")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_out"("public"."ghstore");
CREATE FUNCTION "public"."ghstore_out"(IN "public"."ghstore") RETURNS "cstring" 
	AS '$libdir/hstore','ghstore_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_out"(IN "public"."ghstore") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_compress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_compress"(internal);
CREATE FUNCTION "public"."ghstore_compress"(IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_compress'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_compress"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_decompress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_decompress"(internal);
CREATE FUNCTION "public"."ghstore_decompress"(IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_decompress'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_decompress"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_penalty(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_penalty"(internal, internal, internal);
CREATE FUNCTION "public"."ghstore_penalty"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_penalty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_penalty"(IN internal, IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_picksplit(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_picksplit"(internal, internal);
CREATE FUNCTION "public"."ghstore_picksplit"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_picksplit'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_picksplit"(IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_union(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_union"(internal, internal);
CREATE FUNCTION "public"."ghstore_union"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_union'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_union"(IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_same(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_same"(internal, internal, internal);
CREATE FUNCTION "public"."ghstore_same"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','ghstore_same'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_same"(IN internal, IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ghstore_consistent(internal, internal, int4, oid, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ghstore_consistent"(internal, internal, int4, oid, internal);
CREATE FUNCTION "public"."ghstore_consistent"(IN internal, IN internal, IN int4, IN oid, IN internal) RETURNS "bool" 
	AS '$libdir/hstore','ghstore_consistent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."ghstore_consistent"(IN internal, IN internal, IN int4, IN oid, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.gin_extract_hstore(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gin_extract_hstore"(internal, internal);
CREATE FUNCTION "public"."gin_extract_hstore"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','gin_extract_hstore'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gin_extract_hstore"(IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.gin_extract_hstore_query(internal, internal, int2, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gin_extract_hstore_query"(internal, internal, int2, internal, internal);
CREATE FUNCTION "public"."gin_extract_hstore_query"(IN internal, IN internal, IN int2, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/hstore','gin_extract_hstore_query'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gin_extract_hstore_query"(IN internal, IN internal, IN int2, IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.gin_consistent_hstore(internal, int2, internal, int4, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gin_consistent_hstore"(internal, int2, internal, int4, internal, internal);
CREATE FUNCTION "public"."gin_consistent_hstore"(IN internal, IN int2, IN internal, IN int4, IN internal, IN internal) RETURNS "bool" 
	AS '$libdir/hstore','gin_consistent_hstore'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gin_consistent_hstore"(IN internal, IN int2, IN internal, IN int4, IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.spheroid_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."spheroid_in"(cstring);
CREATE FUNCTION "public"."spheroid_in"(IN cstring) RETURNS "public"."spheroid" 
	AS '$libdir/postgis-2.0','ellipsoid_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."spheroid_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.spheroid_out("public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."spheroid_out"("public"."spheroid");
CREATE FUNCTION "public"."spheroid_out"(IN "public"."spheroid") RETURNS "cstring" 
	AS '$libdir/postgis-2.0','ellipsoid_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."spheroid_out"(IN "public"."spheroid") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_in"(cstring);
CREATE FUNCTION "public"."geometry_in"(IN cstring) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_out("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_out"("public"."geometry");
CREATE FUNCTION "public"."geometry_out"(IN "public"."geometry") RETURNS "cstring" 
	AS '$libdir/postgis-2.0','LWGEOM_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_out"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_typmod_in(_cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_typmod_in"(_cstring);
CREATE FUNCTION "public"."geometry_typmod_in"(IN _cstring) RETURNS "int4" 
	AS '$libdir/postgis-2.0','geometry_typmod_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_typmod_in"(IN _cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_typmod_out(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_typmod_out"(int4);
CREATE FUNCTION "public"."geometry_typmod_out"(IN int4) RETURNS "cstring" 
	AS '$libdir/postgis-2.0','postgis_typmod_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_typmod_out"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_analyze(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_analyze"(internal);
CREATE FUNCTION "public"."geometry_analyze"(IN internal) RETURNS "bool" 
	AS '$libdir/postgis-2.0','geometry_analyze_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_analyze"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_recv(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_recv"(internal);
CREATE FUNCTION "public"."geometry_recv"(IN internal) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_recv'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_recv"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_send("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_send"("public"."geometry");
CREATE FUNCTION "public"."geometry_send"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-2.0','LWGEOM_send'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_send"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry("public"."geometry", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"("public"."geometry", int4, bool);
CREATE FUNCTION "public"."geometry"(IN "public"."geometry", IN int4, IN bool) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','geometry_enforce_typmod'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN "public"."geometry", IN int4, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_x("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_x"("public"."geometry");
CREATE FUNCTION "public"."st_x"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_x_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_x"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_x"(IN "public"."geometry") IS 'args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.';

-- ----------------------------
--  Function structure for public.st_y("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_y"("public"."geometry");
CREATE FUNCTION "public"."st_y"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_y_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_y"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_y"(IN "public"."geometry") IS 'args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.';

-- ----------------------------
--  Function structure for public.st_z("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_z"("public"."geometry");
CREATE FUNCTION "public"."st_z"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_z_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_z"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_z"(IN "public"."geometry") IS 'args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.';

-- ----------------------------
--  Function structure for public.st_m("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_m"("public"."geometry");
CREATE FUNCTION "public"."st_m"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_m_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_m"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_m"(IN "public"."geometry") IS 'args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.';

-- ----------------------------
--  Function structure for public.box3d_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d_in"(cstring);
CREATE FUNCTION "public"."box3d_in"(IN cstring) RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.0','BOX3D_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box3d_out("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d_out"("public"."box3d");
CREATE FUNCTION "public"."box3d_out"(IN "public"."box3d") RETURNS "cstring" 
	AS '$libdir/postgis-2.0','BOX3D_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d_out"(IN "public"."box3d") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box2d_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2d_in"(cstring);
CREATE FUNCTION "public"."box2d_in"(IN cstring) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','BOX2D_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2d_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box2d_out("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2d_out"("public"."box2d");
CREATE FUNCTION "public"."box2d_out"(IN "public"."box2d") RETURNS "cstring" 
	AS '$libdir/postgis-2.0','BOX2D_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2d_out"(IN "public"."box2d") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box2df_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2df_in"(cstring);
CREATE FUNCTION "public"."box2df_in"(IN cstring) RETURNS "public"."box2df" 
	AS '$libdir/postgis-2.0','box2df_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2df_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box2df_out("public"."box2df")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2df_out"("public"."box2df");
CREATE FUNCTION "public"."box2df_out"(IN "public"."box2df") RETURNS "cstring" 
	AS '$libdir/postgis-2.0','box2df_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2df_out"(IN "public"."box2df") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.gidx_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gidx_in"(cstring);
CREATE FUNCTION "public"."gidx_in"(IN cstring) RETURNS "public"."gidx" 
	AS '$libdir/postgis-2.0','gidx_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gidx_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.gidx_out("public"."gidx")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gidx_out"("public"."gidx");
CREATE FUNCTION "public"."gidx_out"(IN "public"."gidx") RETURNS "cstring" 
	AS '$libdir/postgis-2.0','gidx_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."gidx_out"(IN "public"."gidx") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_lt("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_lt"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_lt"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','lwgeom_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_lt"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_le("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_le"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_le"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','lwgeom_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_le"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gt("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gt"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_gt"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','lwgeom_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_gt"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_ge("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_ge"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_ge"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','lwgeom_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_ge"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_eq("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_eq"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_eq"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','lwgeom_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_eq"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_cmp("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_cmp"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_cmp"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','lwgeom_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_cmp"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_distance_2d(internal, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_distance_2d"(internal, "public"."geometry", int4);
CREATE FUNCTION "public"."geometry_gist_distance_2d"(IN internal, IN "public"."geometry", IN int4) RETURNS "float8" 
	AS '$libdir/postgis-2.0','gserialized_gist_distance_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_distance_2d"(IN internal, IN "public"."geometry", IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_consistent_2d(internal, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_consistent_2d"(internal, "public"."geometry", int4);
CREATE FUNCTION "public"."geometry_gist_consistent_2d"(IN internal, IN "public"."geometry", IN int4) RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_gist_consistent_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_consistent_2d"(IN internal, IN "public"."geometry", IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_compress_2d(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_compress_2d"(internal);
CREATE FUNCTION "public"."geometry_gist_compress_2d"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_compress_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_compress_2d"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_penalty_2d(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_penalty_2d"(internal, internal, internal);
CREATE FUNCTION "public"."geometry_gist_penalty_2d"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_penalty_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_penalty_2d"(IN internal, IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_picksplit_2d(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_picksplit_2d"(internal, internal);
CREATE FUNCTION "public"."geometry_gist_picksplit_2d"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_picksplit_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_picksplit_2d"(IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_union_2d(bytea, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_union_2d"(bytea, internal);
CREATE FUNCTION "public"."geometry_gist_union_2d"(IN bytea, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_union_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_union_2d"(IN bytea, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_same_2d("public"."geometry", "public"."geometry", internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_same_2d"("public"."geometry", "public"."geometry", internal);
CREATE FUNCTION "public"."geometry_gist_same_2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_same_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_same_2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_decompress_2d(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_decompress_2d"(internal);
CREATE FUNCTION "public"."geometry_gist_decompress_2d"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_decompress_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_decompress_2d"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_sel_2d(internal, oid, internal, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_sel_2d"(internal, oid, internal, int4);
CREATE FUNCTION "public"."geometry_gist_sel_2d"(IN internal, IN oid, IN internal, IN int4) RETURNS "float8" 
	AS '$libdir/postgis-2.0','geometry_gist_sel_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_sel_2d"(IN internal, IN oid, IN internal, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_joinsel_2d(internal, oid, internal, int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_joinsel_2d"(internal, oid, internal, int2);
CREATE FUNCTION "public"."geometry_gist_joinsel_2d"(IN internal, IN oid, IN internal, IN int2) RETURNS "float8" 
	AS '$libdir/postgis-2.0','geometry_gist_joinsel_2d'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_joinsel_2d"(IN internal, IN oid, IN internal, IN int2) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overlaps"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_overlaps_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_same("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_same"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_same"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_same_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_same"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_distance_centroid("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_distance_centroid"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_distance_centroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','gserialized_distance_centroid_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_distance_centroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_distance_box("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_distance_box"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_distance_box"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','gserialized_distance_box_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_distance_box"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_contains"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_contains_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_within"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_within_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_left("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_left"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_left"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_left_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_left"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_overleft("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overleft"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overleft"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_overleft_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overleft"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_below("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_below"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_below"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_below_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_below"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_overbelow("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overbelow"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overbelow"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_overbelow_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overbelow"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_overright("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overright"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overright"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_overright_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overright"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_right("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_right"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_right"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_right_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_right"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_overabove("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overabove"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overabove"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_overabove_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overabove"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_above("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_above"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_above"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_above_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_above"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_consistent_nd(internal, "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_consistent_nd"(internal, "public"."geometry", int4);
CREATE FUNCTION "public"."geometry_gist_consistent_nd"(IN internal, IN "public"."geometry", IN int4) RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_gist_consistent'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_consistent_nd"(IN internal, IN "public"."geometry", IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_compress_nd(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_compress_nd"(internal);
CREATE FUNCTION "public"."geometry_gist_compress_nd"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_compress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_compress_nd"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_penalty_nd(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_penalty_nd"(internal, internal, internal);
CREATE FUNCTION "public"."geometry_gist_penalty_nd"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_penalty'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_penalty_nd"(IN internal, IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_picksplit_nd(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_picksplit_nd"(internal, internal);
CREATE FUNCTION "public"."geometry_gist_picksplit_nd"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_picksplit'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_picksplit_nd"(IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_union_nd(bytea, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_union_nd"(bytea, internal);
CREATE FUNCTION "public"."geometry_gist_union_nd"(IN bytea, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_union'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_union_nd"(IN bytea, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_same_nd("public"."geometry", "public"."geometry", internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_same_nd"("public"."geometry", "public"."geometry", internal);
CREATE FUNCTION "public"."geometry_gist_same_nd"(IN "public"."geometry", IN "public"."geometry", IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_same'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_same_nd"(IN "public"."geometry", IN "public"."geometry", IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_gist_decompress_nd(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_gist_decompress_nd"(internal);
CREATE FUNCTION "public"."geometry_gist_decompress_nd"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_decompress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geometry_gist_decompress_nd"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_overlaps_nd("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_overlaps_nd"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."geometry_overlaps_nd"(IN "public"."geometry", IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_overlaps'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_overlaps_nd"(IN "public"."geometry", IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_affine("public"."geometry", float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_affine"("public"."geometry", float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_affine'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.';

-- ----------------------------
--  Function structure for public.st_affine("public"."geometry", float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_affine"("public"."geometry", float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_affine"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, a, b, d, e, xoff, yoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.';

-- ----------------------------
--  Function structure for public.st_rotate("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotate"("public"."geometry", float8);
CREATE FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians counter-clockwise about an origin.';

-- ----------------------------
--  Function structure for public.st_rotate("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotate"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1,	$3 - cos($2) * $3 + sin($2) * $4, $4 - sin($2) * $3 - cos($2) * $4, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN float8, IN float8) IS 'args: geomA, rotRadians, x0, y0 - Rotate a geometry rotRadians counter-clockwise about an origin.';

-- ----------------------------
--  Function structure for public.st_rotate("public"."geometry", float8, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotate"("public"."geometry", float8, "public"."geometry");
CREATE FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, ST_X($3) - cos($2) * ST_X($3) + sin($2) * ST_Y($3), ST_Y($3) - sin($2) * ST_X($3) - cos($2) * ST_Y($3), 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rotate"(IN "public"."geometry", IN float8, IN "public"."geometry") IS 'args: geomA, rotRadians, pointOrigin - Rotate a geometry rotRadians counter-clockwise about an origin.';

-- ----------------------------
--  Function structure for public.st_rotatez("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotatez"("public"."geometry", float8);
CREATE FUNCTION "public"."st_rotatez"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Rotate($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotatez"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rotatez"(IN "public"."geometry", IN float8) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.';

-- ----------------------------
--  Function structure for public.st_rotatex("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotatex"("public"."geometry", float8);
CREATE FUNCTION "public"."st_rotatex"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotatex"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rotatex"(IN "public"."geometry", IN float8) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.';

-- ----------------------------
--  Function structure for public.st_rotatey("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotatey"("public"."geometry", float8);
CREATE FUNCTION "public"."st_rotatey"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_rotatey"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rotatey"(IN "public"."geometry", IN float8) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.';

-- ----------------------------
--  Function structure for public.st_translate("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_translate"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8, IN float8) IS 'args: g1, deltax, deltay, deltaz - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).';

-- ----------------------------
--  Function structure for public.st_translate("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_translate"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Translate($1, $2, $3, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_translate"(IN "public"."geometry", IN float8, IN float8) IS 'args: g1, deltax, deltay - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).';

-- ----------------------------
--  Function structure for public.st_scale("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_scale"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8, IN float8) IS 'args: geomA, XFactor, YFactor, ZFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).';

-- ----------------------------
--  Function structure for public.st_scale("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_scale"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Scale($1, $2, $3, 1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_scale"(IN "public"."geometry", IN float8, IN float8) IS 'args: geomA, XFactor, YFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).';

-- ----------------------------
--  Function structure for public.st_transscale("public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transscale"("public"."geometry", float8, float8, float8, float8);
CREATE FUNCTION "public"."st_transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_Affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_transscale"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, deltaX, deltaY, XFactor, YFactor - Translates the geometry using the deltaX and deltaY args, then scales it using the XFactor, YFactor args, working in 2D only.';

-- ----------------------------
--  Function structure for public.st_shift_longitude("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_shift_longitude"("public"."geometry");
CREATE FUNCTION "public"."st_shift_longitude"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_longitude_shift'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_shift_longitude"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_shift_longitude"(IN "public"."geometry") IS 'args: geomA - Reads every point/vertex in every component of every feature in a geometry, and if the longitude coordinate is <0, adds 360 to it. The result would be a 0-360 version of the data to be plotted in a 180 centric map';

-- ----------------------------
--  Function structure for public.st_xmin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_xmin"("public"."box3d");
CREATE FUNCTION "public"."st_xmin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.0','BOX3D_xmin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_xmin"(IN "public"."box3d") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_xmin"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_ymin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ymin"("public"."box3d");
CREATE FUNCTION "public"."st_ymin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.0','BOX3D_ymin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ymin"(IN "public"."box3d") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_ymin"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_zmin("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_zmin"("public"."box3d");
CREATE FUNCTION "public"."st_zmin"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.0','BOX3D_zmin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_zmin"(IN "public"."box3d") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_zmin"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_xmax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_xmax"("public"."box3d");
CREATE FUNCTION "public"."st_xmax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.0','BOX3D_xmax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_xmax"(IN "public"."box3d") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_xmax"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_ymax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ymax"("public"."box3d");
CREATE FUNCTION "public"."st_ymax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.0','BOX3D_ymax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ymax"(IN "public"."box3d") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_ymax"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_zmax("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_zmax"("public"."box3d");
CREATE FUNCTION "public"."st_zmax"(IN "public"."box3d") RETURNS "float8" 
	AS '$libdir/postgis-2.0','BOX3D_zmax'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_zmax"(IN "public"."box3d") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_zmax"(IN "public"."box3d") IS 'args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.';

-- ----------------------------
--  Function structure for public.st_expand("public"."box2d", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_expand"("public"."box2d", float8);
CREATE FUNCTION "public"."st_expand"(IN "public"."box2d", IN float8) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','BOX2D_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_expand"(IN "public"."box2d", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_expand"(IN "public"."box2d", IN float8) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';

-- ----------------------------
--  Function structure for public.postgis_getbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_getbbox"("public"."geometry");
CREATE FUNCTION "public"."postgis_getbbox"(IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','LWGEOM_to_BOX2D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_getbbox"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_makebox2d("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makebox2d"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_makebox2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','BOX2D_construct'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makebox2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makebox2d"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.';

-- ----------------------------
--  Function structure for public.st_combine_bbox("public"."box2d", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_combine_bbox"("public"."box2d", "public"."geometry");
CREATE FUNCTION "public"."st_combine_bbox"(IN "public"."box2d", IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','BOX2D_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_combine_bbox"(IN "public"."box2d", IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_estimated_extent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_estimated_extent"(text, text, text);
CREATE FUNCTION "public"."st_estimated_extent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','geometry_estimated_extent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY DEFINER
	IMMUTABLE;
ALTER FUNCTION "public"."st_estimated_extent"(IN text, IN text, IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_estimated_extent"(IN text, IN text, IN text) IS 'args: schema_name, table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.';

-- ----------------------------
--  Function structure for public.st_estimated_extent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_estimated_extent"(text, text);
CREATE FUNCTION "public"."st_estimated_extent"(IN text, IN text) RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','geometry_estimated_extent'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY DEFINER
	IMMUTABLE;
ALTER FUNCTION "public"."st_estimated_extent"(IN text, IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_estimated_extent"(IN text, IN text) IS 'args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.';

-- ----------------------------
--  Function structure for public.st_find_extent(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_find_extent"(text, text, text);
CREATE FUNCTION "public"."st_find_extent"(IN text, IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT ST_Extent("' || columnname || '") As extent FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_find_extent"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_find_extent(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_find_extent"(text, text);
CREATE FUNCTION "public"."st_find_extent"(IN text, IN text) RETURNS "public"."box2d" 
	AS $BODY$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT ST_Extent("' || columnname || '") As extent FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_find_extent"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_addbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_addbbox"("public"."geometry");
CREATE FUNCTION "public"."postgis_addbbox"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_addBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_addbbox"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_addbbox"(IN "public"."geometry") IS 'args: geomA - Add bounding box to the geometry.';

-- ----------------------------
--  Function structure for public.postgis_dropbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_dropbbox"("public"."geometry");
CREATE FUNCTION "public"."postgis_dropbbox"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_dropBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_dropbbox"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_dropbbox"(IN "public"."geometry") IS 'args: geomA - Drop the bounding box cache from the geometry.';

-- ----------------------------
--  Function structure for public.postgis_hasbbox("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_hasbbox"("public"."geometry");
CREATE FUNCTION "public"."postgis_hasbbox"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_hasBBOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_hasbbox"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_hasbbox"(IN "public"."geometry") IS 'args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.';

-- ----------------------------
--  Function structure for public.st_mem_size("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mem_size"("public"."geometry");
CREATE FUNCTION "public"."st_mem_size"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_mem_size'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mem_size"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mem_size"(IN "public"."geometry") IS 'args: geomA - Returns the amount of space (in bytes) the geometry takes.';

-- ----------------------------
--  Function structure for public.st_summary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summary"("public"."geometry");
CREATE FUNCTION "public"."st_summary"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_summary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_summary"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_summary"(IN "public"."geometry") IS 'args: g - Returns a text summary of the contents of the geometry.';

-- ----------------------------
--  Function structure for public.st_npoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_npoints"("public"."geometry");
CREATE FUNCTION "public"."st_npoints"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_npoints'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_npoints"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_npoints"(IN "public"."geometry") IS 'args: g1 - Return the number of points (vertexes) in a geometry.';

-- ----------------------------
--  Function structure for public.st_nrings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_nrings"("public"."geometry");
CREATE FUNCTION "public"."st_nrings"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_nrings'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_nrings"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_nrings"(IN "public"."geometry") IS 'args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.';

-- ----------------------------
--  Function structure for public.st_3dlength("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dlength"("public"."geometry");
CREATE FUNCTION "public"."st_3dlength"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_length_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dlength"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dlength"(IN "public"."geometry") IS 'args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.';

-- ----------------------------
--  Function structure for public.st_length2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length2d"("public"."geometry");
CREATE FUNCTION "public"."st_length2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_length2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length2d"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_length2d"(IN "public"."geometry") IS 'args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length';

-- ----------------------------
--  Function structure for public.st_length("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length"("public"."geometry");
CREATE FUNCTION "public"."st_length"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_length2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_length"(IN "public"."geometry") IS 'args: a_2dlinestring - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';

-- ----------------------------
--  Function structure for public.st_3dlength_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dlength_spheroid"("public"."geometry", "public"."spheroid");
CREATE FUNCTION "public"."st_3dlength_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_length_ellipsoid_linestring'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dlength_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dlength_spheroid"(IN "public"."geometry", IN "public"."spheroid") IS 'args: a_linestring, a_spheroid - Calculates the length of a geometry on an ellipsoid, taking the elevation into account. This is just an alias for ST_Length_Spheroid.';

-- ----------------------------
--  Function structure for public.st_length_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length_spheroid"("public"."geometry", "public"."spheroid");
CREATE FUNCTION "public"."st_length_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_length_ellipsoid_linestring'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_length_spheroid"(IN "public"."geometry", IN "public"."spheroid") IS 'args: a_linestring, a_spheroid - Calculates the 2D or 3D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.';

-- ----------------------------
--  Function structure for public.st_length2d_spheroid("public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length2d_spheroid"("public"."geometry", "public"."spheroid");
CREATE FUNCTION "public"."st_length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_length2d_ellipsoid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_length2d_spheroid"(IN "public"."geometry", IN "public"."spheroid") IS 'args: a_linestring, a_spheroid - Calculates the 2D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.';

-- ----------------------------
--  Function structure for public.st_3dperimeter("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dperimeter"("public"."geometry");
CREATE FUNCTION "public"."st_3dperimeter"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_perimeter_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dperimeter"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dperimeter"(IN "public"."geometry") IS 'args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.';

-- ----------------------------
--  Function structure for public.st_perimeter2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_perimeter2d"("public"."geometry");
CREATE FUNCTION "public"."st_perimeter2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_perimeter2d_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_perimeter2d"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_perimeter2d"(IN "public"."geometry") IS 'args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.';

-- ----------------------------
--  Function structure for public.st_perimeter("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_perimeter"("public"."geometry");
CREATE FUNCTION "public"."st_perimeter"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_perimeter2d_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_perimeter"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_perimeter"(IN "public"."geometry") IS 'args: g1 - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon). geometry measurement is in units of spatial reference and geography is in meters.';

-- ----------------------------
--  Function structure for public.st_area2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_area2d"("public"."geometry");
CREATE FUNCTION "public"."st_area2d"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_area_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_area2d"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_area("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_area"("public"."geometry");
CREATE FUNCTION "public"."st_area"(IN "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_area_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_area"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_area"(IN "public"."geometry") IS 'args: g1 - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';

-- ----------------------------
--  Function structure for public.st_distance_spheroid("public"."geometry", "public"."geometry", "public"."spheroid")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance_spheroid"("public"."geometry", "public"."geometry", "public"."spheroid");
CREATE FUNCTION "public"."st_distance_spheroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN "public"."spheroid") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_distance_ellipsoid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance_spheroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN "public"."spheroid") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_distance_spheroid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN "public"."spheroid") IS 'args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.';

-- ----------------------------
--  Function structure for public.st_distance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_distance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_mindistance2d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_distance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';

-- ----------------------------
--  Function structure for public.st_point_inside_circle("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_point_inside_circle"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_inside_circle_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_point_inside_circle"(IN "public"."geometry", IN float8, IN float8, IN float8) IS 'args: a_point, center_x, center_y, radius - Is the point geometry insert circle defined by center_x, center_y, radius';

-- ----------------------------
--  Function structure for public.st_azimuth("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_azimuth"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_azimuth"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_azimuth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_azimuth"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_azimuth"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: pointA, pointB - Returns the angle in radians from the horizontal of the vector defined by pointA and pointB. Angle is computed clockwise from down-to-up: on the clock: 12=0; 3=PI/2; 6=PI; 9=3PI/2.';

-- ----------------------------
--  Function structure for public.st_force_2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_2d"("public"."geometry");
CREATE FUNCTION "public"."st_force_2d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_force_2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_2d"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_force_2d"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into a "2-dimensional mode" so that all output representations will only have the X and Y coordinates.';

-- ----------------------------
--  Function structure for public.st_force_3dz("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_3dz"("public"."geometry");
CREATE FUNCTION "public"."st_force_3dz"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_force_3dz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_3dz"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_force_3dz"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into XYZ mode. This is a synonym for ST_Force_3D.';

-- ----------------------------
--  Function structure for public.st_force_3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_3d"("public"."geometry");
CREATE FUNCTION "public"."st_force_3d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_force_3dz'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_3d"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_force_3d"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into XYZ mode. This is an alias for ST_Force_3DZ.';

-- ----------------------------
--  Function structure for public.st_force_3dm("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_3dm"("public"."geometry");
CREATE FUNCTION "public"."st_force_3dm"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_force_3dm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_3dm"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_force_3dm"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into XYM mode.';

-- ----------------------------
--  Function structure for public.st_force_4d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_4d"("public"."geometry");
CREATE FUNCTION "public"."st_force_4d"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_force_4d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_4d"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_force_4d"(IN "public"."geometry") IS 'args: geomA - Forces the geometries into XYZM mode.';

-- ----------------------------
--  Function structure for public.st_force_collection("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_force_collection"("public"."geometry");
CREATE FUNCTION "public"."st_force_collection"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_force_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_force_collection"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_force_collection"(IN "public"."geometry") IS 'args: geomA - Converts the geometry into a GEOMETRYCOLLECTION.';

-- ----------------------------
--  Function structure for public.st_collectionextract("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_collectionextract"("public"."geometry", int4);
CREATE FUNCTION "public"."st_collectionextract"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_CollectionExtract'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_collectionextract"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_collectionextract"(IN "public"."geometry", IN int4) IS 'args: collection, type - Given a (multi)geometry, returns a (multi)geometry consisting only of elements of the specified type.';

-- ----------------------------
--  Function structure for public.st_collectionhomogenize("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_collectionhomogenize"("public"."geometry");
CREATE FUNCTION "public"."st_collectionhomogenize"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_CollectionHomogenize'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_collectionhomogenize"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_collectionhomogenize"(IN "public"."geometry") IS 'args: collection - Given a geometry collection, returns the "simplest" representation of the contents.';

-- ----------------------------
--  Function structure for public.st_multi("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multi"("public"."geometry");
CREATE FUNCTION "public"."st_multi"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_force_multi'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multi"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_multi"(IN "public"."geometry") IS 'args: g1 - Returns the geometry as a MULTI* geometry. If the geometry is already a MULTI*, it is returned unchanged.';

-- ----------------------------
--  Function structure for public.st_expand("public"."box3d", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_expand"("public"."box3d", float8);
CREATE FUNCTION "public"."st_expand"(IN "public"."box3d", IN float8) RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.0','BOX3D_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_expand"(IN "public"."box3d", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_expand"(IN "public"."box3d", IN float8) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';

-- ----------------------------
--  Function structure for public.st_expand("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_expand"("public"."geometry", float8);
CREATE FUNCTION "public"."st_expand"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_expand"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_expand"(IN "public"."geometry", IN float8) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';

-- ----------------------------
--  Function structure for public.st_envelope("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_envelope"("public"."geometry");
CREATE FUNCTION "public"."st_envelope"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_envelope'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_envelope"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_envelope"(IN "public"."geometry") IS 'args: g1 - Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.';

-- ----------------------------
--  Function structure for public.st_reverse("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reverse"("public"."geometry");
CREATE FUNCTION "public"."st_reverse"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_reverse'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_reverse"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_reverse"(IN "public"."geometry") IS 'args: g1 - Returns the geometry with vertex order reversed.';

-- ----------------------------
--  Function structure for public.st_forcerhr("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_forcerhr"("public"."geometry");
CREATE FUNCTION "public"."st_forcerhr"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_force_clockwise_poly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_forcerhr"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_forcerhr"(IN "public"."geometry") IS 'args: g - Forces the orientation of the vertices in a polygon to follow the Right-Hand-Rule.';

-- ----------------------------
--  Function structure for public.postgis_noop("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_noop"("public"."geometry");
CREATE FUNCTION "public"."postgis_noop"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_noop'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."postgis_noop"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_zmflag("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_zmflag"("public"."geometry");
CREATE FUNCTION "public"."st_zmflag"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-2.0','LWGEOM_zmflag'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_zmflag"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_zmflag"(IN "public"."geometry") IS 'args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.';

-- ----------------------------
--  Function structure for public.st_ndims("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ndims"("public"."geometry");
CREATE FUNCTION "public"."st_ndims"(IN "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-2.0','LWGEOM_ndims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ndims"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_ndims"(IN "public"."geometry") IS 'args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.';

-- ----------------------------
--  Function structure for public.st_asewkt("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkt"("public"."geometry");
CREATE FUNCTION "public"."st_asewkt"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asEWKT'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkt"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asewkt"(IN "public"."geometry") IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asewkb("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkb"("public"."geometry");
CREATE FUNCTION "public"."st_asewkb"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-2.0','WKBFromLWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkb"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asewkb"(IN "public"."geometry") IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.';

-- ----------------------------
--  Function structure for public.st_ashexewkb("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ashexewkb"("public"."geometry");
CREATE FUNCTION "public"."st_ashexewkb"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asHEXEWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ashexewkb"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_ashexewkb"(IN "public"."geometry") IS 'args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.';

-- ----------------------------
--  Function structure for public.st_ashexewkb("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_ashexewkb"("public"."geometry", text);
CREATE FUNCTION "public"."st_ashexewkb"(IN "public"."geometry", IN text) RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asHEXEWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_ashexewkb"(IN "public"."geometry", IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_ashexewkb"(IN "public"."geometry", IN text) IS 'args: g1, NDRorXDR - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.';

-- ----------------------------
--  Function structure for public.st_asewkb("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkb"("public"."geometry", text);
CREATE FUNCTION "public"."st_asewkb"(IN "public"."geometry", IN text) RETURNS "bytea" 
	AS '$libdir/postgis-2.0','WKBFromLWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkb"(IN "public"."geometry", IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asewkb"(IN "public"."geometry", IN text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.';

-- ----------------------------
--  Function structure for public.st_aslatlontext("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aslatlontext"("public"."geometry", text);
CREATE FUNCTION "public"."st_aslatlontext"(IN "public"."geometry", IN text) RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_to_latlon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aslatlontext"(IN "public"."geometry", IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_aslatlontext"(IN "public"."geometry", IN text) IS 'args: pt, format - Return the Degrees, Minutes, Seconds representation of the given point.';

-- ----------------------------
--  Function structure for public.st_aslatlontext("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aslatlontext"("public"."geometry");
CREATE FUNCTION "public"."st_aslatlontext"(IN "public"."geometry") RETURNS "text" 
	AS $BODY$ SELECT ST_AsLatLonText($1, '') $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aslatlontext"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_aslatlontext"(IN "public"."geometry") IS 'args: pt - Return the Degrees, Minutes, Seconds representation of the given point.';

-- ----------------------------
--  Function structure for public.geomfromewkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geomfromewkb"(bytea);
CREATE FUNCTION "public"."geomfromewkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOMFromWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geomfromewkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_geomfromewkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromewkb"(bytea);
CREATE FUNCTION "public"."st_geomfromewkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOMFromWKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromewkb"(IN bytea) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromewkb"(IN bytea) IS 'args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).';

-- ----------------------------
--  Function structure for public.geomfromewkt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geomfromewkt"(text);
CREATE FUNCTION "public"."geomfromewkt"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geomfromewkt"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_geomfromewkt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromewkt"(text);
CREATE FUNCTION "public"."st_geomfromewkt"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromewkt"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromewkt"(IN text) IS 'args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).';

-- ----------------------------
--  Function structure for public.st_makepoint(float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepoint"(float8, float8);
CREATE FUNCTION "public"."st_makepoint"(IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepoint"(IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makepoint"(IN float8, IN float8) IS 'args: x, y - Creates a 2D,3DZ or 4D point geometry.';

-- ----------------------------
--  Function structure for public.st_makepoint(float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepoint"(float8, float8, float8);
CREATE FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8) IS 'args: x, y, z - Creates a 2D,3DZ or 4D point geometry.';

-- ----------------------------
--  Function structure for public.st_makepoint(float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepoint"(float8, float8, float8, float8);
CREATE FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makepoint"(IN float8, IN float8, IN float8, IN float8) IS 'args: x, y, z, m - Creates a 2D,3DZ or 4D point geometry.';

-- ----------------------------
--  Function structure for public.st_makepointm(float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepointm"(float8, float8, float8);
CREATE FUNCTION "public"."st_makepointm"(IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makepoint3dm'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepointm"(IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makepointm"(IN float8, IN float8, IN float8) IS 'args: x, y, m - Creates a point geometry with an x y and m coordinate.';

-- ----------------------------
--  Function structure for public.st_3dmakebox("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dmakebox"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dmakebox"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.0','BOX3D_construct'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dmakebox"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dmakebox"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.';

-- ----------------------------
--  Function structure for public.st_makeline("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeline"("public"."_geometry");
CREATE FUNCTION "public"."st_makeline"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makeline_garray'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeline"(IN "public"."_geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makeline"(IN "public"."_geometry") IS 'args: geoms_array - Creates a Linestring from point or line geometries.';

-- ----------------------------
--  Function structure for public.st_linefrommultipoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefrommultipoint"("public"."geometry");
CREATE FUNCTION "public"."st_linefrommultipoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_line_from_mpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefrommultipoint"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linefrommultipoint"(IN "public"."geometry") IS 'args: aMultiPoint - Creates a LineString from a MultiPoint geometry.';

-- ----------------------------
--  Function structure for public.st_makeline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_makeline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makeline'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makeline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geom1, geom2 - Creates a Linestring from point or line geometries.';

-- ----------------------------
--  Function structure for public.st_addpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addpoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_addpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: linestring, point - Adds a point to a LineString before point <position> (0-based index).';

-- ----------------------------
--  Function structure for public.st_addpoint("public"."geometry", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addpoint"("public"."geometry", "public"."geometry", int4);
CREATE FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_addpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_addpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) IS 'args: linestring, point, position - Adds a point to a LineString before point <position> (0-based index).';

-- ----------------------------
--  Function structure for public.st_removepoint("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_removepoint"("public"."geometry", int4);
CREATE FUNCTION "public"."st_removepoint"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_removepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_removepoint"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_removepoint"(IN "public"."geometry", IN int4) IS 'args: linestring, offset - Removes point from a linestring. Offset is 0-based.';

-- ----------------------------
--  Function structure for public.st_setpoint("public"."geometry", int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setpoint"("public"."geometry", int4, "public"."geometry");
CREATE FUNCTION "public"."st_setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_setpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setpoint"(IN "public"."geometry", IN int4, IN "public"."geometry") IS 'args: linestring, zerobasedposition, point - Replace point N of linestring with given point. Index is 0-based.';

-- ----------------------------
--  Function structure for public.st_makeenvelope(float8, float8, float8, float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeenvelope"(float8, float8, float8, float8, int4);
CREATE FUNCTION "public"."st_makeenvelope"(IN float8, IN float8, IN float8, IN float8, IN int4 DEFAULT 0) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_MakeEnvelope'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeenvelope"(IN float8, IN float8, IN float8, IN float8, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makeenvelope"(IN float8, IN float8, IN float8, IN float8, IN int4) IS 'args: xmin, ymin, xmax, ymax, srid=unknown - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.';

-- ----------------------------
--  Function structure for public.st_makepolygon("public"."geometry", "public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepolygon"("public"."geometry", "public"."_geometry");
CREATE FUNCTION "public"."st_makepolygon"(IN "public"."geometry", IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makepoly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepolygon"(IN "public"."geometry", IN "public"."_geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makepolygon"(IN "public"."geometry", IN "public"."_geometry") IS 'args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.';

-- ----------------------------
--  Function structure for public.st_makepolygon("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makepolygon"("public"."geometry");
CREATE FUNCTION "public"."st_makepolygon"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makepoly'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makepolygon"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makepolygon"(IN "public"."geometry") IS 'args: linestring - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.';

-- ----------------------------
--  Function structure for public.st_buildarea("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buildarea"("public"."geometry");
CREATE FUNCTION "public"."st_buildarea"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_BuildArea'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buildarea"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_buildarea"(IN "public"."geometry") IS 'args: A - Creates an areal geometry formed by the constituent linework of given geometry';

-- ----------------------------
--  Function structure for public.st_polygonize("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonize"("public"."_geometry");
CREATE FUNCTION "public"."st_polygonize"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','polygonize_garray'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonize"(IN "public"."_geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_polygonize"(IN "public"."_geometry") IS 'args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.';

-- ----------------------------
--  Function structure for public.st_linemerge("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linemerge"("public"."geometry");
CREATE FUNCTION "public"."st_linemerge"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','linemerge'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linemerge"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linemerge"(IN "public"."geometry") IS 'args: amultilinestring - Returns a (set of) LineString(s) formed by sewing together a MULTILINESTRING.';

-- ----------------------------
--  Function structure for public.st_dump("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dump"("public"."geometry");
CREATE FUNCTION "public"."st_dump"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-2.0','LWGEOM_dump'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dump"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dump"(IN "public"."geometry") IS 'args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.';

-- ----------------------------
--  Function structure for public.st_dumprings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dumprings"("public"."geometry");
CREATE FUNCTION "public"."st_dumprings"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS '$libdir/postgis-2.0','LWGEOM_dump_rings'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dumprings"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dumprings"(IN "public"."geometry") IS 'args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.';

-- ----------------------------
--  Function structure for public._st_dumppoints("public"."geometry", _int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dumppoints"("public"."geometry", _int4);
CREATE FUNCTION "public"."_st_dumppoints"(IN the_geom "public"."geometry", IN cur_path _int4) RETURNS SETOF "public"."geometry_dump" 
	AS $BODY$
DECLARE
  tmp geometry_dump;
  tmp2 geometry_dump;
  nb_points integer;
  nb_geom integer;
  i integer;
  j integer;
  g geometry;
  
BEGIN
  
  -- RAISE DEBUG '%,%', cur_path, ST_GeometryType(the_geom);

  -- Special case collections : iterate and return the DumpPoints of the geometries

  IF (ST_IsCollection(the_geom)) THEN
 
    i = 1;
    FOR tmp2 IN SELECT (ST_Dump(the_geom)).* LOOP

      FOR tmp IN SELECT * FROM _ST_DumpPoints(tmp2.geom, cur_path || tmp2.path) LOOP
	    RETURN NEXT tmp;
      END LOOP;
      i = i + 1;
      
    END LOOP;

    RETURN;
  END IF;
  

  -- Special case (POLYGON) : return the points of the rings of a polygon
  IF (ST_GeometryType(the_geom) = 'ST_Polygon') THEN

    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    j := ST_NumInteriorRings(the_geom);
    FOR i IN 1..j LOOP
        FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_InteriorRingN(the_geom, i), cur_path || ARRAY[i+1]) LOOP
          RETURN NEXT tmp;
        END LOOP;
    END LOOP;
    
    RETURN;
  END IF;

  -- Special case (TRIANGLE) : return the points of the external rings of a TRIANGLE
  IF (ST_GeometryType(the_geom) = 'ST_Triangle') THEN

    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    RETURN;
  END IF;

    
  -- Special case (POINT) : return the point
  IF (ST_GeometryType(the_geom) = 'ST_Point') THEN

    tmp.path = cur_path || ARRAY[1];
    tmp.geom = the_geom;

    RETURN NEXT tmp;
    RETURN;

  END IF;


  -- Use ST_NumPoints rather than ST_NPoints to have a NULL value if the_geom isn't
  -- a LINESTRING, CIRCULARSTRING.
  SELECT ST_NumPoints(the_geom) INTO nb_points;

  -- This should never happen
  IF (nb_points IS NULL) THEN
    RAISE EXCEPTION 'Unexpected error while dumping geometry %', ST_AsText(the_geom);
  END IF;

  FOR i IN 1..nb_points LOOP
    tmp.path = cur_path || ARRAY[i];
    tmp.geom := ST_PointN(the_geom, i);
    RETURN NEXT tmp;
  END LOOP;
   
END
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_st_dumppoints"(IN the_geom "public"."geometry", IN cur_path _int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_dumppoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dumppoints"("public"."geometry");
CREATE FUNCTION "public"."st_dumppoints"(IN "public"."geometry") RETURNS SETOF "public"."geometry_dump" 
	AS $BODY$
  SELECT * FROM _ST_DumpPoints($1, NULL);
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_dumppoints"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dumppoints"(IN "public"."geometry") IS 'args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.';

-- ----------------------------
--  Function structure for public.populate_geometry_columns(bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."populate_geometry_columns"(bool);
CREATE FUNCTION "public"."populate_geometry_columns"(IN use_typmod bool DEFAULT true) RETURNS "text" 
	AS $BODY$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' ;

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' 
	LOOP

		inserted := inserted + populate_geometry_columns(gcs.oid, use_typmod);
	END LOOP;

	IF oldcount > inserted THEN
	    stale = oldcount-inserted;
	ELSE
	    stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted;
END

$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."populate_geometry_columns"(IN use_typmod bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."populate_geometry_columns"(IN use_typmod bool) IS 'args: use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false';

-- ----------------------------
--  Function structure for public.populate_geometry_columns(oid, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."populate_geometry_columns"(oid, bool);
CREATE FUNCTION "public"."populate_geometry_columns"(IN tbl_oid oid, IN use_typmod bool DEFAULT true) RETURNS "int4" 
	AS $BODY$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gc_old      RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;
	constraint_successful boolean := false;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

        RAISE DEBUG 'Processing table %.%.%', gcs.nspname, gcs.relname, gcs.attname;
    
        gc_is_valid := true;
        -- Find the srid, coord_dimension, and type of current geometry
        -- in geometry_columns -- which is now a view
        
        SELECT type, srid, coord_dimension INTO gc_old 
            FROM geometry_columns 
            WHERE f_table_schema = gcs.nspname AND f_table_name = gcs.relname AND f_geometry_column = gcs.attname; 
            
        IF upper(gc_old.type) = 'GEOMETRY' THEN
        -- This is an unconstrained geometry we need to do something
        -- We need to figure out what to set the type by inspecting the data
            EXECUTE 'SELECT st_srid(' || quote_ident(gcs.attname) || ') As srid, GeometryType(' || quote_ident(gcs.attname) || ') As type, ST_NDims(' || quote_ident(gcs.attname) || ') As dims ' ||
                     ' FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || 
                     ' WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1;'
                INTO gc;
            IF gc IS NULL THEN -- there is no data so we can not determine geometry type
            	RAISE WARNING 'No data in table %.%, so no information to determine geometry type and srid', gcs.nspname, gcs.relname;
            	RETURN 0;
            END IF;
            gsrid := gc.srid; gtype := gc.type; gndims := gc.dims;
            	
            IF use_typmod THEN
                BEGIN
                    EXECUTE 'ALTER TABLE ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || ' ALTER COLUMN ' || quote_ident(gcs.attname) || 
                        ' TYPE geometry(' || postgis_type_name(gtype, gndims, true) || ', ' || gsrid::text  || ') ';
                    inserted := inserted + 1;
                EXCEPTION
                        WHEN invalid_parameter_value THEN
                        RAISE WARNING 'Could not convert ''%'' in ''%.%'' to use typmod with srid %, type: % ', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), gsrid, postgis_type_name(gtype, gndims, true);
                            gc_is_valid := false;
                END;
                
            ELSE
                -- Try to apply srid check to column
            	constraint_successful = false;
                IF (gsrid > 0 AND postgis_constraint_srid(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || 
                                 ' ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || 
                                 ' CHECK (st_srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
                            gc_is_valid := false;
                    END;
                END IF;
                
                -- Try to apply ndims check to column
                IF (gndims IS NOT NULL AND postgis_constraint_dims(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                                 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
                                 CHECK (st_ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
                            gc_is_valid := false;
                    END;
                END IF;
    
                -- Try to apply geometrytype check to column
                IF (gtype IS NOT NULL AND postgis_constraint_type(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                        ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
                        CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            -- No geometry check can be applied. This column contains a number of geometry types.
                            RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
                    END;
                END IF;
                 --only count if we were successful in applying at least one constraint
                IF constraint_successful THEN
                	inserted := inserted + 1;
                END IF;
            END IF;	        
	    END IF;

	END LOOP;

	RETURN inserted;
END

$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."populate_geometry_columns"(IN tbl_oid oid, IN use_typmod bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."populate_geometry_columns"(IN tbl_oid oid, IN use_typmod bool) IS 'args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false';

-- ----------------------------
--  Function structure for public.addgeometrycolumn(varchar, varchar, varchar, varchar, int4, varchar, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addgeometrycolumn"(varchar, varchar, varchar, varchar, int4, varchar, int4, bool);
CREATE FUNCTION "public"."addgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool DEFAULT true) RETURNS "text" 
	AS $BODY$
DECLARE
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;
	new_srid integer;

BEGIN

	-- Verify geometry type
	IF (postgis_type_name(new_type,new_dim) IS NULL )
	THEN
		RAISE EXCEPTION 'Invalid type name "%(%)" - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM, TRIANGLE, TRIANGLEM,
	POLYHEDRALSURFACE, POLYHEDRALSURFACEM, TIN, TINM
	or GEOMETRYCOLLECTIONM', new_type, new_dim;
		RETURN 'fail';
	END IF;


	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;


	-- Verify SRID
	IF ( new_srid_in > 0 ) THEN
		IF new_srid_in > 998999 THEN
			RAISE EXCEPTION 'AddGeometryColumn() - SRID must be <= %', 998999;
		END IF;
		new_srid := new_srid_in;
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumn() - invalid SRID';
			RETURN 'fail';
		END IF;
	ELSE
		new_srid := ST_SRID('POINT EMPTY'::geometry);
		IF ( new_srid_in != new_srid ) THEN
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;


	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;


	-- Add geometry column to table
	IF use_typmod THEN
	     sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry(' || postgis_type_name(new_type, new_dim) || ', ' || new_srid::text || ')';
        RAISE DEBUG '%', sql;
	ELSE
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry ';
        RAISE DEBUG '%', sql;
    END IF;
	EXECUTE sql;

	IF NOT use_typmod THEN
        -- Add table CHECKs
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_srid_' || column_name)
            || ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
    
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_dims_' || column_name)
            || ' CHECK (st_ndims(' || quote_ident(column_name) ||
            ') = ' || new_dim::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
    
        IF ( NOT (new_type = 'GEOMETRY')) THEN
            sql := 'ALTER TABLE ' ||
                quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
                quote_ident('enforce_geotype_' || column_name) ||
                ' CHECK (GeometryType(' ||
                quote_ident(column_name) || ')=' ||
                quote_literal(new_type) || ' OR (' ||
                quote_ident(column_name) || ') is null)';
            RAISE DEBUG '%', sql;
            EXECUTE sql;
        END IF;
    END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."addgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) IS 'args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior';

-- ----------------------------
--  Function structure for public.addgeometrycolumn(varchar, varchar, varchar, int4, varchar, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addgeometrycolumn"(varchar, varchar, varchar, int4, varchar, int4, bool);
CREATE FUNCTION "public"."addgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool DEFAULT true) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6,$7) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."addgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."addgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) IS 'args: schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior';

-- ----------------------------
--  Function structure for public.addgeometrycolumn(varchar, varchar, int4, varchar, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addgeometrycolumn"(varchar, varchar, int4, varchar, int4, bool);
CREATE FUNCTION "public"."addgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool DEFAULT true) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5, $6) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."addgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar, IN new_srid int4, IN new_type varchar, IN new_dim int4, IN use_typmod bool) IS 'args: table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior';

-- ----------------------------
--  Function structure for public.dropgeometrycolumn(varchar, varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrycolumn"(varchar, varchar, varchar, varchar);
CREATE FUNCTION "public"."dropgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <>  true ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = false;
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (okay <> true) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."dropgeometrycolumn"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) IS 'args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.';

-- ----------------------------
--  Function structure for public.dropgeometrycolumn(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrycolumn"(varchar, varchar, varchar);
CREATE FUNCTION "public"."dropgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."dropgeometrycolumn"(IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar) IS 'args: schema_name, table_name, column_name - Removes a geometry column from a spatial table.';

-- ----------------------------
--  Function structure for public.dropgeometrycolumn(varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrycolumn"(varchar, varchar);
CREATE FUNCTION "public"."dropgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."dropgeometrycolumn"(IN "table_name" varchar, IN "column_name" varchar) IS 'args: table_name, column_name - Removes a geometry column from a spatial table.';

-- ----------------------------
--  Function structure for public.dropgeometrytable(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrytable"(varchar, varchar, varchar);
CREATE FUNCTION "public"."dropgeometrytable"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar) RETURNS "text" 
	AS $BODY$
DECLARE
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- TODO: Should we warn if table doesn't exist probably instead just saying dropped
	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' RESTRICT';

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrytable"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."dropgeometrytable"(IN "catalog_name" varchar, IN "schema_name" varchar, IN "table_name" varchar) IS 'args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.';

-- ----------------------------
--  Function structure for public.dropgeometrytable(varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrytable"(varchar, varchar);
CREATE FUNCTION "public"."dropgeometrytable"(IN "schema_name" varchar, IN "table_name" varchar) RETURNS "text" 
	AS $BODY$ SELECT DropGeometryTable('',$1,$2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrytable"(IN "schema_name" varchar, IN "table_name" varchar) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."dropgeometrytable"(IN "schema_name" varchar, IN "table_name" varchar) IS 'args: schema_name, table_name - Drops a table and all its references in geometry_columns.';

-- ----------------------------
--  Function structure for public.dropgeometrytable(varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropgeometrytable"(varchar);
CREATE FUNCTION "public"."dropgeometrytable"(IN "table_name" varchar) RETURNS "text" 
	AS $BODY$ SELECT DropGeometryTable('','',$1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropgeometrytable"(IN "table_name" varchar) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."dropgeometrytable"(IN "table_name" varchar) IS 'args: table_name - Drops a table and all its references in geometry_columns.';

-- ----------------------------
--  Function structure for public.updategeometrysrid(varchar, varchar, varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."updategeometrysrid"(varchar, varchar, varchar, varchar, int4);
CREATE FUNCTION "public"."updategeometrysrid"(IN catalogn_name varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4) RETURNS "text" 
	AS $BODY$
DECLARE
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;
	unknown_srid integer;
	new_srid integer := new_srid_in;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <> true ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Ensure that column_name is in geometry_columns
	okay = false;
	FOR myrec IN SELECT type, coord_dimension FROM geometry_columns WHERE f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (NOT okay) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Ensure that new_srid is valid
	IF ( new_srid > 0 ) THEN
		IF ( SELECT count(*) = 0 from spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	ELSE
		unknown_srid := ST_SRID('POINT EMPTY'::geometry);
		IF ( new_srid != unknown_srid ) THEN
			new_srid := unknown_srid;
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	IF postgis_constraint_srid(schema_name, table_name, column_name) IS NOT NULL THEN 
	-- srid was enforced with constraints before, keep it that way.
        -- Make up constraint name
        cname = 'enforce_srid_'  || column_name;
    
        -- Drop enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' DROP constraint ' || quote_ident(cname);
    
        -- Update geometries SRID
        EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' SET ' || quote_ident(column_name) ||
            ' = ST_SetSRID(' || quote_ident(column_name) ||
            ', ' || new_srid::text || ')';
            
        -- Reset enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' ADD constraint ' || quote_ident(cname) ||
            ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')';
    ELSE 
        -- We will use typmod to enforce if no srid constraints
        -- We are using postgis_type_name to lookup the new name 
        -- (in case Paul changes his mind and flips geometry_columns to return old upper case name) 
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' || quote_ident(table_name) || 
        ' ALTER COLUMN ' || quote_ident(column_name) || ' TYPE  geometry(' || postgis_type_name(myrec.type, myrec.coord_dimension, true) || ', ' || new_srid::text || ') USING ST_SetSRID(' || quote_ident(column_name) || ',' || new_srid::text || ');' ;
    END IF;

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."updategeometrysrid"(IN catalogn_name varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."updategeometrysrid"(IN catalogn_name varchar, IN "schema_name" varchar, IN "table_name" varchar, IN "column_name" varchar, IN new_srid_in int4) IS 'args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.';

-- ----------------------------
--  Function structure for public.updategeometrysrid(varchar, varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."updategeometrysrid"(varchar, varchar, varchar, int4);
CREATE FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN varchar, IN int4) IS 'args: schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.';

-- ----------------------------
--  Function structure for public.updategeometrysrid(varchar, varchar, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."updategeometrysrid"(varchar, varchar, int4);
CREATE FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."updategeometrysrid"(IN varchar, IN varchar, IN int4) IS 'args: table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.';

-- ----------------------------
--  Function structure for public.find_srid(varchar, varchar, varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."find_srid"(varchar, varchar, varchar);
CREATE FUNCTION "public"."find_srid"(IN varchar, IN varchar, IN varchar) RETURNS "int4" 
	AS $BODY$
DECLARE
	schem text;
	tabl text;
	sr int4;
BEGIN
	IF $1 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - schema is NULL!';
	END IF;
	IF $2 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - table name is NULL!';
	END IF;
	IF $3 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - column name is NULL!';
	END IF;
	schem = $1;
	tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and tabl LIKE '%.%' ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	ELSE
	 schem = schem || '%';
	END IF;

	select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?';
	END IF;
	return sr;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."find_srid"(IN varchar, IN varchar, IN varchar) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."find_srid"(IN varchar, IN varchar, IN varchar) IS 'args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(<db/schema>, <table>, <column>) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.';

-- ----------------------------
--  Function structure for public.get_proj4_from_srid(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."get_proj4_from_srid"(int4);
CREATE FUNCTION "public"."get_proj4_from_srid"(IN int4) RETURNS "text" 
	AS $BODY$
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."get_proj4_from_srid"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_transform_geometry("public"."geometry", text, text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_transform_geometry"("public"."geometry", text, text, int4);
CREATE FUNCTION "public"."postgis_transform_geometry"(IN "public"."geometry", IN text, IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','transform_geom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_transform_geometry"(IN "public"."geometry", IN text, IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_transform("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."geometry", int4);
CREATE FUNCTION "public"."st_transform"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','transform'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_transform"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_transform"(IN "public"."geometry", IN int4) IS 'args: g1, srid - Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter.';

-- ----------------------------
--  Function structure for public.postgis_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_version"();
CREATE FUNCTION "public"."postgis_version"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_version"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_version"() IS 'Returns PostGIS version number and compile-time options.';

-- ----------------------------
--  Function structure for public.postgis_proj_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_proj_version"();
CREATE FUNCTION "public"."postgis_proj_version"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_proj_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_proj_version"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_proj_version"() IS 'Returns the version number of the PROJ4 library.';

-- ----------------------------
--  Function structure for public.postgis_scripts_installed()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_scripts_installed"();
CREATE FUNCTION "public"."postgis_scripts_installed"() RETURNS "text" 
	AS $BODY$ SELECT '2.0.2'::text || ' r' || 10789::text AS version $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_scripts_installed"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_scripts_installed"() IS 'Returns version of the postgis scripts installed in this database.';

-- ----------------------------
--  Function structure for public.postgis_lib_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_lib_version"();
CREATE FUNCTION "public"."postgis_lib_version"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_lib_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_lib_version"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_lib_version"() IS 'Returns the version number of the PostGIS library.';

-- ----------------------------
--  Function structure for public.postgis_scripts_released()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_scripts_released"();
CREATE FUNCTION "public"."postgis_scripts_released"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_scripts_released'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_scripts_released"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_scripts_released"() IS 'Returns the version number of the postgis.sql script released with the installed postgis lib.';

-- ----------------------------
--  Function structure for public.postgis_geos_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_geos_version"();
CREATE FUNCTION "public"."postgis_geos_version"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_geos_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_geos_version"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_geos_version"() IS 'Returns the version number of the GEOS library.';

-- ----------------------------
--  Function structure for public.postgis_svn_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_svn_version"();
CREATE FUNCTION "public"."postgis_svn_version"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_svn_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_svn_version"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_libxml_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_libxml_version"();
CREATE FUNCTION "public"."postgis_libxml_version"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_libxml_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_libxml_version"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_libxml_version"() IS 'Returns the version number of the libxml2 library.';

-- ----------------------------
--  Function structure for public.postgis_scripts_build_date()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_scripts_build_date"();
CREATE FUNCTION "public"."postgis_scripts_build_date"() RETURNS "text" 
	AS $BODY$SELECT '2013-05-10 01:04:31'::text AS version$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_scripts_build_date"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_scripts_build_date"() IS 'Returns build date of the PostGIS scripts.';

-- ----------------------------
--  Function structure for public.postgis_lib_build_date()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_lib_build_date"();
CREATE FUNCTION "public"."postgis_lib_build_date"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_lib_build_date'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_lib_build_date"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_lib_build_date"() IS 'Returns build date of the PostGIS library.';

-- ----------------------------
--  Function structure for public.postgis_full_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_full_version"();
CREATE FUNCTION "public"."postgis_full_version"() RETURNS "text" 
	AS $BODY$
DECLARE
	libver text;
	svnver text;
	projver text;
	geosver text;
	gdalver text;
	libxmlver text;
	dbproc text;
	relproc text;
	fullver text;
	rast_lib_ver text;
	rast_scr_ver text;
	topo_scr_ver text;
	json_lib_ver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_libjson_version() INTO json_lib_ver;
	BEGIN
		SELECT postgis_gdal_version() INTO gdalver;
	EXCEPTION
		WHEN undefined_function THEN
			gdalver := NULL;
			RAISE NOTICE 'Function postgis_gdal_version() not found.  Is raster support enabled and rtpostgis.sql installed?';
	END;
	SELECT postgis_libxml_version() INTO libxmlver;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;
	select postgis_svn_version() INTO svnver;
	BEGIN
		SELECT postgis_topology_scripts_installed() INTO topo_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			topo_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_topology_scripts_installed() not found. Is topology support enabled and topology.sql installed?';
	END;

	BEGIN
		SELECT postgis_raster_scripts_installed() INTO rast_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_scripts_installed() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;

	BEGIN
		SELECT postgis_raster_lib_version() INTO rast_lib_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_lib_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_lib_version() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;

	fullver = 'POSTGIS="' || libver;

	IF  svnver IS NOT NULL THEN
		fullver = fullver || ' r' || svnver;
	END IF;

	fullver = fullver || '"';

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;

	IF  gdalver IS NOT NULL THEN
		fullver = fullver || ' GDAL="' || gdalver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF json_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBJSON="' || json_lib_ver || '"';
	END IF;

	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';

	IF dbproc != relproc THEN
		fullver = fullver || ' (core procs from "' || dbproc || '" need upgrade)';
	END IF;

	IF topo_scr_ver IS NOT NULL THEN
		fullver = fullver || ' TOPOLOGY';
		IF topo_scr_ver != relproc THEN
			fullver = fullver || ' (topology procs from "' || topo_scr_ver || '" need upgrade)';
		END IF;
	END IF;

	IF rast_lib_ver IS NOT NULL THEN
		fullver = fullver || ' RASTER';
		IF rast_lib_ver != relproc THEN
			fullver = fullver || ' (raster lib from "' || rast_lib_ver || '" need upgrade)';
		END IF;
	END IF;

	IF rast_scr_ver IS NOT NULL AND rast_scr_ver != relproc THEN
		fullver = fullver || ' (raster procs from "' || rast_scr_ver || '" need upgrade)';
	END IF;

	RETURN fullver;
END
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_full_version"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_full_version"() IS 'Reports full postgis version and build configuration infos.';

-- ----------------------------
--  Function structure for public.box2d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2d"("public"."geometry");
CREATE FUNCTION "public"."box2d"(IN "public"."geometry") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','LWGEOM_to_BOX2D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2d"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."box2d"(IN "public"."geometry") IS 'args: geomA - Returns a BOX2D representing the maximum extents of the geometry.';

-- ----------------------------
--  Function structure for public.box3d("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d"("public"."geometry");
CREATE FUNCTION "public"."box3d"(IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.0','LWGEOM_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."box3d"(IN "public"."geometry") IS 'args: geomA - Returns a BOX3D representing the maximum extents of the geometry.';

-- ----------------------------
--  Function structure for public.box("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box"("public"."geometry");
CREATE FUNCTION "public"."box"(IN "public"."geometry") RETURNS "box" 
	AS '$libdir/postgis-2.0','LWGEOM_to_BOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box2d("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box2d"("public"."box3d");
CREATE FUNCTION "public"."box2d"(IN "public"."box3d") RETURNS "public"."box2d" 
	AS '$libdir/postgis-2.0','BOX3D_to_BOX2D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box2d"(IN "public"."box3d") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box3d("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d"("public"."box2d");
CREATE FUNCTION "public"."box3d"(IN "public"."box2d") RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.0','BOX2D_to_BOX3D'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d"(IN "public"."box2d") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box"("public"."box3d");
CREATE FUNCTION "public"."box"(IN "public"."box3d") RETURNS "box" 
	AS '$libdir/postgis-2.0','BOX3D_to_BOX'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box"(IN "public"."box3d") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.text("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."text"("public"."geometry");
CREATE FUNCTION "public"."text"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_to_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."text"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.box3dtobox("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3dtobox"("public"."box3d");
CREATE FUNCTION "public"."box3dtobox"(IN "public"."box3d") RETURNS "box" 
	AS $BODY$SELECT box($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3dtobox"(IN "public"."box3d") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry("public"."box2d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"("public"."box2d");
CREATE FUNCTION "public"."geometry"(IN "public"."box2d") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','BOX2D_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN "public"."box2d") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry("public"."box3d")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"("public"."box3d");
CREATE FUNCTION "public"."geometry"(IN "public"."box3d") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','BOX3D_to_LWGEOM'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN "public"."box3d") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"(text);
CREATE FUNCTION "public"."geometry"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','parse_WKT_lwgeom'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"(bytea);
CREATE FUNCTION "public"."geometry"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_from_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bytea("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bytea"("public"."geometry");
CREATE FUNCTION "public"."bytea"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-2.0','LWGEOM_to_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."bytea"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_simplify("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_simplify"("public"."geometry", float8);
CREATE FUNCTION "public"."st_simplify"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_simplify2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_simplify"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_simplify"(IN "public"."geometry", IN float8) IS 'args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."geometry", float8, float8, float8, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_snaptogrid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8, IN float8, IN float8) IS 'args: geomA, originX, originY, sizeX, sizeY - Snap all points of the input geometry to a regular grid.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SnapToGrid($1, 0, 0, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8, IN float8) IS 'args: geomA, sizeX, sizeY - Snap all points of the input geometry to a regular grid.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."geometry", float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SnapToGrid($1, 0, 0, $2, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN "public"."geometry", IN float8) IS 'args: geomA, size - Snap all points of the input geometry to a regular grid.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."geometry", "public"."geometry", float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."geometry", "public"."geometry", float8, float8, float8, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8, IN , float8, IN float8, IN , float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_snaptogrid_pointoff'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8, IN , float8, IN float8, IN , float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8, IN , float8, IN float8, IN , float8) IS 'args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.';

-- ----------------------------
--  Function structure for public.st_segmentize("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_segmentize"("public"."geometry", float8);
CREATE FUNCTION "public"."st_segmentize"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_segmentize2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_segmentize"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_segmentize"(IN "public"."geometry", IN float8) IS 'args: geomA, max_length - Return a modified geometry having no segment longer than the given distance. Distance computation is performed in 2d only.';

-- ----------------------------
--  Function structure for public.st_line_interpolate_point("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_line_interpolate_point"("public"."geometry", float8);
CREATE FUNCTION "public"."st_line_interpolate_point"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_line_interpolate_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_line_interpolate_point"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_line_interpolate_point"(IN "public"."geometry", IN float8) IS 'args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.';

-- ----------------------------
--  Function structure for public.st_line_substring("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_line_substring"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_line_substring"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_line_substring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_line_substring"(IN "public"."geometry", IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_line_substring"(IN "public"."geometry", IN float8, IN float8) IS 'args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.';

-- ----------------------------
--  Function structure for public.st_line_locate_point("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_line_locate_point"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_line_locate_point"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_line_locate_point'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_line_locate_point"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_line_locate_point"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.';

-- ----------------------------
--  Function structure for public.st_locate_between_measures("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locate_between_measures"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_locate_between_measures"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_locate_between_m'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locate_between_measures"(IN "public"."geometry", IN float8, IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_locate_along_measure("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locate_along_measure"("public"."geometry", float8);
CREATE FUNCTION "public"."st_locate_along_measure"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_locate_between_measures($1, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locate_along_measure"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_addmeasure("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addmeasure"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_addmeasure"(IN "public"."geometry", IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_AddMeasure'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addmeasure"(IN "public"."geometry", IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_addmeasure"(IN "public"."geometry", IN float8, IN float8) IS 'args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points. If the geometry has no measure dimension, one is added. If the geometry has a measure dimension, it is over-written with new values. Only LINESTRINGS and MULTILINESTRINGS are supported.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_intersection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','intersection'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.';

-- ----------------------------
--  Function structure for public.st_buffer("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"("public"."geometry", float8);
CREATE FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','buffer'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8) IS 'args: g1, radius_of_buffer - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';

-- ----------------------------
--  Function structure for public._st_buffer("public"."geometry", float8, cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_buffer"("public"."geometry", float8, cstring);
CREATE FUNCTION "public"."_st_buffer"(IN "public"."geometry", IN float8, IN cstring) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','buffer'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_buffer"(IN "public"."geometry", IN float8, IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_buffer("public"."geometry", float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"("public"."geometry", float8, int4);
CREATE FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN int4) RETURNS "public"."geometry" 
	AS $BODY$ SELECT _ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))
	   $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN int4) IS 'args: g1, radius_of_buffer, num_seg_quarter_circle - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';

-- ----------------------------
--  Function structure for public.st_buffer("public"."geometry", float8, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"("public"."geometry", float8, text);
CREATE FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN text) RETURNS "public"."geometry" 
	AS $BODY$ SELECT _ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)
	   $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_buffer"(IN "public"."geometry", IN float8, IN text) IS 'args: g1, radius_of_buffer, buffer_style_parameters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';

-- ----------------------------
--  Function structure for public.st_offsetcurve("public"."geometry", float8, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_offsetcurve"("public"."geometry", float8, text);
CREATE FUNCTION "public"."st_offsetcurve"(IN line "public"."geometry", IN distance float8, IN params text DEFAULT ''::text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_OffsetCurve'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_offsetcurve"(IN line "public"."geometry", IN distance float8, IN params text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_offsetcurve"(IN line "public"."geometry", IN distance float8, IN params text) IS 'args: line, signed_distance, style_parameters='' - Return an offset line at a given distance and side from an input line. Useful for computing parallel lines about a center line';

-- ----------------------------
--  Function structure for public.st_convexhull("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_convexhull"("public"."geometry");
CREATE FUNCTION "public"."st_convexhull"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','convexhull'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_convexhull"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_convexhull"(IN "public"."geometry") IS 'args: geomA - The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.';

-- ----------------------------
--  Function structure for public._st_linecrossingdirection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_linecrossingdirection"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','ST_LineCrossingDirection'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_linecrossingdirection("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linecrossingdirection"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "int4" 
	AS $BODY$ SELECT CASE WHEN NOT $1 && $2 THEN 0 ELSE _ST_LineCrossingDirection($1,$2) END $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linecrossingdirection"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.';

-- ----------------------------
--  Function structure for public.st_simplifypreservetopology("public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_simplifypreservetopology"("public"."geometry", float8);
CREATE FUNCTION "public"."st_simplifypreservetopology"(IN "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','topologypreservesimplify'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_simplifypreservetopology"(IN "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_simplifypreservetopology"(IN "public"."geometry", IN float8) IS 'args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.';

-- ----------------------------
--  Function structure for public.st_isvalidreason("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvalidreason"("public"."geometry");
CREATE FUNCTION "public"."st_isvalidreason"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','isvalidreason'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvalidreason"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isvalidreason"(IN "public"."geometry") IS 'args: geomA - Returns text stating if a geometry is valid or not and if not valid, a reason why.';

-- ----------------------------
--  Function structure for public.st_isvaliddetail("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvaliddetail"("public"."geometry");
CREATE FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry") RETURNS "public"."valid_detail" 
	AS '$libdir/postgis-2.0','isvaliddetail'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry") IS 'args: geom - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.';

-- ----------------------------
--  Function structure for public.st_isvaliddetail("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvaliddetail"("public"."geometry", int4);
CREATE FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry", IN int4) RETURNS "public"."valid_detail" 
	AS '$libdir/postgis-2.0','isvaliddetail'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isvaliddetail"(IN "public"."geometry", IN int4) IS 'args: geom, flags - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.';

-- ----------------------------
--  Function structure for public.st_isvalidreason("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvalidreason"("public"."geometry", int4);
CREATE FUNCTION "public"."st_isvalidreason"(IN "public"."geometry", IN int4) RETURNS "text" 
	AS $BODY$
SELECT CASE WHEN valid THEN 'Valid Geometry' ELSE reason END FROM (
	SELECT (ST_isValidDetail($1, $2)).*
) foo
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvalidreason"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isvalidreason"(IN "public"."geometry", IN int4) IS 'args: geomA, flags - Returns text stating if a geometry is valid or not and if not valid, a reason why.';

-- ----------------------------
--  Function structure for public.st_isvalid("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvalid"("public"."geometry", int4);
CREATE FUNCTION "public"."st_isvalid"(IN "public"."geometry", IN int4) RETURNS "bool" 
	AS $BODY$SELECT (ST_isValidDetail($1, $2)).valid$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvalid"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isvalid"(IN "public"."geometry", IN int4) IS 'args: g, flags - Returns true if the ST_Geometry is well formed.';

-- ----------------------------
--  Function structure for public.st_hausdorffdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hausdorffdistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','hausdorffdistance'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.';

-- ----------------------------
--  Function structure for public.st_hausdorffdistance("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hausdorffdistance"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "float8" 
	AS '$libdir/postgis-2.0','hausdorffdistancedensify'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_hausdorffdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.';

-- ----------------------------
--  Function structure for public.st_difference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_difference"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_difference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','difference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_difference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_difference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.';

-- ----------------------------
--  Function structure for public.st_boundary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_boundary"("public"."geometry");
CREATE FUNCTION "public"."st_boundary"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','boundary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_boundary"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_boundary"(IN "public"."geometry") IS 'args: geomA - Returns the closure of the combinatorial boundary of this Geometry.';

-- ----------------------------
--  Function structure for public.st_symdifference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_symdifference"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_symdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','symdifference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_symdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_symdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).';

-- ----------------------------
--  Function structure for public.st_symmetricdifference("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_symmetricdifference"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_symmetricdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','symdifference'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_symmetricdifference"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_union("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_union"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_union"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','geomunion'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_union"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_union"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns a geometry that represents the point set union of the Geometries.';

-- ----------------------------
--  Function structure for public.st_unaryunion("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_unaryunion"("public"."geometry");
CREATE FUNCTION "public"."st_unaryunion"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_UnaryUnion'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_unaryunion"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_unaryunion"(IN "public"."geometry") IS 'args: geom - Like ST_Union, but working at the geometry component level.';

-- ----------------------------
--  Function structure for public.st_removerepeatedpoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_removerepeatedpoints"("public"."geometry");
CREATE FUNCTION "public"."st_removerepeatedpoints"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_RemoveRepeatedPoints'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_removerepeatedpoints"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_removerepeatedpoints"(IN "public"."geometry") IS 'args: geom - Returns a version of the given geometry with duplicated points removed.';

-- ----------------------------
--  Function structure for public.st_makevalid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makevalid"("public"."geometry");
CREATE FUNCTION "public"."st_makevalid"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_MakeValid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makevalid"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makevalid"(IN "public"."geometry") IS 'args: input - Attempts to make an invalid geometry valid w/out loosing vertices.';

-- ----------------------------
--  Function structure for public.st_cleangeometry("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_cleangeometry"("public"."geometry");
CREATE FUNCTION "public"."st_cleangeometry"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_CleanGeometry'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_cleangeometry"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_split("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_split"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_split"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_Split'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_split"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_split"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: input, blade - Returns a collection of geometries resulting by splitting a geometry.';

-- ----------------------------
--  Function structure for public.st_sharedpaths("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_sharedpaths"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_sharedpaths"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_SharedPaths'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_sharedpaths"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_sharedpaths"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.';

-- ----------------------------
--  Function structure for public.st_snap("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snap"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_snap"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_Snap'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_snap"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_snap"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.';

-- ----------------------------
--  Function structure for public.st_relatematch(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_relatematch"(text, text);
CREATE FUNCTION "public"."st_relatematch"(IN text, IN text) RETURNS "bool" 
	AS '$libdir/postgis-2.0','ST_RelateMatch'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_relatematch"(IN text, IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_relatematch"(IN text, IN text) IS 'args: intersectionMatrix, intersectionMatrixPattern - Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2';

-- ----------------------------
--  Function structure for public.st_node("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_node"("public"."geometry");
CREATE FUNCTION "public"."st_node"(IN "g" "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_Node'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_node"(IN "g" "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_node"(IN "g" "public"."geometry") IS 'args: geom - Node a set of linestrings.';

-- ----------------------------
--  Function structure for public.st_combine_bbox("public"."box3d", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_combine_bbox"("public"."box3d", "public"."geometry");
CREATE FUNCTION "public"."st_combine_bbox"(IN "public"."box3d", IN "public"."geometry") RETURNS "public"."box3d" 
	AS '$libdir/postgis-2.0','BOX3D_combine'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_combine_bbox"(IN "public"."box3d", IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_collect("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_collect"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_collect"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_collect'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_collect"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_collect"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Return a specified ST_Geometry value from a collection of other geometries.';

-- ----------------------------
--  Function structure for public.st_collect("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_collect"("public"."_geometry");
CREATE FUNCTION "public"."st_collect"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_collect_garray'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_collect"(IN "public"."_geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_collect"(IN "public"."_geometry") IS 'args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.';

-- ----------------------------
--  Function structure for public.pgis_abs_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_abs_in"(cstring);
CREATE FUNCTION "public"."pgis_abs_in"(IN cstring) RETURNS "public"."pgis_abs" 
	AS '$libdir/postgis-2.0','pgis_abs_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."pgis_abs_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pgis_abs_out("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_abs_out"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_abs_out"(IN "public"."pgis_abs") RETURNS "cstring" 
	AS '$libdir/postgis-2.0','pgis_abs_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."pgis_abs_out"(IN "public"."pgis_abs") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pgis_geometry_accum_transfn("public"."pgis_abs", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_accum_transfn"("public"."pgis_abs", "public"."geometry");
CREATE FUNCTION "public"."pgis_geometry_accum_transfn"(IN "public"."pgis_abs", IN "public"."geometry") RETURNS "public"."pgis_abs" 
	AS '$libdir/postgis-2.0','pgis_geometry_accum_transfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_accum_transfn"(IN "public"."pgis_abs", IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pgis_geometry_accum_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_accum_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_accum_finalfn"(IN "public"."pgis_abs") RETURNS "public"."_geometry" 
	AS '$libdir/postgis-2.0','pgis_geometry_accum_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_accum_finalfn"(IN "public"."pgis_abs") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pgis_geometry_union_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_union_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_union_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','pgis_geometry_union_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_union_finalfn"(IN "public"."pgis_abs") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pgis_geometry_collect_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_collect_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_collect_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','pgis_geometry_collect_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_collect_finalfn"(IN "public"."pgis_abs") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pgis_geometry_polygonize_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_polygonize_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_polygonize_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','pgis_geometry_polygonize_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_polygonize_finalfn"(IN "public"."pgis_abs") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pgis_geometry_makeline_finalfn("public"."pgis_abs")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgis_geometry_makeline_finalfn"("public"."pgis_abs");
CREATE FUNCTION "public"."pgis_geometry_makeline_finalfn"(IN "public"."pgis_abs") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','pgis_geometry_makeline_finalfn'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pgis_geometry_makeline_finalfn"(IN "public"."pgis_abs") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_union("public"."_geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_union"("public"."_geometry");
CREATE FUNCTION "public"."st_union"(IN "public"."_geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','pgis_union_geometry_array'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_union"(IN "public"."_geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_union"(IN "public"."_geometry") IS 'args: g1_array - Returns a geometry that represents the point set union of the Geometries.';

-- ----------------------------
--  Function structure for public.st_relate("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_relate"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','relate_full'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';

-- ----------------------------
--  Function structure for public.st_relate("public"."geometry", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_relate"("public"."geometry", "public"."geometry", int4);
CREATE FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) RETURNS "text" 
	AS '$libdir/postgis-2.0','relate_full'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN int4) IS 'args: geomA, geomB, BoundaryNodeRule - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';

-- ----------------------------
--  Function structure for public.st_relate("public"."geometry", "public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_relate"("public"."geometry", "public"."geometry", text);
CREATE FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN text) RETURNS "bool" 
	AS '$libdir/postgis-2.0','relate_pattern'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_relate"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN text) IS 'args: geomA, geomB, intersectionMatrixPattern - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';

-- ----------------------------
--  Function structure for public.st_disjoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_disjoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_disjoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','disjoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_disjoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_disjoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: A, B - Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.';

-- ----------------------------
--  Function structure for public._st_touches("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_touches"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','touches'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_touches("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_touches"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Touches($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_touches"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.';

-- ----------------------------
--  Function structure for public._st_dwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dwithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."_st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_dwithin'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_dwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, distance_of_srid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';

-- ----------------------------
--  Function structure for public._st_intersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_intersects"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','intersects'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Intersects($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)';

-- ----------------------------
--  Function structure for public._st_crosses("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_crosses"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','crosses'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_crosses("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_crosses"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Crosses($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_crosses"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.';

-- ----------------------------
--  Function structure for public._st_contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_contains"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','contains'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_contains("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_contains"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Contains($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_contains"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.';

-- ----------------------------
--  Function structure for public._st_coveredby("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_coveredby"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','coveredby'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_coveredby("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coveredby"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_CoveredBy($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_coveredby"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B';

-- ----------------------------
--  Function structure for public._st_covers("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_covers"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','covers'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_covers("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_covers"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_covers"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A';

-- ----------------------------
--  Function structure for public._st_containsproperly("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_containsproperly"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','containsproperly'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_containsproperly("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_containsproperly"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_ContainsProperly($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_containsproperly"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.';

-- ----------------------------
--  Function structure for public._st_overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_overlaps"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','overlaps'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_within"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT _ST_Contains($2,$1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_within("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_within"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Contains($2,$1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_within"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: A, B - Returns true if the geometry A is completely inside geometry B';

-- ----------------------------
--  Function structure for public.st_overlaps("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_overlaps"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Overlaps($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_overlaps"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: A, B - Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.';

-- ----------------------------
--  Function structure for public.st_isvalid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isvalid"("public"."geometry");
CREATE FUNCTION "public"."st_isvalid"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','isvalid'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isvalid"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isvalid"(IN "public"."geometry") IS 'args: g - Returns true if the ST_Geometry is well formed.';

-- ----------------------------
--  Function structure for public.st_centroid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_centroid"("public"."geometry");
CREATE FUNCTION "public"."st_centroid"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','centroid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_centroid"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_centroid"(IN "public"."geometry") IS 'args: g1 - Returns the geometric center of a geometry.';

-- ----------------------------
--  Function structure for public.st_isring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isring"("public"."geometry");
CREATE FUNCTION "public"."st_isring"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','isring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isring"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isring"(IN "public"."geometry") IS 'args: g - Returns TRUE if this LINESTRING is both closed and simple.';

-- ----------------------------
--  Function structure for public.st_pointonsurface("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointonsurface"("public"."geometry");
CREATE FUNCTION "public"."st_pointonsurface"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','pointonsurface'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointonsurface"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_pointonsurface"(IN "public"."geometry") IS 'args: g1 - Returns a POINT guaranteed to lie on the surface.';

-- ----------------------------
--  Function structure for public.st_issimple("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_issimple"("public"."geometry");
CREATE FUNCTION "public"."st_issimple"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','issimple'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_issimple"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_issimple"(IN "public"."geometry") IS 'args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.';

-- ----------------------------
--  Function structure for public.st_iscollection("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_iscollection"("public"."geometry");
CREATE FUNCTION "public"."st_iscollection"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','ST_IsCollection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_iscollection"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_iscollection"(IN "public"."geometry") IS 'args: g - Returns TRUE if the argument is a collection (MULTI*, GEOMETRYCOLLECTION, ...)';

-- ----------------------------
--  Function structure for public._st_equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_equals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','ST_Equals'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_equals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 ~= $2 AND _ST_Equals($1,$2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.';

-- ----------------------------
--  Function structure for public.equals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."equals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','ST_Equals'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."equals"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_geomfromgml(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_geomfromgml"(text, int4);
CREATE FUNCTION "public"."_st_geomfromgml"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','geom_from_gml'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_geomfromgml"(IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_geomfromgml(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromgml"(text, int4);
CREATE FUNCTION "public"."st_geomfromgml"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','geom_from_gml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromgml"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromgml"(IN text, IN int4) IS 'args: geomgml, srid - Takes as input GML representation of geometry and outputs a PostGIS geometry object';

-- ----------------------------
--  Function structure for public.st_geomfromgml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromgml"(text);
CREATE FUNCTION "public"."st_geomfromgml"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT _ST_GeomFromGML($1, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromgml"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromgml"(IN text) IS 'args: geomgml - Takes as input GML representation of geometry and outputs a PostGIS geometry object';

-- ----------------------------
--  Function structure for public.st_gmltosql(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_gmltosql"(text);
CREATE FUNCTION "public"."st_gmltosql"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT _ST_GeomFromGML($1, 0)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_gmltosql"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_gmltosql"(IN text) IS 'args: geomgml - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML';

-- ----------------------------
--  Function structure for public.st_gmltosql(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_gmltosql"(text, int4);
CREATE FUNCTION "public"."st_gmltosql"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','geom_from_gml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_gmltosql"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_gmltosql"(IN text, IN int4) IS 'args: geomgml, srid - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML';

-- ----------------------------
--  Function structure for public.st_geomfromkml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromkml"(text);
CREATE FUNCTION "public"."st_geomfromkml"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','geom_from_kml'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromkml"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromkml"(IN text) IS 'args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object';

-- ----------------------------
--  Function structure for public.st_geomfromgeojson(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromgeojson"(text);
CREATE FUNCTION "public"."st_geomfromgeojson"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','geom_from_geojson'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromgeojson"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromgeojson"(IN text) IS 'args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object';

-- ----------------------------
--  Function structure for public.postgis_libjson_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_libjson_version"();
CREATE FUNCTION "public"."postgis_libjson_version"() RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_libjson_version'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_libjson_version"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_assvg("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_assvg"("public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_assvg"(IN geom "public"."geometry", IN rel int4 DEFAULT 0, IN maxdecimaldigits int4 DEFAULT 15) RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asSVG'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_assvg"(IN geom "public"."geometry", IN rel int4, IN maxdecimaldigits int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_assvg"(IN geom "public"."geometry", IN rel int4, IN maxdecimaldigits int4) IS 'args: geom, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.';

-- ----------------------------
--  Function structure for public._st_asgml(int4, "public"."geometry", int4, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asgml"(int4, "public"."geometry", int4, int4, text);
CREATE FUNCTION "public"."_st_asgml"(IN int4, IN "public"."geometry", IN int4, IN int4, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asGML'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asgml"(IN int4, IN "public"."geometry", IN int4, IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asgml("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"("public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_asgml"(IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGML(2, $1, $2, $3, null); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgml"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) IS 'args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.';

-- ----------------------------
--  Function structure for public.st_asgml(int4, "public"."geometry", int4, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"(int4, "public"."geometry", int4, int4, text);
CREATE FUNCTION "public"."st_asgml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0, IN nprefix text DEFAULT NULL::text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGML($1, $2, $3, $4,$5); $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4, IN nprefix text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4, IN nprefix text) IS 'args: version, geom, maxdecimaldigits=15, options=0, nprefix=null - Return the geometry as a GML version 2 or 3 element.';

-- ----------------------------
--  Function structure for public._st_askml(int4, "public"."geometry", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_askml"(int4, "public"."geometry", int4, text);
CREATE FUNCTION "public"."_st_askml"(IN int4, IN "public"."geometry", IN int4, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asKML'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_askml"(IN int4, IN "public"."geometry", IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_askml("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"("public"."geometry", int4);
CREATE FUNCTION "public"."st_askml"(IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsKML(2, ST_Transform($1,4326), $2, null); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN geom "public"."geometry", IN maxdecimaldigits int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_askml"(IN geom "public"."geometry", IN maxdecimaldigits int4) IS 'args: geom, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';

-- ----------------------------
--  Function structure for public.type_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."type_owner_is"(name, name, text);
CREATE FUNCTION "public"."type_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_type_owner($1);
BEGIN
    -- Make sure the type exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Type ' || quote_ident($1) || ' not found'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."type_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_askml(int4, "public"."geometry", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"(int4, "public"."geometry", int4, text);
CREATE FUNCTION "public"."st_askml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN nprefix text DEFAULT NULL::text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsKML($1, ST_Transform($2,4326), $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN nprefix text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_askml"(IN "version" int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN nprefix text) IS 'args: version, geom, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';

-- ----------------------------
--  Function structure for public._st_asgeojson(int4, "public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asgeojson"(int4, "public"."geometry", int4, int4);
CREATE FUNCTION "public"."_st_asgeojson"(IN int4, IN "public"."geometry", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asGeoJson'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asgeojson"(IN int4, IN "public"."geometry", IN int4, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asgeojson("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"("public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_asgeojson"(IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson(1, $1, $2, $3); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgeojson"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) IS 'args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.';

-- ----------------------------
--  Function structure for public.st_asgeojson(int4, "public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"(int4, "public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson($1, $2, $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) IS 'args: gj_version, geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.';

-- ----------------------------
--  Function structure for public.st_geohash("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geohash"("public"."geometry", int4);
CREATE FUNCTION "public"."st_geohash"(IN geom "public"."geometry", IN maxchars int4 DEFAULT 0) RETURNS "text" 
	AS '$libdir/postgis-2.0','ST_GeoHash'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geohash"(IN geom "public"."geometry", IN maxchars int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geohash"(IN geom "public"."geometry", IN maxchars int4) IS 'args: geom, maxchars=full_precision_of_point - Return a GeoHash representation (geohash.org) of the geometry.';

-- ----------------------------
--  Function structure for public.st_numpoints("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numpoints"("public"."geometry");
CREATE FUNCTION "public"."st_numpoints"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_numpoints_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numpoints"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_numpoints"(IN "public"."geometry") IS 'args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.';

-- ----------------------------
--  Function structure for public.st_numgeometries("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numgeometries"("public"."geometry");
CREATE FUNCTION "public"."st_numgeometries"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_numgeometries_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numgeometries"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_numgeometries"(IN "public"."geometry") IS 'args: geom - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, for single geometries will return 1, otherwise return NULL.';

-- ----------------------------
--  Function structure for public.st_geometryn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geometryn"("public"."geometry", int4);
CREATE FUNCTION "public"."st_geometryn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_geometryn_collection'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geometryn"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geometryn"(IN "public"."geometry", IN int4) IS 'args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE or (MULTI)POLYGON, POLYHEDRALSURFACE Otherwise, return NULL.';

-- ----------------------------
--  Function structure for public.st_dimension("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dimension"("public"."geometry");
CREATE FUNCTION "public"."st_dimension"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_dimension'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dimension"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dimension"(IN "public"."geometry") IS 'args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.';

-- ----------------------------
--  Function structure for public.st_exteriorring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_exteriorring"("public"."geometry");
CREATE FUNCTION "public"."st_exteriorring"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_exteriorring_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_exteriorring"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_exteriorring"(IN "public"."geometry") IS 'args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON';

-- ----------------------------
--  Function structure for public.st_numinteriorrings("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numinteriorrings"("public"."geometry");
CREATE FUNCTION "public"."st_numinteriorrings"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_numinteriorrings_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numinteriorrings"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_numinteriorrings"(IN "public"."geometry") IS 'args: a_polygon - Return the number of interior rings of the first polygon in the geometry. This will work with both POLYGON and MULTIPOLYGON types but only looks at the first polygon. Return NULL if there is no polygon in the geometry.';

-- ----------------------------
--  Function structure for public.st_numinteriorring("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numinteriorring"("public"."geometry");
CREATE FUNCTION "public"."st_numinteriorring"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_numinteriorrings_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numinteriorring"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_numinteriorring"(IN "public"."geometry") IS 'args: a_polygon - Return the number of interior rings of the first polygon in the geometry. Synonym to ST_NumInteriorRings.';

-- ----------------------------
--  Function structure for public.st_interiorringn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_interiorringn"("public"."geometry", int4);
CREATE FUNCTION "public"."st_interiorringn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_interiorringn_polygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_interiorringn"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_interiorringn"(IN "public"."geometry", IN int4) IS 'args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.';

-- ----------------------------
--  Function structure for public.geometrytype("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometrytype"("public"."geometry");
CREATE FUNCTION "public"."geometrytype"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_getTYPE'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometrytype"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."geometrytype"(IN "public"."geometry") IS 'args: geomA - Returns the type of the geometry as a string. Eg: LINESTRING, POLYGON, MULTIPOINT, etc.';

-- ----------------------------
--  Function structure for public.st_geometrytype("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geometrytype"("public"."geometry");
CREATE FUNCTION "public"."st_geometrytype"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','geometry_geometrytype'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geometrytype"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geometrytype"(IN "public"."geometry") IS 'args: g1 - Return the geometry type of the ST_Geometry value.';

-- ----------------------------
--  Function structure for public.st_pointn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointn"("public"."geometry", int4);
CREATE FUNCTION "public"."st_pointn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_pointn_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointn"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_pointn"(IN "public"."geometry", IN int4) IS 'args: a_linestring, n - Return the Nth point in the first linestring or circular linestring in the geometry. Return NULL if there is no linestring in the geometry.';

-- ----------------------------
--  Function structure for public.st_numpatches("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numpatches"("public"."geometry");
CREATE FUNCTION "public"."st_numpatches"(IN "public"."geometry") RETURNS "int4" 
	AS $BODY$
	SELECT CASE WHEN ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN ST_NumGeometries($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numpatches"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_numpatches"(IN "public"."geometry") IS 'args: g1 - Return the number of faces on a Polyhedral Surface. Will return null for non-polyhedral geometries.';

-- ----------------------------
--  Function structure for public.st_patchn("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_patchn"("public"."geometry", int4);
CREATE FUNCTION "public"."st_patchn"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN ST_GeometryN($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_patchn"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_patchn"(IN "public"."geometry", IN int4) IS 'args: geomA, n - Return the 1-based Nth geometry (face) if the geometry is a POLYHEDRALSURFACE, POLYHEDRALSURFACEM. Otherwise, return NULL.';

-- ----------------------------
--  Function structure for public.st_startpoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_startpoint"("public"."geometry");
CREATE FUNCTION "public"."st_startpoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_startpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_startpoint"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_startpoint"(IN "public"."geometry") IS 'args: geomA - Returns the first point of a LINESTRING geometry as a POINT.';

-- ----------------------------
--  Function structure for public.st_endpoint("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_endpoint"("public"."geometry");
CREATE FUNCTION "public"."st_endpoint"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_endpoint_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_endpoint"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_endpoint"(IN "public"."geometry") IS 'args: g - Returns the last point of a LINESTRING geometry as a POINT.';

-- ----------------------------
--  Function structure for public.st_isclosed("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isclosed"("public"."geometry");
CREATE FUNCTION "public"."st_isclosed"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_isclosed'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isclosed"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isclosed"(IN "public"."geometry") IS 'args: g - Returns TRUE if the LINESTRINGs start and end points are coincident. For Polyhedral surface is closed (volumetric).';

-- ----------------------------
--  Function structure for public.st_isempty("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isempty"("public"."geometry");
CREATE FUNCTION "public"."st_isempty"(IN "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_isempty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isempty"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isempty"(IN "public"."geometry") IS 'args: geomA - Returns true if this Geometry is an empty geometrycollection, polygon, point etc.';

-- ----------------------------
--  Function structure for public.st_srid("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_srid"("public"."geometry");
CREATE FUNCTION "public"."st_srid"(IN "public"."geometry") RETURNS "int4" 
	AS '$libdir/postgis-2.0','LWGEOM_get_srid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_srid"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_srid"(IN "public"."geometry") IS 'args: g1 - Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.';

-- ----------------------------
--  Function structure for public.st_setsrid("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setsrid"("public"."geometry", int4);
CREATE FUNCTION "public"."st_setsrid"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_set_srid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setsrid"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setsrid"(IN "public"."geometry", IN int4) IS 'args: geom, srid - Sets the SRID on a geometry to a particular integer value.';

-- ----------------------------
--  Function structure for public.st_asbinary("public"."geometry", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."geometry", text);
CREATE FUNCTION "public"."st_asbinary"(IN "public"."geometry", IN text) RETURNS "bytea" 
	AS '$libdir/postgis-2.0','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."geometry", IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."geometry", IN text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asbinary("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."geometry");
CREATE FUNCTION "public"."st_asbinary"(IN "public"."geometry") RETURNS "bytea" 
	AS '$libdir/postgis-2.0','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."geometry") IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';

-- ----------------------------
--  Function structure for public.st_astext("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astext"("public"."geometry");
CREATE FUNCTION "public"."st_astext"(IN "public"."geometry") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asText'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astext"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_astext"(IN "public"."geometry") IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.';

-- ----------------------------
--  Function structure for public.st_geometryfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geometryfromtext"(text);
CREATE FUNCTION "public"."st_geometryfromtext"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geometryfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geometryfromtext"(IN text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';

-- ----------------------------
--  Function structure for public.st_geometryfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geometryfromtext"(text, int4);
CREATE FUNCTION "public"."st_geometryfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geometryfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geometryfromtext"(IN text, IN int4) IS 'args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';

-- ----------------------------
--  Function structure for public.st_geomfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromtext"(text);
CREATE FUNCTION "public"."st_geomfromtext"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromtext"(IN text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT).';

-- ----------------------------
--  Function structure for public.st_geomfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromtext"(text, int4);
CREATE FUNCTION "public"."st_geomfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromtext"(IN text, IN int4) IS 'args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).';

-- ----------------------------
--  Function structure for public.st_wkttosql(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_wkttosql"(text);
CREATE FUNCTION "public"."st_wkttosql"(IN text) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_wkttosql"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_wkttosql"(IN text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';

-- ----------------------------
--  Function structure for public.st_pointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromtext"(text);
CREATE FUNCTION "public"."st_pointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_pointfromtext"(IN text) IS 'args: WKT - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.';

-- ----------------------------
--  Function structure for public.st_pointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromtext"(text, int4);
CREATE FUNCTION "public"."st_pointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_pointfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.';

-- ----------------------------
--  Function structure for public.st_linefromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefromtext"(text);
CREATE FUNCTION "public"."st_linefromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'LINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linefromtext"(IN text) IS 'args: WKT - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_linefromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefromtext"(text, int4);
CREATE FUNCTION "public"."st_linefromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linefromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_polyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polyfromtext"(text);
CREATE FUNCTION "public"."st_polyfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polyfromtext"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_polyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polyfromtext"(text, int4);
CREATE FUNCTION "public"."st_polyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polyfromtext"(IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_polygonfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonfromtext"(text, int4);
CREATE FUNCTION "public"."st_polygonfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_PolyFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_polygonfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_polygonfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonfromtext"(text);
CREATE FUNCTION "public"."st_polygonfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_PolyFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_polygonfromtext"(IN text) IS 'args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_mlinefromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mlinefromtext"(text, int4);
CREATE FUNCTION "public"."st_mlinefromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mlinefromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mlinefromtext"(IN text, IN int4) IS 'args: WKT, srid - Return a specified ST_MultiLineString value from WKT representation.';

-- ----------------------------
--  Function structure for public.st_mlinefromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mlinefromtext"(text);
CREATE FUNCTION "public"."st_mlinefromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mlinefromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mlinefromtext"(IN text) IS 'args: WKT - Return a specified ST_MultiLineString value from WKT representation.';

-- ----------------------------
--  Function structure for public.st_multilinestringfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multilinestringfromtext"(text);
CREATE FUNCTION "public"."st_multilinestringfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MLineFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multilinestringfromtext"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_multilinestringfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multilinestringfromtext"(text, int4);
CREATE FUNCTION "public"."st_multilinestringfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MLineFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multilinestringfromtext"(IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_mpointfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpointfromtext"(text, int4);
CREATE FUNCTION "public"."st_mpointfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpointfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mpointfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_mpointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpointfromtext"(text);
CREATE FUNCTION "public"."st_mpointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpointfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mpointfromtext"(IN text) IS 'args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_multipointfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipointfromtext"(text);
CREATE FUNCTION "public"."st_multipointfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MPointFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipointfromtext"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_mpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpolyfromtext"(text, int4);
CREATE FUNCTION "public"."st_mpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpolyfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mpolyfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_mpolyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpolyfromtext"(text);
CREATE FUNCTION "public"."st_mpolyfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpolyfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mpolyfromtext"(IN text) IS 'args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_multipolygonfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipolygonfromtext"(text, int4);
CREATE FUNCTION "public"."st_multipolygonfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MPolyFromText($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipolygonfromtext"(IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_multipolygonfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipolygonfromtext"(text);
CREATE FUNCTION "public"."st_multipolygonfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_MPolyFromText($1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipolygonfromtext"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_geomcollfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomcollfromtext"(text, int4);
CREATE FUNCTION "public"."st_geomcollfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomcollfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomcollfromtext"(IN text, IN int4) IS 'args: WKT, srid - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_geomcollfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomcollfromtext"(text);
CREATE FUNCTION "public"."st_geomcollfromtext"(IN text) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomcollfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomcollfromtext"(IN text) IS 'args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.';

-- ----------------------------
--  Function structure for public.st_geomfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromwkb"(bytea);
CREATE FUNCTION "public"."st_geomfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_from_WKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromwkb"(IN bytea) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromwkb"(IN bytea) IS 'args: geom - Makes a geometry from WKB with the given SRID';

-- ----------------------------
--  Function structure for public.st_geomfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_geomfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_SetSRID(ST_GeomFromWKB($1), $2)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geomfromwkb"(IN bytea, IN int4) IS 'args: geom, srid - Makes a geometry from WKB with the given SRID';

-- ----------------------------
--  Function structure for public.st_pointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_pointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_pointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pointfromwkb"(bytea);
CREATE FUNCTION "public"."st_pointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pointfromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_linefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_linefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linefromwkb"(IN bytea, IN int4) IS 'args: WKB, srid - Makes a LINESTRING from WKB with the given SRID';

-- ----------------------------
--  Function structure for public.st_linefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linefromwkb"(bytea);
CREATE FUNCTION "public"."st_linefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linefromwkb"(IN bytea) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linefromwkb"(IN bytea) IS 'args: WKB - Makes a LINESTRING from WKB with the given SRID';

-- ----------------------------
--  Function structure for public.st_linestringfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linestringfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_linestringfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linestringfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linestringfromwkb"(IN bytea, IN int4) IS 'args: WKB, srid - Makes a geometry from WKB with the given SRID.';

-- ----------------------------
--  Function structure for public.st_linestringfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linestringfromwkb"(bytea);
CREATE FUNCTION "public"."st_linestringfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linestringfromwkb"(IN bytea) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linestringfromwkb"(IN bytea) IS 'args: WKB - Makes a geometry from WKB with the given SRID.';

-- ----------------------------
--  Function structure for public.st_polyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polyfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_polyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polyfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_polyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polyfromwkb"(bytea);
CREATE FUNCTION "public"."st_polyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polyfromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_polygonfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_polygonfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_polygonfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygonfromwkb"(bytea);
CREATE FUNCTION "public"."st_polygonfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygonfromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_mpointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpointfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_mpointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpointfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_mpointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpointfromwkb"(bytea);
CREATE FUNCTION "public"."st_mpointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpointfromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_multipointfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipointfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_multipointfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipointfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_multipointfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipointfromwkb"(bytea);
CREATE FUNCTION "public"."st_multipointfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipointfromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_multilinefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multilinefromwkb"(bytea);
CREATE FUNCTION "public"."st_multilinefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multilinefromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_mlinefromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mlinefromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_mlinefromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mlinefromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_mlinefromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mlinefromwkb"(bytea);
CREATE FUNCTION "public"."st_mlinefromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mlinefromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_mpolyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpolyfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_mpolyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpolyfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_mpolyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mpolyfromwkb"(bytea);
CREATE FUNCTION "public"."st_mpolyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mpolyfromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_multipolyfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipolyfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_multipolyfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipolyfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_multipolyfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_multipolyfromwkb"(bytea);
CREATE FUNCTION "public"."st_multipolyfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_multipolyfromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_geomcollfromwkb(bytea, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomcollfromwkb"(bytea, int4);
CREATE FUNCTION "public"."st_geomcollfromwkb"(IN bytea, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomcollfromwkb"(IN bytea, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_geomcollfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geomcollfromwkb"(bytea);
CREATE FUNCTION "public"."st_geomcollfromwkb"(IN bytea) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geomcollfromwkb"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_maxdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_maxdistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_maxdistance2d_linestring'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_maxdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_maxdistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS $BODY$SELECT _ST_MaxDistance(ST_ConvexHull($1), ST_ConvexHull($2))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_maxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.';

-- ----------------------------
--  Function structure for public.st_closestpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_closestpoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_closestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_closestpoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_closestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_closestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.';

-- ----------------------------
--  Function structure for public.st_shortestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_shortestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_shortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_shortestline2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_shortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_shortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 2-dimensional shortest line between two geometries';

-- ----------------------------
--  Function structure for public._st_longestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_longestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_longestline2d'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_longestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_longestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT _ST_LongestLine(ST_ConvexHull($1), ST_ConvexHull($2))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_longestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.';

-- ----------------------------
--  Function structure for public._st_dfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dfullywithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."_st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_dfullywithin'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_dfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dfullywithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DFullyWithin(ST_ConvexHull($1), ST_ConvexHull($2), $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, distance - Returns true if all of the geometries are within the specified distance of one another';

-- ----------------------------
--  Function structure for public.st_flipcoordinates("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_flipcoordinates"("public"."geometry");
CREATE FUNCTION "public"."st_flipcoordinates"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_FlipCoordinates'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_flipcoordinates"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_flipcoordinates"(IN "public"."geometry") IS 'args: geom - Returns a version of the given geometry with X and Y axis flipped. Useful for people who have built latitude/longitude features and need to fix them.';

-- ----------------------------
--  Function structure for public.st_bdpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bdpolyfromtext"(text, int4);
CREATE FUNCTION "public"."st_bdpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := ST_BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bdpolyfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_bdpolyfromtext"(IN text, IN int4) IS 'args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.';

-- ----------------------------
--  Function structure for public.st_bdmpolyfromtext(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bdmpolyfromtext"(text, int4);
CREATE FUNCTION "public"."st_bdmpolyfromtext"(IN text, IN int4) RETURNS "public"."geometry" 
	AS $BODY$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := ST_Multi(ST_BuildArea(mline));

	RETURN geom;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bdmpolyfromtext"(IN text, IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_bdmpolyfromtext"(IN text, IN int4) IS 'args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.';

-- ----------------------------
--  Function structure for public.unlockrows(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."unlockrows"(text);
CREATE FUNCTION "public"."unlockrows"(IN text) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."unlockrows"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."unlockrows"(IN text) IS 'args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.';

-- ----------------------------
--  Function structure for public.lockrow(text, text, text, text, timestamp)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lockrow"(text, text, text, text, timestamp);
CREATE FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text, IN timestamp) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE 'toid: %', mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text, IN timestamp) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text, IN timestamp) IS 'args: a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table';

-- ----------------------------
--  Function structure for public.lockrow(text, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lockrow"(text, text, text, text);
CREATE FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.lockrow(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lockrow"(text, text, text);
CREATE FUNCTION "public"."lockrow"(IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lockrow"(IN text, IN text, IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."lockrow"(IN text, IN text, IN text) IS 'args: a_table_name, a_row_key, an_auth_token - Set lock/authorization for specific row in table';

-- ----------------------------
--  Function structure for public.lockrow(text, text, text, timestamp)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lockrow"(text, text, text, timestamp);
CREATE FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN timestamp) RETURNS "int4" 
	AS $BODY$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN timestamp) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."lockrow"(IN text, IN text, IN text, IN timestamp) IS 'args: a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table';

-- ----------------------------
--  Function structure for public.addauth(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addauth"(text);
CREATE FUNCTION "public"."addauth"(IN text) RETURNS "bool" 
	AS $BODY$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addauth"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."addauth"(IN text) IS 'args: auth_token - Add an authorization token to be used in current transaction.';

-- ----------------------------
--  Function structure for public.checkauth(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."checkauth"(text, text, text);
CREATE FUNCTION "public"."checkauth"(IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';

	RETURN 0;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."checkauth"(IN text, IN text, IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."checkauth"(IN text, IN text, IN text) IS 'args: a_schema_name, a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.';

-- ----------------------------
--  Function structure for public.checkauth(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."checkauth"(text, text);
CREATE FUNCTION "public"."checkauth"(IN text, IN text) RETURNS "int4" 
	AS $BODY$ SELECT CheckAuth('', $1, $2) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."checkauth"(IN text, IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."checkauth"(IN text, IN text) IS 'args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.';

-- ----------------------------
--  Function structure for public.gettransactionid()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."gettransactionid"();
CREATE FUNCTION "public"."gettransactionid"() RETURNS "xid" 
	AS '$libdir/postgis-2.0','getTransactionID'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."gettransactionid"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enablelongtransactions()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enablelongtransactions"();
CREATE FUNCTION "public"."enablelongtransactions"() RETURNS "text" 
	AS $BODY$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;

BEGIN

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;

	RETURN 'Long transactions support enabled';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enablelongtransactions"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."enablelongtransactions"() IS 'Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.';

-- ----------------------------
--  Function structure for public.longtransactionsenabled()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."longtransactionsenabled"();
CREATE FUNCTION "public"."longtransactionsenabled"() RETURNS "bool" 
	AS $BODY$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."longtransactionsenabled"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.type_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."type_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."type_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_type_owner($1, $2);
BEGIN
    -- Make sure the type exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Type ' || quote_ident($1) || '.' || quote_ident($2) || ' not found'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."type_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.types_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."types_are"(_name);
CREATE FUNCTION "public"."types_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, 'Search path ' || pg_catalog.current_setting('search_path') || ' should have the correct types', NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."types_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.disablelongtransactions()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."disablelongtransactions"();
CREATE FUNCTION "public"."disablelongtransactions"() RETURNS "text" 
	AS $BODY$ 
DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN 'Long transactions support disabled';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."disablelongtransactions"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."disablelongtransactions"() IS 'Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.';

-- ----------------------------
--  Function structure for public.geography_typmod_in(_cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_typmod_in"(_cstring);
CREATE FUNCTION "public"."geography_typmod_in"(IN _cstring) RETURNS "int4" 
	AS '$libdir/postgis-2.0','geography_typmod_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_typmod_in"(IN _cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_typmod_out(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_typmod_out"(int4);
CREATE FUNCTION "public"."geography_typmod_out"(IN int4) RETURNS "cstring" 
	AS '$libdir/postgis-2.0','postgis_typmod_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_typmod_out"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_in(cstring, oid, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_in"(cstring, oid, int4);
CREATE FUNCTION "public"."geography_in"(IN cstring, IN oid, IN int4) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_in"(IN cstring, IN oid, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_out("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_out"("public"."geography");
CREATE FUNCTION "public"."geography_out"(IN "public"."geography") RETURNS "cstring" 
	AS '$libdir/postgis-2.0','geography_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_out"(IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_recv(internal, oid, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_recv"(internal, oid, int4);
CREATE FUNCTION "public"."geography_recv"(IN internal, IN oid, IN int4) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_recv'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_recv"(IN internal, IN oid, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_send("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_send"("public"."geography");
CREATE FUNCTION "public"."geography_send"(IN "public"."geography") RETURNS "bytea" 
	AS '$libdir/postgis-2.0','geography_send'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_send"(IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_analyze(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_analyze"(internal);
CREATE FUNCTION "public"."geography_analyze"(IN internal) RETURNS "bool" 
	AS '$libdir/postgis-2.0','geography_analyze'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_analyze"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography("public"."geography", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography"("public"."geography", int4, bool);
CREATE FUNCTION "public"."geography"(IN "public"."geography", IN int4, IN bool) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_enforce_typmod'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography"(IN "public"."geography", IN int4, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography"(bytea);
CREATE FUNCTION "public"."geography"(IN bytea) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','LWGEOM_from_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography"(IN bytea) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bytea("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bytea"("public"."geography");
CREATE FUNCTION "public"."bytea"(IN "public"."geography") RETURNS "bytea" 
	AS '$libdir/postgis-2.0','LWGEOM_to_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."bytea"(IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_astext("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astext"("public"."geography");
CREATE FUNCTION "public"."st_astext"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asText'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astext"(IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_astext"(IN "public"."geography") IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.';

-- ----------------------------
--  Function structure for public.st_astext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astext"(text);
CREATE FUNCTION "public"."st_astext"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsText($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astext"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_geographyfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geographyfromtext"(text);
CREATE FUNCTION "public"."st_geographyfromtext"(IN text) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geographyfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geographyfromtext"(IN text) IS 'args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).';

-- ----------------------------
--  Function structure for public.st_geogfromtext(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geogfromtext"(text);
CREATE FUNCTION "public"."st_geogfromtext"(IN text) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_from_text'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geogfromtext"(IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geogfromtext"(IN text) IS 'args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).';

-- ----------------------------
--  Function structure for public.st_geogfromwkb(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geogfromwkb"(bytea);
CREATE FUNCTION "public"."st_geogfromwkb"(IN bytea) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_from_binary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geogfromwkb"(IN bytea) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_geogfromwkb"(IN bytea) IS 'args: geom - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).';

-- ----------------------------
--  Function structure for public.postgis_typmod_dims(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_typmod_dims"(int4);
CREATE FUNCTION "public"."postgis_typmod_dims"(IN int4) RETURNS "int4" 
	AS '$libdir/postgis-2.0','postgis_typmod_dims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_typmod_dims"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_typmod_srid(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_typmod_srid"(int4);
CREATE FUNCTION "public"."postgis_typmod_srid"(IN int4) RETURNS "int4" 
	AS '$libdir/postgis-2.0','postgis_typmod_srid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_typmod_srid"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_typmod_type(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_typmod_type"(int4);
CREATE FUNCTION "public"."postgis_typmod_type"(IN int4) RETURNS "text" 
	AS '$libdir/postgis-2.0','postgis_typmod_type'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_typmod_type"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography"("public"."geometry");
CREATE FUNCTION "public"."geography"(IN "public"."geometry") RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_from_geometry'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography"(IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry"("public"."geography");
CREATE FUNCTION "public"."geometry"(IN "public"."geography") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','geometry_from_geography'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry"(IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_consistent(internal, "public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_consistent"(internal, "public"."geography", int4);
CREATE FUNCTION "public"."geography_gist_consistent"(IN internal, IN "public"."geography", IN int4) RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_gist_consistent'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_consistent"(IN internal, IN "public"."geography", IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_compress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_compress"(internal);
CREATE FUNCTION "public"."geography_gist_compress"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_compress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_compress"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_penalty(internal, internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_penalty"(internal, internal, internal);
CREATE FUNCTION "public"."geography_gist_penalty"(IN internal, IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_penalty'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_penalty"(IN internal, IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_picksplit(internal, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_picksplit"(internal, internal);
CREATE FUNCTION "public"."geography_gist_picksplit"(IN internal, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_picksplit'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_picksplit"(IN internal, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_union(bytea, internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_union"(bytea, internal);
CREATE FUNCTION "public"."geography_gist_union"(IN bytea, IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_union'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_union"(IN bytea, IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_same("public"."box2d", "public"."box2d", internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_same"("public"."box2d", "public"."box2d", internal);
CREATE FUNCTION "public"."geography_gist_same"(IN "public"."box2d", IN "public"."box2d", IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_same'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_same"(IN "public"."box2d", IN "public"."box2d", IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_decompress(internal)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_decompress"(internal);
CREATE FUNCTION "public"."geography_gist_decompress"(IN internal) RETURNS "internal" 
	AS '$libdir/postgis-2.0','gserialized_gist_decompress'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_decompress"(IN internal) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_selectivity(internal, oid, internal, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_selectivity"(internal, oid, internal, int4);
CREATE FUNCTION "public"."geography_gist_selectivity"(IN internal, IN oid, IN internal, IN int4) RETURNS "float8" 
	AS '$libdir/postgis-2.0','geography_gist_selectivity'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_selectivity"(IN internal, IN oid, IN internal, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gist_join_selectivity(internal, oid, internal, int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gist_join_selectivity"(internal, oid, internal, int2);
CREATE FUNCTION "public"."geography_gist_join_selectivity"(IN internal, IN oid, IN internal, IN int2) RETURNS "float8" 
	AS '$libdir/postgis-2.0','geography_gist_selectivity'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."geography_gist_join_selectivity"(IN internal, IN oid, IN internal, IN int2) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_overlaps("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_overlaps"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_overlaps"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.0','gserialized_overlaps'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_overlaps"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_lt("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_lt"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_lt"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.0','geography_lt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_lt"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_le("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_le"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_le"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.0','geography_le'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_le"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_gt("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_gt"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_gt"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.0','geography_gt'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_gt"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_ge("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_ge"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_ge"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.0','geography_ge'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_ge"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_eq("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_eq"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_eq"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.0','geography_eq'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_eq"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geography_cmp("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geography_cmp"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."geography_cmp"(IN "public"."geography", IN "public"."geography") RETURNS "int4" 
	AS '$libdir/postgis-2.0','geography_cmp'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geography_cmp"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_assvg("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_assvg"("public"."geography", int4, int4);
CREATE FUNCTION "public"."st_assvg"(IN geog "public"."geography", IN rel int4 DEFAULT 0, IN maxdecimaldigits int4 DEFAULT 15) RETURNS "text" 
	AS '$libdir/postgis-2.0','geography_as_svg'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_assvg"(IN geog "public"."geography", IN rel int4, IN maxdecimaldigits int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_assvg"(IN geog "public"."geography", IN rel int4, IN maxdecimaldigits int4) IS 'args: geog, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.';

-- ----------------------------
--  Function structure for public.st_assvg(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_assvg"(text);
CREATE FUNCTION "public"."st_assvg"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsSVG($1::geometry,0,15);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_assvg"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_asgml(int4, "public"."geography", int4, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asgml"(int4, "public"."geography", int4, int4, text);
CREATE FUNCTION "public"."_st_asgml"(IN int4, IN "public"."geography", IN int4, IN int4, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.0','geography_as_gml'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asgml"(IN int4, IN "public"."geography", IN int4, IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asgml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"(text);
CREATE FUNCTION "public"."st_asgml"(IN text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGML(2,$1::geometry,15,0, NULL);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asgml("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"("public"."geography", int4, int4);
CREATE FUNCTION "public"."st_asgml"(IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$SELECT _ST_AsGML(2, $1, $2, $3, null)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgml"(IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) IS 'args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.';

-- ----------------------------
--  Function structure for public.st_asgml(int4, "public"."geography", int4, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgml"(int4, "public"."geography", int4, int4, text);
CREATE FUNCTION "public"."st_asgml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0, IN nprefix text DEFAULT NULL::text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGML($1, $2, $3, $4, $5);$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4, IN nprefix text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4, IN nprefix text) IS 'args: version, geog, maxdecimaldigits=15, options=0, nprefix=null - Return the geometry as a GML version 2 or 3 element.';

-- ----------------------------
--  Function structure for public._st_askml(int4, "public"."geography", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_askml"(int4, "public"."geography", int4, text);
CREATE FUNCTION "public"."_st_askml"(IN int4, IN "public"."geography", IN int4, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.0','geography_as_kml'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_askml"(IN int4, IN "public"."geography", IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_askml("public"."geography", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"("public"."geography", int4);
CREATE FUNCTION "public"."st_askml"(IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML(2, $1, $2, null)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN geog "public"."geography", IN maxdecimaldigits int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_askml"(IN geog "public"."geography", IN maxdecimaldigits int4) IS 'args: geog, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';

-- ----------------------------
--  Function structure for public.st_askml(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"(text);
CREATE FUNCTION "public"."st_askml"(IN text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsKML(2, $1::geometry, 15, null);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_askml(int4, "public"."geography", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_askml"(int4, "public"."geography", int4, text);
CREATE FUNCTION "public"."st_askml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN nprefix text DEFAULT NULL::text) RETURNS "text" 
	AS $BODY$SELECT _ST_AsKML($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_askml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN nprefix text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_askml"(IN "version" int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN nprefix text) IS 'args: version, geog, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';

-- ----------------------------
--  Function structure for public._st_asgeojson(int4, "public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asgeojson"(int4, "public"."geography", int4, int4);
CREATE FUNCTION "public"."_st_asgeojson"(IN int4, IN "public"."geography", IN int4, IN int4) RETURNS "text" 
	AS '$libdir/postgis-2.0','geography_as_geojson'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asgeojson"(IN int4, IN "public"."geography", IN int4, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asgeojson(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"(text);
CREATE FUNCTION "public"."st_asgeojson"(IN text) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson(1, $1::geometry,15,0);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asgeojson("public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"("public"."geography", int4, int4);
CREATE FUNCTION "public"."st_asgeojson"(IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson(1, $1, $2, $3); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgeojson"(IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) IS 'args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.';

-- ----------------------------
--  Function structure for public.st_asgeojson(int4, "public"."geography", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgeojson"(int4, "public"."geography", int4, int4);
CREATE FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geog "public"."geography", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$ SELECT _ST_AsGeoJson($1, $2, $3, $4); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgeojson"(IN gj_version int4, IN geog "public"."geography", IN maxdecimaldigits int4, IN "options" int4) IS 'args: gj_version, geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.';

-- ----------------------------
--  Function structure for public._st_distance("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_distance"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."_st_distance"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "float8" 
	AS '$libdir/postgis-2.0','geography_distance'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_distance"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_dwithin("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_dwithin"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."_st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "bool" 
	AS '$libdir/postgis-2.0','geography_dwithin'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_distance("public"."geography", "public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance"("public"."geography", "public"."geography", bool);
CREATE FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography", IN bool) RETURNS "float8" 
	AS $BODY$SELECT _ST_Distance($1, $2, 0.0, $3)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography", IN bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography", IN bool) IS 'args: gg1, gg2, use_spheroid - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';

-- ----------------------------
--  Function structure for public.st_distance("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography") RETURNS "float8" 
	AS $BODY$SELECT _ST_Distance($1, $2, 0.0, true)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_distance"(IN "public"."geography", IN "public"."geography") IS 'args: gg1, gg2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';

-- ----------------------------
--  Function structure for public.st_distance(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance"(text, text);
CREATE FUNCTION "public"."st_distance"(IN text, IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Distance($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_expand("public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_expand"("public"."geography", float8);
CREATE FUNCTION "public"."_st_expand"(IN "public"."geography", IN float8) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_expand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_expand"(IN "public"."geography", IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_dwithin("public"."geography", "public"."geography", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"("public"."geography", "public"."geography", float8, bool);
CREATE FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) RETURNS "bool" 
	AS $BODY$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8, IN bool) IS 'args: gg1, gg2, distance_meters, use_spheroid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';

-- ----------------------------
--  Function structure for public.st_dwithin("public"."geography", "public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"("public"."geography", "public"."geography", float8);
CREATE FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, true)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dwithin"(IN "public"."geography", IN "public"."geography", IN float8) IS 'args: gg1, gg2, distance_meters - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';

-- ----------------------------
--  Function structure for public.st_dwithin(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dwithin"(text, text, float8);
CREATE FUNCTION "public"."st_dwithin"(IN text, IN text, IN float8) RETURNS "bool" 
	AS $BODY$ SELECT ST_DWithin($1::geometry, $2::geometry, $3);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dwithin"(IN text, IN text, IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_area("public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_area"("public"."geography", bool);
CREATE FUNCTION "public"."st_area"(IN geog "public"."geography", IN use_spheroid bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/postgis-2.0','geography_area'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_area"(IN geog "public"."geography", IN use_spheroid bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_area"(IN geog "public"."geography", IN use_spheroid bool) IS 'args: geog, use_spheroid=true - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';

-- ----------------------------
--  Function structure for public.st_area(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_area"(text);
CREATE FUNCTION "public"."st_area"(IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Area($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_area"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_length("public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length"("public"."geography", bool);
CREATE FUNCTION "public"."st_length"(IN geog "public"."geography", IN use_spheroid bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/postgis-2.0','geography_length'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length"(IN geog "public"."geography", IN use_spheroid bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_length"(IN geog "public"."geography", IN use_spheroid bool) IS 'args: geog, use_spheroid=true - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';

-- ----------------------------
--  Function structure for public.st_length(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_length"(text);
CREATE FUNCTION "public"."st_length"(IN text) RETURNS "float8" 
	AS $BODY$ SELECT ST_Length($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_length"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_project("public"."geography", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_project"("public"."geography", float8, float8);
CREATE FUNCTION "public"."st_project"(IN geog "public"."geography", IN distance float8, IN azimuth float8) RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_project'
	LANGUAGE c
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_project"(IN geog "public"."geography", IN distance float8, IN azimuth float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_project"(IN geog "public"."geography", IN distance float8, IN azimuth float8) IS 'args: g1, distance, azimuth - Returns a POINT projected from a start point using a bearing and distance.';

-- ----------------------------
--  Function structure for public.st_azimuth("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_azimuth"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_azimuth"(IN geog1 "public"."geography", IN geog2 "public"."geography") RETURNS "float8" 
	AS '$libdir/postgis-2.0','geography_azimuth'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_azimuth"(IN geog1 "public"."geography", IN geog2 "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_azimuth"(IN geog1 "public"."geography", IN geog2 "public"."geography") IS 'args: pointA, pointB - Returns the angle in radians from the horizontal of the vector defined by pointA and pointB. Angle is computed clockwise from down-to-up: on the clock: 12=0; 3=PI/2; 6=PI; 9=3PI/2.';

-- ----------------------------
--  Function structure for public.st_perimeter("public"."geography", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_perimeter"("public"."geography", bool);
CREATE FUNCTION "public"."st_perimeter"(IN geog "public"."geography", IN use_spheroid bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/postgis-2.0','geography_perimeter'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_perimeter"(IN geog "public"."geography", IN use_spheroid bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_perimeter"(IN geog "public"."geography", IN use_spheroid bool) IS 'args: geog, use_spheroid=true - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon). geometry measurement is in units of spatial reference and geography is in meters.';

-- ----------------------------
--  Function structure for public._st_pointoutside("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_pointoutside"("public"."geography");
CREATE FUNCTION "public"."_st_pointoutside"(IN "public"."geography") RETURNS "public"."geography" 
	AS '$libdir/postgis-2.0','geography_point_outside'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_pointoutside"(IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_covers("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_covers"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."_st_covers"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS '$libdir/postgis-2.0','geography_covers'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_covers"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_covers("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_covers"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_covers"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($1, $2)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_covers"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_covers"(IN "public"."geography", IN "public"."geography") IS 'args: geogpolyA, geogpointB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A';

-- ----------------------------
--  Function structure for public.st_covers(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_covers"(text, text);
CREATE FUNCTION "public"."st_covers"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_Covers($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_covers"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_coveredby("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coveredby"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_coveredby"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Covers($2, $1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coveredby"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_coveredby"(IN "public"."geography", IN "public"."geography") IS 'args: geogA, geogB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B';

-- ----------------------------
--  Function structure for public.st_coveredby(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coveredby"(text, text);
CREATE FUNCTION "public"."st_coveredby"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_CoveredBy($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coveredby"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersects("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_intersects"(IN "public"."geography", IN "public"."geography") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_Distance($1, $2, 0.0, false) < 0.00001$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersects"(IN "public"."geography", IN "public"."geography") IS 'args: geogA, geogB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)';

-- ----------------------------
--  Function structure for public.st_intersects(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"(text, text);
CREATE FUNCTION "public"."st_intersects"(IN text, IN text) RETURNS "bool" 
	AS $BODY$ SELECT ST_Intersects($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_bestsrid("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_bestsrid"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."_st_bestsrid"(IN "public"."geography", IN "public"."geography") RETURNS "int4" 
	AS '$libdir/postgis-2.0','geography_bestsrid'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_bestsrid"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_bestsrid("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_bestsrid"("public"."geography");
CREATE FUNCTION "public"."_st_bestsrid"(IN "public"."geography") RETURNS "int4" 
	AS $BODY$SELECT _ST_BestSRID($1,$1)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_bestsrid"(IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_buffer("public"."geography", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"("public"."geography", float8);
CREATE FUNCTION "public"."st_buffer"(IN "public"."geography", IN float8) RETURNS "public"."geography" 
	AS $BODY$SELECT geography(ST_Transform(ST_Buffer(ST_Transform(geometry($1), _ST_BestSRID($1)), $2), 4326))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN "public"."geography", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_buffer"(IN "public"."geography", IN float8) IS 'args: g1, radius_of_buffer_in_meters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';

-- ----------------------------
--  Function structure for public.st_buffer(text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_buffer"(text, float8);
CREATE FUNCTION "public"."st_buffer"(IN text, IN float8) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_Buffer($1::geometry, $2);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_buffer"(IN text, IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersection("public"."geography", "public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."geography", "public"."geography");
CREATE FUNCTION "public"."st_intersection"(IN "public"."geography", IN "public"."geography") RETURNS "public"."geography" 
	AS $BODY$SELECT geography(ST_Transform(ST_Intersection(ST_Transform(geometry($1), _ST_BestSRID($1, $2)), ST_Transform(geometry($2), _ST_BestSRID($1, $2))), 4326))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersection"(IN "public"."geography", IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN "public"."geography", IN "public"."geography") IS 'args: geogA, geogB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.';

-- ----------------------------
--  Function structure for public.st_intersection(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"(text, text);
CREATE FUNCTION "public"."st_intersection"(IN text, IN text) RETURNS "public"."geometry" 
	AS $BODY$ SELECT ST_Intersection($1::geometry, $2::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersection"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asbinary("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."geography");
CREATE FUNCTION "public"."st_asbinary"(IN "public"."geography") RETURNS "bytea" 
	AS '$libdir/postgis-2.0','LWGEOM_asBinary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."geography") IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asbinary("public"."geography", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."geography", text);
CREATE FUNCTION "public"."st_asbinary"(IN "public"."geography", IN text) RETURNS "bytea" 
	AS $BODY$ SELECT ST_AsBinary($1::geometry, $2);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."geography", IN text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."geography", IN text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asewkt("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkt"("public"."geography");
CREATE FUNCTION "public"."st_asewkt"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asEWKT'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkt"(IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asewkt"(IN "public"."geography") IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.';

-- ----------------------------
--  Function structure for public.st_asewkt(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asewkt"(text);
CREATE FUNCTION "public"."st_asewkt"(IN text) RETURNS "text" 
	AS $BODY$ SELECT ST_AsEWKT($1::geometry);  $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asewkt"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometrytype("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometrytype"("public"."geography");
CREATE FUNCTION "public"."geometrytype"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_getTYPE'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometrytype"(IN "public"."geography") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_summary("public"."geography")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summary"("public"."geography");
CREATE FUNCTION "public"."st_summary"(IN "public"."geography") RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_summary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_summary"(IN "public"."geography") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_summary"(IN "public"."geography") IS 'args: g - Returns a text summary of the contents of the geometry.';

-- ----------------------------
--  Function structure for public.st_distance_sphere("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distance_sphere"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_distance_sphere"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS $BODY$
	select st_distance(geography($1),geography($2),false)
	$BODY$
	LANGUAGE sql
	COST 300
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distance_sphere"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_distance_sphere"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius of 6370986 meters. Faster than ST_Distance_Spheroid , but less accurate. PostGIS versions prior to 1.5 only implemented for points.';

-- ----------------------------
--  Function structure for public.postgis_type_name(varchar, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_type_name"(varchar, int4, bool);
CREATE FUNCTION "public"."postgis_type_name"(IN geomname varchar, IN coord_dimension int4, IN use_new_name bool DEFAULT true) RETURNS "varchar" 
	AS $BODY$
 SELECT CASE WHEN $3 THEN new_name ELSE old_name END As geomname
 	FROM 
 	( VALUES
 		 ('GEOMETRY', 'Geometry', 2) ,
 		 	('GEOMETRY', 'GeometryZ', 3) ,
 		 	('GEOMETRY', 'GeometryZM', 4) ,
			('GEOMETRYCOLLECTION', 'GeometryCollection', 2) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZ', 3) ,
			('GEOMETRYCOLLECTIONM', 'GeometryCollectionM', 3) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZM', 4) ,
			
			('POINT', 'Point',2) ,
			('POINTM','PointM',3) ,
			('POINT', 'PointZ',3) ,
			('POINT', 'PointZM',4) ,
			
			('MULTIPOINT','MultiPoint',2) ,
			('MULTIPOINT','MultiPointZ',3) ,
			('MULTIPOINTM','MultiPointM',3) ,
			('MULTIPOINT','MultiPointZM',4) ,
			
			('POLYGON', 'Polygon',2) ,
			('POLYGON', 'PolygonZ',3) ,
			('POLYGONM', 'PolygonM',3) ,
			('POLYGON', 'PolygonZM',4) ,
			
			('MULTIPOLYGON', 'MultiPolygon',2) ,
			('MULTIPOLYGON', 'MultiPolygonZ',3) ,
			('MULTIPOLYGONM', 'MultiPolygonM',3) ,
			('MULTIPOLYGON', 'MultiPolygonZM',4) ,
			
			('MULTILINESTRING', 'MultiLineString',2) ,
			('MULTILINESTRING', 'MultiLineStringZ',3) ,
			('MULTILINESTRINGM', 'MultiLineStringM',3) ,
			('MULTILINESTRING', 'MultiLineStringZM',4) ,
			
			('LINESTRING', 'LineString',2) ,
			('LINESTRING', 'LineStringZ',3) ,
			('LINESTRINGM', 'LineStringM',3) ,
			('LINESTRING', 'LineStringZM',4) ,
			
			('CIRCULARSTRING', 'CircularString',2) ,
			('CIRCULARSTRING', 'CircularStringZ',3) ,
			('CIRCULARSTRINGM', 'CircularStringM',3) ,
			('CIRCULARSTRING', 'CircularStringZM',4) ,
			
			('COMPOUNDCURVE', 'CompoundCurve',2) ,
			('COMPOUNDCURVE', 'CompoundCurveZ',3) ,
			('COMPOUNDCURVEM', 'CompoundCurveM',3) ,
			('COMPOUNDCURVE', 'CompoundCurveZM',4) ,
			
			('CURVEPOLYGON', 'CurvePolygon',2) ,
			('CURVEPOLYGON', 'CurvePolygonZ',3) ,
			('CURVEPOLYGONM', 'CurvePolygonM',3) ,
			('CURVEPOLYGON', 'CurvePolygonZM',4) ,
			
			('MULTICURVE', 'MultiCurve',2 ) ,
			('MULTICURVE', 'MultiCurveZ',3 ) ,
			('MULTICURVEM', 'MultiCurveM',3 ) ,
			('MULTICURVE', 'MultiCurveZM',4 ) ,
			
			('MULTISURFACE', 'MultiSurface', 2) ,
			('MULTISURFACE', 'MultiSurfaceZ', 3) ,
			('MULTISURFACEM', 'MultiSurfaceM', 3) ,
			('MULTISURFACE', 'MultiSurfaceZM', 4) ,
			
			('POLYHEDRALSURFACE', 'PolyhedralSurface',2) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZ',3) ,
			('POLYHEDRALSURFACEM', 'PolyhedralSurfaceM',3) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZM',4) ,
			
			('TRIANGLE', 'Triangle',2) ,
			('TRIANGLE', 'TriangleZ',3) ,
			('TRIANGLEM', 'TriangleM',3) ,
			('TRIANGLE', 'TriangleZM',4) ,

			('TIN', 'Tin', 2),
			('TIN', 'TinZ', 3),
			('TIN', 'TinM', 3),
			('TIN', 'TinZM', 4) )
			 As g(old_name, new_name, coord_dimension)
		WHERE (upper(old_name) = upper($1) OR upper(new_name) = upper($1))
			AND coord_dimension = $2;
$BODY$
	LANGUAGE sql
	COST 200
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_type_name"(IN geomname varchar, IN coord_dimension int4, IN use_new_name bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_constraint_srid(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_constraint_srid"(text, text, text);
CREATE FUNCTION "public"."postgis_constraint_srid"(IN geomschema text, IN geomtable text, IN geomcolumn text) RETURNS "int4" 
	AS $BODY$
SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %';
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."postgis_constraint_srid"(IN geomschema text, IN geomtable text, IN geomcolumn text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_constraint_dims(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_constraint_dims"(text, text, text);
CREATE FUNCTION "public"."postgis_constraint_dims"(IN geomschema text, IN geomtable text, IN geomcolumn text) RETURNS "int4" 
	AS $BODY$
SELECT  replace(split_part(s.consrc, ' = ', 2), ')', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %';
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."postgis_constraint_dims"(IN geomschema text, IN geomtable text, IN geomcolumn text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_constraint_type(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_constraint_type"(text, text, text);
CREATE FUNCTION "public"."postgis_constraint_type"(IN geomschema text, IN geomtable text, IN geomcolumn text) RETURNS "varchar" 
	AS $BODY$
SELECT  replace(split_part(s.consrc, '''', 2), ')', '')::varchar		
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %';
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."postgis_constraint_type"(IN geomschema text, IN geomtable text, IN geomcolumn text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_3ddistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3ddistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3ddistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_mindistance3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3ddistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3ddistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.';

-- ----------------------------
--  Function structure for public.st_3dmaxdistance("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dmaxdistance"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dmaxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','LWGEOM_maxdistance3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dmaxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dmaxdistance"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units.';

-- ----------------------------
--  Function structure for public.st_3dclosestpoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dclosestpoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dclosestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_closestpoint3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dclosestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dclosestpoint"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line.';

-- ----------------------------
--  Function structure for public.st_3dshortestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dshortestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dshortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_shortestline3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dshortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dshortestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 3-dimensional shortest line between two geometries';

-- ----------------------------
--  Function structure for public.st_3dlongestline("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dlongestline"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dlongestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_longestline3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dlongestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dlongestline"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: g1, g2 - Returns the 3-dimensional longest line between two geometries';

-- ----------------------------
--  Function structure for public._st_3ddwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_3ddwithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."_st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_dwithin3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_3ddwithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3ddwithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_3DDWithin($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3ddwithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, distance_of_srid - For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units.';

-- ----------------------------
--  Function structure for public._st_3ddfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_3ddfullywithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."_st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_dfullywithin3d'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_3ddfullywithin("public"."geometry", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3ddfullywithin"("public"."geometry", "public"."geometry", float8);
CREATE FUNCTION "public"."st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) RETURNS "bool" 
	AS $BODY$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_3DDFullyWithin($1, $2, $3)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3ddfullywithin"(IN geom1 "public"."geometry", IN geom2 "public"."geometry", IN float8) IS 'args: g1, g2, distance - Returns true if all of the 3D geometries are within the specified distance of one another.';

-- ----------------------------
--  Function structure for public.st_3dintersects("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_3dintersects"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_3dintersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") RETURNS "bool" 
	AS $BODY$SELECT $1 && $2 AND _ST_3DDWithin($1, $2, 0.0)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_3dintersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_3dintersects"(IN geom1 "public"."geometry", IN geom2 "public"."geometry") IS 'args: geomA, geomB - Returns TRUE if the Geometries "spatially intersect" in 3d - only for points and linestrings';

-- ----------------------------
--  Function structure for public.st_coorddim("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_coorddim"("public"."geometry");
CREATE FUNCTION "public"."st_coorddim"(IN geometry "public"."geometry") RETURNS "int2" 
	AS '$libdir/postgis-2.0','LWGEOM_ndims'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_coorddim"(IN geometry "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_coorddim"(IN geometry "public"."geometry") IS 'args: geomA - Return the coordinate dimension of the ST_Geometry value.';

-- ----------------------------
--  Function structure for public.st_curvetoline("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_curvetoline"("public"."geometry", int4);
CREATE FUNCTION "public"."st_curvetoline"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_curve_segmentize'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_curvetoline"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_curvetoline"(IN "public"."geometry", IN int4) IS 'args: curveGeom, segments_per_qtr_circle - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON';

-- ----------------------------
--  Function structure for public.st_curvetoline("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_curvetoline"("public"."geometry");
CREATE FUNCTION "public"."st_curvetoline"(IN "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$SELECT ST_CurveToLine($1, 32)$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_curvetoline"(IN "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_curvetoline"(IN "public"."geometry") IS 'args: curveGeom - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON';

-- ----------------------------
--  Function structure for public.st_hasarc("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hasarc"("public"."geometry");
CREATE FUNCTION "public"."st_hasarc"(IN geometry "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_has_arc'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hasarc"(IN geometry "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_hasarc"(IN geometry "public"."geometry") IS 'args: geomA - Returns true if a geometry or geometry collection contains a circular string';

-- ----------------------------
--  Function structure for public.st_linetocurve("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_linetocurve"("public"."geometry");
CREATE FUNCTION "public"."st_linetocurve"(IN geometry "public"."geometry") RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_line_desegmentize'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_linetocurve"(IN geometry "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_linetocurve"(IN geometry "public"."geometry") IS 'args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVED POLYGON';

-- ----------------------------
--  Function structure for public._st_orderingequals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_orderingequals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."_st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") RETURNS "bool" 
	AS '$libdir/postgis-2.0','LWGEOM_same'
	LANGUAGE c
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_orderingequals("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_orderingequals"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") RETURNS "bool" 
	AS $BODY$ 
	SELECT $1 ~= $2 AND _ST_OrderingEquals($1, $2)
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_orderingequals"(IN geometrya "public"."geometry", IN geometryb "public"."geometry") IS 'args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.';

-- ----------------------------
--  Function structure for public.st_point(float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_point"(float8, float8);
CREATE FUNCTION "public"."st_point"(IN float8, IN float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_makepoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_point"(IN float8, IN float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_point"(IN float8, IN float8) IS 'args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.';

-- ----------------------------
--  Function structure for public.st_polygon("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygon"("public"."geometry", int4);
CREATE FUNCTION "public"."st_polygon"(IN "public"."geometry", IN int4) RETURNS "public"."geometry" 
	AS $BODY$ 
	SELECT ST_SetSRID(ST_MakePolygon($1), $2)
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygon"(IN "public"."geometry", IN int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_polygon"(IN "public"."geometry", IN int4) IS 'args: aLineString, srid - Returns a polygon built from the specified linestring and SRID.';

-- ----------------------------
--  Function structure for public.st_wkbtosql(bytea)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_wkbtosql"(bytea);
CREATE FUNCTION "public"."st_wkbtosql"(IN wkb bytea) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','LWGEOM_from_WKB'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_wkbtosql"(IN wkb bytea) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_wkbtosql"(IN wkb bytea) IS 'args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid';

-- ----------------------------
--  Function structure for public.st_locatebetween("public"."geometry", float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locatebetween"("public"."geometry", float8, float8, float8);
CREATE FUNCTION "public"."st_locatebetween"(IN geometry "public"."geometry", IN frommeasure float8, IN tomeasure float8, IN leftrightoffset float8 DEFAULT 0.0) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_LocateBetween'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locatebetween"(IN geometry "public"."geometry", IN frommeasure float8, IN tomeasure float8, IN leftrightoffset float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_locatebetween"(IN geometry "public"."geometry", IN frommeasure float8, IN tomeasure float8, IN leftrightoffset float8) IS 'args: geomA, measure_start, measure_end, offset - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.';

-- ----------------------------
--  Function structure for public.st_locatealong("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locatealong"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_locatealong"(IN geometry "public"."geometry", IN measure float8, IN leftrightoffset float8 DEFAULT 0.0) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_LocateAlong'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locatealong"(IN geometry "public"."geometry", IN measure float8, IN leftrightoffset float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_locatealong"(IN geometry "public"."geometry", IN measure float8, IN leftrightoffset float8) IS 'args: ageom_with_measure, a_measure, offset - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.';

-- ----------------------------
--  Function structure for public.st_locatebetweenelevations("public"."geometry", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_locatebetweenelevations"("public"."geometry", float8, float8);
CREATE FUNCTION "public"."st_locatebetweenelevations"(IN geometry "public"."geometry", IN fromelevation float8, IN toelevation float8) RETURNS "public"."geometry" 
	AS '$libdir/postgis-2.0','ST_LocateBetweenElevations'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_locatebetweenelevations"(IN geometry "public"."geometry", IN fromelevation float8, IN toelevation float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_locatebetweenelevations"(IN geometry "public"."geometry", IN fromelevation float8, IN toelevation float8) IS 'args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.';

-- ----------------------------
--  Function structure for public.st_interpolatepoint("public"."geometry", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_interpolatepoint"("public"."geometry", "public"."geometry");
CREATE FUNCTION "public"."st_interpolatepoint"(IN line "public"."geometry", IN point "public"."geometry") RETURNS "float8" 
	AS '$libdir/postgis-2.0','ST_InterpolatePoint'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_interpolatepoint"(IN line "public"."geometry", IN point "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_interpolatepoint"(IN line "public"."geometry", IN point "public"."geometry") IS 'args: line, point - Return the value of the measure dimension of a geometry at the point closed to the provided point.';

-- ----------------------------
--  Function structure for public.st_minimumboundingcircle("public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_minimumboundingcircle"("public"."geometry", int4);
CREATE FUNCTION "public"."st_minimumboundingcircle"(IN inputgeom "public"."geometry", IN segs_per_quarter int4 DEFAULT 48) RETURNS "public"."geometry" 
	AS $BODY$
	DECLARE
	hull GEOMETRY;
	ring GEOMETRY;
	center GEOMETRY;
	radius DOUBLE PRECISION;
	dist DOUBLE PRECISION;
	d DOUBLE PRECISION;
	idx1 integer;
	idx2 integer;
	l1 GEOMETRY;
	l2 GEOMETRY;
	p1 GEOMETRY;
	p2 GEOMETRY;
	a1 DOUBLE PRECISION;
	a2 DOUBLE PRECISION;


	BEGIN

	-- First compute the ConvexHull of the geometry
	hull = ST_ConvexHull(inputgeom);
	--A point really has no MBC
	IF ST_GeometryType(hull) = 'ST_Point' THEN
		RETURN hull;
	END IF;
	-- convert the hull perimeter to a linestring so we can manipulate individual points
	--If its already a linestring force it to a closed linestring
	ring = CASE WHEN ST_GeometryType(hull) = 'ST_LineString' THEN ST_AddPoint(hull, ST_StartPoint(hull)) ELSE ST_ExteriorRing(hull) END;

	dist = 0;
	-- Brute Force - check every pair
	FOR i in 1 .. (ST_NumPoints(ring)-2)
		LOOP
			FOR j in i .. (ST_NumPoints(ring)-1)
				LOOP
				d = ST_Distance(ST_PointN(ring,i),ST_PointN(ring,j));
				-- Check the distance and update if larger
				IF (d > dist) THEN
					dist = d;
					idx1 = i;
					idx2 = j;
				END IF;
			END LOOP;
		END LOOP;

	-- We now have the diameter of the convex hull.  The following line returns it if desired.
	-- RETURN ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2));

	-- Now for the Minimum Bounding Circle.  Since we know the two points furthest from each
	-- other, the MBC must go through those two points. Start with those points as a diameter of a circle.

	-- The radius is half the distance between them and the center is midway between them
	radius = ST_Distance(ST_PointN(ring,idx1),ST_PointN(ring,idx2)) / 2.0;
	center = ST_Line_interpolate_point(ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2)),0.5);

	-- Loop through each vertex and check if the distance from the center to the point
	-- is greater than the current radius.
	FOR k in 1 .. (ST_NumPoints(ring)-1)
		LOOP
		IF(k <> idx1 and k <> idx2) THEN
			dist = ST_Distance(center,ST_PointN(ring,k));
			IF (dist > radius) THEN
				-- We have to expand the circle.  The new circle must pass trhough
				-- three points - the two original diameters and this point.

				-- Draw a line from the first diameter to this point
				l1 = ST_Makeline(ST_PointN(ring,idx1),ST_PointN(ring,k));
				-- Compute the midpoint
				p1 = ST_line_interpolate_point(l1,0.5);
				-- Rotate the line 90 degrees around the midpoint (perpendicular bisector)
				l1 = ST_Rotate(l1,pi()/2,p1);
				--  Compute the azimuth of the bisector
				a1 = ST_Azimuth(ST_PointN(l1,1),ST_PointN(l1,2));
				--  Extend the line in each direction the new computed distance to insure they will intersect
				l1 = ST_AddPoint(l1,ST_Makepoint(ST_X(ST_PointN(l1,2))+sin(a1)*dist,ST_Y(ST_PointN(l1,2))+cos(a1)*dist),-1);
				l1 = ST_AddPoint(l1,ST_Makepoint(ST_X(ST_PointN(l1,1))-sin(a1)*dist,ST_Y(ST_PointN(l1,1))-cos(a1)*dist),0);

				-- Repeat for the line from the point to the other diameter point
				l2 = ST_Makeline(ST_PointN(ring,idx2),ST_PointN(ring,k));
				p2 = ST_Line_interpolate_point(l2,0.5);
				l2 = ST_Rotate(l2,pi()/2,p2);
				a2 = ST_Azimuth(ST_PointN(l2,1),ST_PointN(l2,2));
				l2 = ST_AddPoint(l2,ST_Makepoint(ST_X(ST_PointN(l2,2))+sin(a2)*dist,ST_Y(ST_PointN(l2,2))+cos(a2)*dist),-1);
				l2 = ST_AddPoint(l2,ST_Makepoint(ST_X(ST_PointN(l2,1))-sin(a2)*dist,ST_Y(ST_PointN(l2,1))-cos(a2)*dist),0);

				-- The new center is the intersection of the two bisectors
				center = ST_Intersection(l1,l2);
				-- The new radius is the distance to any of the three points
				radius = ST_Distance(center,ST_PointN(ring,idx1));
			END IF;
		END IF;
		END LOOP;
	--DONE!!  Return the MBC via the buffer command
	RETURN ST_Buffer(center,radius,segs_per_quarter);

	END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_minimumboundingcircle"(IN inputgeom "public"."geometry", IN segs_per_quarter int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_minimumboundingcircle"(IN inputgeom "public"."geometry", IN segs_per_quarter int4) IS 'args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.';

-- ----------------------------
--  Function structure for public._st_concavehull("public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_concavehull"("public"."geometry");
CREATE FUNCTION "public"."_st_concavehull"(IN param_inputgeom "public"."geometry") RETURNS "public"."geometry" 
	AS $BODY$
	DECLARE     
	vexhull GEOMETRY;
	var_resultgeom geometry;
	var_inputgeom geometry;
	vexring GEOMETRY;
	cavering GEOMETRY;
	cavept geometry[];
	seglength double precision;
	var_tempgeom geometry;
	scale_factor integer := 1;
	i integer;
	
	BEGIN

		-- First compute the ConvexHull of the geometry
		vexhull := ST_ConvexHull(param_inputgeom);
		var_inputgeom := param_inputgeom;
		--A point really has no concave hull
		IF ST_GeometryType(vexhull) = 'ST_Point' OR ST_GeometryType(vexHull) = 'ST_LineString' THEN
			RETURN vexhull;
		END IF;

		-- convert the hull perimeter to a linestring so we can manipulate individual points
		vexring := CASE WHEN ST_GeometryType(vexhull) = 'ST_LineString' THEN vexhull ELSE ST_ExteriorRing(vexhull) END;
		IF abs(ST_X(ST_PointN(vexring,1))) < 1 THEN --scale the geometry to prevent stupid precision errors - not sure it works so make low for now
			scale_factor := 100;
			vexring := ST_Scale(vexring, scale_factor,scale_factor);
			var_inputgeom := ST_Scale(var_inputgeom, scale_factor, scale_factor);
			--RAISE NOTICE 'Scaling';
		END IF;
		seglength := ST_Length(vexring)/least(ST_NPoints(vexring)*2,1000) ;

		vexring := ST_Segmentize(vexring, seglength);
		-- find the point on the original geom that is closest to each point of the convex hull and make a new linestring out of it.
		cavering := ST_Collect(
			ARRAY(

				SELECT 
					ST_ClosestPoint(var_inputgeom, pt ) As the_geom
					FROM (
						SELECT  ST_PointN(vexring, n ) As pt, n
							FROM 
							generate_series(1, ST_NPoints(vexring) ) As n
						) As pt
				
				)
			)
		; 
		

		var_resultgeom := ST_MakeLine(geom) 
			FROM ST_Dump(cavering) As foo;

		IF ST_IsSimple(var_resultgeom) THEN
			var_resultgeom := ST_MakePolygon(var_resultgeom);
			--RAISE NOTICE 'is Simple: %', var_resultgeom;
		ELSE 
			--RAISE NOTICE 'is not Simple: %', var_resultgeom;
			var_resultgeom := ST_ConvexHull(var_resultgeom);
		END IF;
		
		IF scale_factor > 1 THEN -- scale the result back
			var_resultgeom := ST_Scale(var_resultgeom, 1/scale_factor, 1/scale_factor);
		END IF;
		RETURN var_resultgeom;
	
	END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_concavehull"(IN param_inputgeom "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_concavehull("public"."geometry", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_concavehull"("public"."geometry", float8, bool);
CREATE FUNCTION "public"."st_concavehull"(IN param_geom "public"."geometry", IN param_pctconvex float8, IN param_allow_holes bool DEFAULT false) RETURNS "public"."geometry" 
	AS $BODY$
	DECLARE
		var_convhull geometry := ST_ConvexHull(param_geom);
		var_param_geom geometry := param_geom;
		var_initarea float := ST_Area(var_convhull);
		var_newarea float := var_initarea;
		var_div integer := 6; 
		var_tempgeom geometry;
		var_tempgeom2 geometry;
		var_cent geometry;
		var_geoms geometry[4]; 
		var_enline geometry;
		var_resultgeom geometry;
		var_atempgeoms geometry[];
		var_buf float := 1; 
	BEGIN
		-- We start with convex hull as our base
		var_resultgeom := var_convhull;
		
		IF param_pctconvex = 1 THEN
			return var_resultgeom;
		ELSIF ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN -- it is as concave as it is going to get
			IF param_allow_holes THEN -- leave the holes
				RETURN var_param_geom;
			ELSE -- remove the holes
				var_resultgeom := ST_MakePolygon(ST_ExteriorRing(var_param_geom));
				RETURN var_resultgeom;
			END IF;
		END IF;
		IF ST_Dimension(var_resultgeom) > 1 AND param_pctconvex BETWEEN 0 and 0.98 THEN
		-- get linestring that forms envelope of geometry
			var_enline := ST_Boundary(ST_Envelope(var_param_geom));
			var_buf := ST_Length(var_enline)/1000.0;
			IF ST_GeometryType(var_param_geom) = 'ST_MultiPoint' AND ST_NumGeometries(var_param_geom) BETWEEN 4 and 200 THEN
			-- we make polygons out of points since they are easier to cave in. 
			-- Note we limit to between 4 and 200 points because this process is slow and gets quadratically slow
				var_buf := sqrt(ST_Area(var_convhull)*0.8/(ST_NumGeometries(var_param_geom)*ST_NumGeometries(var_param_geom)));
				var_atempgeoms := ARRAY(SELECT geom FROM ST_DumpPoints(var_param_geom));
				-- 5 and 10 and just fudge factors
				var_tempgeom := ST_Union(ARRAY(SELECT geom
						FROM (
						-- fuse near neighbors together
						SELECT DISTINCT ON (i) i,  ST_Distance(var_atempgeoms[i],var_atempgeoms[j]), ST_Buffer(ST_MakeLine(var_atempgeoms[i], var_atempgeoms[j]) , var_buf*5, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									INNER JOIN generate_series(1,array_upper(var_atempgeoms, 1)) As j 
										ON (
								 NOT ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
								UNION ALL
						-- catch the ones with no near neighbors
								SELECT i, 0, ST_Buffer(var_atempgeoms[i] , var_buf*10, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									LEFT JOIN generate_series(ceiling(array_upper(var_atempgeoms,1)/2)::integer,array_upper(var_atempgeoms, 1)) As j 
										ON (
								 NOT ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10) 
									)
									WHERE j IS NULL
								ORDER BY 1, 2
							) As foo	) );
				IF ST_IsValid(var_tempgeom) AND ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
					var_tempgeom := ST_Intersection(var_tempgeom, var_convhull);
					IF param_allow_holes THEN
						var_param_geom := var_tempgeom;
					ELSE
						var_param_geom := ST_MakePolygon(ST_ExteriorRing(var_tempgeom));
					END IF;
					return var_param_geom;
				ELSIF ST_IsValid(var_tempgeom) THEN
					var_param_geom := ST_Intersection(var_tempgeom, var_convhull);	
				END IF;
			END IF;

			IF ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN
				IF NOT param_allow_holes THEN
					var_param_geom := ST_MakePolygon(ST_ExteriorRing(var_param_geom));
				END IF;
				return var_param_geom;
			END IF;
            var_cent := ST_Centroid(var_param_geom);
            IF (ST_XMax(var_enline) - ST_XMin(var_enline) ) > var_buf AND (ST_YMax(var_enline) - ST_YMin(var_enline) ) > var_buf THEN
                    IF ST_Dwithin(ST_Centroid(var_convhull) , ST_Centroid(ST_Envelope(var_param_geom)), var_buf/2) THEN
                -- If the geometric dimension is > 1 and the object is symettric (cutting at centroid will not work -- offset a bit)
                        var_cent := ST_Translate(var_cent, (ST_XMax(var_enline) - ST_XMin(var_enline))/1000,  (ST_YMAX(var_enline) - ST_YMin(var_enline))/1000);
                    ELSE
                        -- uses closest point on geometry to centroid. I can't explain why we are doing this
                        var_cent := ST_ClosestPoint(var_param_geom,var_cent);
                    END IF;
                    IF ST_DWithin(var_cent, var_enline,var_buf) THEN
                        var_cent := ST_centroid(ST_Envelope(var_param_geom));
                    END IF;
                    -- break envelope into 4 triangles about the centroid of the geometry and returned the clipped geometry in each quadrant
                    FOR i in 1 .. 4 LOOP
                       var_geoms[i] := ST_MakePolygon(ST_MakeLine(ARRAY[ST_PointN(var_enline,i), ST_PointN(var_enline,i+1), var_cent, ST_PointN(var_enline,i)]));
                       var_geoms[i] := ST_Intersection(var_param_geom, ST_Buffer(var_geoms[i],var_buf));
                       IF ST_IsValid(var_geoms[i]) THEN 
                            
                       ELSE
                            var_geoms[i] := ST_BuildArea(ST_MakeLine(ARRAY[ST_PointN(var_enline,i), ST_PointN(var_enline,i+1), var_cent, ST_PointN(var_enline,i)]));
                       END IF; 
                    END LOOP;
                    var_tempgeom := ST_Union(ARRAY[ST_ConvexHull(var_geoms[1]), ST_ConvexHull(var_geoms[2]) , ST_ConvexHull(var_geoms[3]), ST_ConvexHull(var_geoms[4])]); 
                    --RAISE NOTICE 'Curr vex % ', ST_AsText(var_tempgeom);
                    IF ST_Area(var_tempgeom) <= var_newarea AND ST_IsValid(var_tempgeom)  THEN --AND ST_GeometryType(var_tempgeom) ILIKE '%Polygon'
                        
                        var_tempgeom := ST_Buffer(ST_ConcaveHull(var_geoms[1],least(param_pctconvex + param_pctconvex/var_div),true),var_buf, 'quad_segs=2');
                        FOR i IN 1 .. 4 LOOP
                            var_geoms[i] := ST_Buffer(ST_ConcaveHull(var_geoms[i],least(param_pctconvex + param_pctconvex/var_div),true), var_buf, 'quad_segs=2');
                            IF ST_IsValid(var_geoms[i]) Then
                                var_tempgeom := ST_Union(var_tempgeom, var_geoms[i]);
                            ELSE
                                RAISE NOTICE 'Not valid % %', i, ST_AsText(var_tempgeom);
                                var_tempgeom := ST_Union(var_tempgeom, ST_ConvexHull(var_geoms[i]));
                            END IF; 
                        END LOOP;

                        --RAISE NOTICE 'Curr concave % ', ST_AsText(var_tempgeom);
                        IF ST_IsValid(var_tempgeom) THEN
                            var_resultgeom := var_tempgeom;
                        END IF;
                        var_newarea := ST_Area(var_resultgeom);
                    ELSIF ST_IsValid(var_tempgeom) THEN
                        var_resultgeom := var_tempgeom;
                    END IF;

                    IF ST_NumGeometries(var_resultgeom) > 1  THEN
                        var_tempgeom := _ST_ConcaveHull(var_resultgeom);
                        IF ST_IsValid(var_tempgeom) AND ST_GeometryType(var_tempgeom) ILIKE 'ST_Polygon' THEN
                            var_resultgeom := var_tempgeom;
                        ELSE
                            var_resultgeom := ST_Buffer(var_tempgeom,var_buf, 'quad_segs=2');
                        END IF;
                    END IF;
                    IF param_allow_holes = false THEN 
                    -- only keep exterior ring since we do not want holes
                        var_resultgeom := ST_MakePolygon(ST_ExteriorRing(var_resultgeom));
                    END IF;
                ELSE
                    var_resultgeom := ST_Buffer(var_resultgeom,var_buf);
                END IF;
                var_resultgeom := ST_Intersection(var_resultgeom, ST_ConvexHull(var_param_geom));
            ELSE
                -- dimensions are too small to cut
                var_resultgeom := _ST_ConcaveHull(var_param_geom);
            END IF;
            RETURN var_resultgeom;
	END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_concavehull"(IN param_geom "public"."geometry", IN param_pctconvex float8, IN param_allow_holes bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_concavehull"(IN param_geom "public"."geometry", IN param_pctconvex float8, IN param_allow_holes bool) IS 'args: geomA, target_percent, allow_holes=false - The concave hull of a geometry represents a possibly concave geometry that encloses all geometries within the set. You can think of it as shrink wrapping.';

-- ----------------------------
--  Function structure for public._st_asx3d(int4, "public"."geometry", int4, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asx3d"(int4, "public"."geometry", int4, int4, text);
CREATE FUNCTION "public"."_st_asx3d"(IN int4, IN "public"."geometry", IN int4, IN int4, IN text) RETURNS "text" 
	AS '$libdir/postgis-2.0','LWGEOM_asX3D'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_asx3d"(IN int4, IN "public"."geometry", IN int4, IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asx3d("public"."geometry", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asx3d"("public"."geometry", int4, int4);
CREATE FUNCTION "public"."st_asx3d"(IN geom "public"."geometry", IN maxdecimaldigits int4 DEFAULT 15, IN "options" int4 DEFAULT 0) RETURNS "text" 
	AS $BODY$SELECT _ST_AsX3D(3,$1,$2,$3,'');$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asx3d"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asx3d"(IN geom "public"."geometry", IN maxdecimaldigits int4, IN "options" int4) IS 'args: g1, maxdecimaldigits=15, options=0 - Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML';

-- ----------------------------
--  Function structure for public.raster_in(cstring)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_in"(cstring);
CREATE FUNCTION "public"."raster_in"(IN cstring) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_in'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_in"(IN cstring) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_out("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_out"("public"."raster");
CREATE FUNCTION "public"."raster_out"(IN "public"."raster") RETURNS "cstring" 
	AS '$libdir/rtpostgis-2.0','RASTER_out'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_out"(IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_raster_lib_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_raster_lib_version"();
CREATE FUNCTION "public"."postgis_raster_lib_version"() RETURNS "text" 
	AS '$libdir/rtpostgis-2.0','RASTER_lib_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_raster_lib_version"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_raster_lib_version"() IS 'Reports full raster version and build configuration infos.';

-- ----------------------------
--  Function structure for public.postgis_raster_scripts_installed()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_raster_scripts_installed"();
CREATE FUNCTION "public"."postgis_raster_scripts_installed"() RETURNS "text" 
	AS $BODY$ SELECT '2.0.2'::text || ' r' || 10789::text AS version $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_raster_scripts_installed"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.postgis_raster_lib_build_date()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_raster_lib_build_date"();
CREATE FUNCTION "public"."postgis_raster_lib_build_date"() RETURNS "text" 
	AS '$libdir/rtpostgis-2.0','RASTER_lib_build_date'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_raster_lib_build_date"() OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."postgis_raster_lib_build_date"() IS 'Reports full raster library build date.';

-- ----------------------------
--  Function structure for public.postgis_gdal_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."postgis_gdal_version"();
CREATE FUNCTION "public"."postgis_gdal_version"() RETURNS "text" 
	AS '$libdir/rtpostgis-2.0','RASTER_gdal_version'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."postgis_gdal_version"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_convexhull("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_convexhull"("public"."raster");
CREATE FUNCTION "public"."st_convexhull"(IN "public"."raster") RETURNS "public"."geometry" 
	AS '$libdir/rtpostgis-2.0','RASTER_convex_hull'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_convexhull"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_convexhull"(IN "public"."raster") IS 'args: rast - Return the convex hull geometry of the raster including pixel values equal to BandNoDataValue. For regular shaped and non-skewed rasters, this gives the same result as ST_Envelope so only useful for irregularly shaped or skewed rasters.';

-- ----------------------------
--  Function structure for public.box3d("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."box3d"("public"."raster");
CREATE FUNCTION "public"."box3d"(IN "public"."raster") RETURNS "public"."box3d" 
	AS $BODY$select box3d(st_convexhull($1))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."box3d"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."box3d"(IN "public"."raster") IS 'args: rast - Returns the box 3d representation of the enclosing box of the raster.';

-- ----------------------------
--  Function structure for public.st_envelope("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_envelope"("public"."raster");
CREATE FUNCTION "public"."st_envelope"(IN "public"."raster") RETURNS "public"."geometry" 
	AS $BODY$select st_envelope(st_convexhull($1))$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_envelope"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_envelope"(IN "public"."raster") IS 'args: rast - Returns the polygon representation of the extent of the raster.';

-- ----------------------------
--  Function structure for public.st_height("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_height"("public"."raster");
CREATE FUNCTION "public"."st_height"(IN "public"."raster") RETURNS "int4" 
	AS '$libdir/rtpostgis-2.0','RASTER_getHeight'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_height"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_height"(IN "public"."raster") IS 'args: rast - Returns the height of the raster in pixels.';

-- ----------------------------
--  Function structure for public.st_numbands("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_numbands"("public"."raster");
CREATE FUNCTION "public"."st_numbands"(IN "public"."raster") RETURNS "int4" 
	AS '$libdir/rtpostgis-2.0','RASTER_getNumBands'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_numbands"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_numbands"(IN "public"."raster") IS 'args: rast - Returns the number of bands in the raster object.';

-- ----------------------------
--  Function structure for public.st_scalex("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_scalex"("public"."raster");
CREATE FUNCTION "public"."st_scalex"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getXScale'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_scalex"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_scalex"(IN "public"."raster") IS 'args: rast - Returns the X component of the pixel width in units of coordinate reference system.';

-- ----------------------------
--  Function structure for public.st_scaley("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_scaley"("public"."raster");
CREATE FUNCTION "public"."st_scaley"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getYScale'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_scaley"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_scaley"(IN "public"."raster") IS 'args: rast - Returns the Y component of the pixel height in units of coordinate reference system.';

-- ----------------------------
--  Function structure for public.st_skewx("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_skewx"("public"."raster");
CREATE FUNCTION "public"."st_skewx"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getXSkew'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_skewx"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_skewx"(IN "public"."raster") IS 'args: rast - Returns the georeference X skew (or rotation parameter).';

-- ----------------------------
--  Function structure for public.st_skewy("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_skewy"("public"."raster");
CREATE FUNCTION "public"."st_skewy"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getYSkew'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_skewy"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_skewy"(IN "public"."raster") IS 'args: rast - Returns the georeference Y skew (or rotation parameter).';

-- ----------------------------
--  Function structure for public.st_srid("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_srid"("public"."raster");
CREATE FUNCTION "public"."st_srid"(IN "public"."raster") RETURNS "int4" 
	AS '$libdir/rtpostgis-2.0','RASTER_getSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_srid"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_srid"(IN "public"."raster") IS 'args: rast - Returns the spatial reference identifier of the raster as defined in spatial_ref_sys table.';

-- ----------------------------
--  Function structure for public.st_upperleftx("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_upperleftx"("public"."raster");
CREATE FUNCTION "public"."st_upperleftx"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getXUpperLeft'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_upperleftx"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_upperleftx"(IN "public"."raster") IS 'args: rast - Returns the upper left X coordinate of raster in projected spatial ref.';

-- ----------------------------
--  Function structure for public.st_upperlefty("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_upperlefty"("public"."raster");
CREATE FUNCTION "public"."st_upperlefty"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getYUpperLeft'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_upperlefty"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_upperlefty"(IN "public"."raster") IS 'args: rast - Returns the upper left Y coordinate of raster in projected spatial ref.';

-- ----------------------------
--  Function structure for public.st_width("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_width"("public"."raster");
CREATE FUNCTION "public"."st_width"(IN "public"."raster") RETURNS "int4" 
	AS '$libdir/rtpostgis-2.0','RASTER_getWidth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_width"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_width"(IN "public"."raster") IS 'args: rast - Returns the width of the raster in pixels.';

-- ----------------------------
--  Function structure for public.st_pixelwidth("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelwidth"("public"."raster");
CREATE FUNCTION "public"."st_pixelwidth"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getPixelWidth'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelwidth"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_pixelwidth"(IN "public"."raster") IS 'args: rast - Returns the pixel width in geometric units of the spatial reference system.';

-- ----------------------------
--  Function structure for public.st_pixelheight("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelheight"("public"."raster");
CREATE FUNCTION "public"."st_pixelheight"(IN "public"."raster") RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getPixelHeight'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelheight"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_pixelheight"(IN "public"."raster") IS 'args: rast - Returns the pixel height in geometric units of the spatial reference system.';

-- ----------------------------
--  Function structure for public.st_geotransform("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_geotransform"("public"."raster");
CREATE FUNCTION "public"."st_geotransform"(IN "public"."raster", OUT imag float8, OUT jmag float8, OUT theta_i float8, OUT theta_ij float8, OUT xoffset float8, OUT yoffset float8) RETURNS "record" 
	AS '$libdir/rtpostgis-2.0','RASTER_getGeotransform'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_geotransform"(IN "public"."raster", OUT imag float8, OUT jmag float8, OUT theta_i float8, OUT theta_ij float8, OUT xoffset float8, OUT yoffset float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_rotation("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rotation"("public"."raster");
CREATE FUNCTION "public"."st_rotation"(IN "public"."raster") RETURNS "float8" 
	AS $BODY$ SELECT (ST_Geotransform($1)).theta_i $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_rotation"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rotation"(IN "public"."raster") IS 'args: rast - Returns the rotation of the raster in radian.';

-- ----------------------------
--  Function structure for public.st_metadata("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_metadata"("public"."raster");
CREATE FUNCTION "public"."st_metadata"(IN rast "public"."raster", OUT upperleftx float8, OUT upperlefty float8, OUT width int4, OUT height int4, OUT scalex float8, OUT scaley float8, OUT skewx float8, OUT skewy float8, OUT srid int4, OUT numbands int4) RETURNS "record" 
	AS '$libdir/rtpostgis-2.0','RASTER_metadata'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_metadata"(IN rast "public"."raster", OUT upperleftx float8, OUT upperlefty float8, OUT width int4, OUT height int4, OUT scalex float8, OUT scaley float8, OUT skewx float8, OUT skewy float8, OUT srid int4, OUT numbands int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_metadata"(IN rast "public"."raster", OUT upperleftx float8, OUT upperlefty float8, OUT width int4, OUT height int4, OUT scalex float8, OUT scaley float8, OUT skewx float8, OUT skewy float8, OUT srid int4, OUT numbands int4) IS 'args: rast - Returns basic meta data about a raster object such as pixel size, rotation (skew), upper, lower left, etc.';

-- ----------------------------
--  Function structure for public.st_makeemptyraster(int4, int4, float8, float8, float8, float8, float8, float8, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeemptyraster"(int4, int4, float8, float8, float8, float8, float8, float8, int4);
CREATE FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8, IN srid int4 DEFAULT 0) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_makeEmpty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8, IN srid int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN scalex float8, IN scaley float8, IN skewx float8, IN skewy float8, IN srid int4) IS 'args: width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).';

-- ----------------------------
--  Function structure for public.st_makeemptyraster(int4, int4, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeemptyraster"(int4, int4, float8, float8, float8);
CREATE FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN pixelsize float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_makeemptyraster($1, $2, $3, $4, $5, -($5), 0, 0, ST_SRID('POINT(0 0)'::geometry)) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN pixelsize float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makeemptyraster"(IN width int4, IN height int4, IN upperleftx float8, IN upperlefty float8, IN pixelsize float8) IS 'args: width, height, upperleftx, upperlefty, pixelsize - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).';

-- ----------------------------
--  Function structure for public.st_makeemptyraster("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_makeemptyraster"("public"."raster");
CREATE FUNCTION "public"."st_makeemptyraster"(IN rast "public"."raster") RETURNS "public"."raster" 
	AS $BODY$
		DECLARE
			w int;
			h int;
			ul_x double precision;
			ul_y double precision;
			scale_x double precision;
			scale_y double precision;
			skew_x double precision;
			skew_y double precision;
			sr_id int;
		BEGIN
			SELECT width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM ST_Metadata(rast);
			RETURN st_makeemptyraster(w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id);
		END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_makeemptyraster"(IN rast "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_makeemptyraster"(IN rast "public"."raster") IS 'args: rast - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", int4, text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", int4, text, float8, float8);
CREATE FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN pixeltype text, IN initialvalue float8 DEFAULT 0::numeric, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_addband'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN pixeltype text, IN initialvalue float8, IN nodataval float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_addband"(IN rast "public"."raster", IN "index" int4, IN pixeltype text, IN initialvalue float8, IN nodataval float8) IS 'args: rast, index, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", text, float8, float8);
CREATE FUNCTION "public"."st_addband"(IN rast "public"."raster", IN pixeltype text, IN initialvalue float8 DEFAULT 0::numeric, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$select st_addband($1, NULL, $2, $3, $4)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN rast "public"."raster", IN pixeltype text, IN initialvalue float8, IN nodataval float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_addband"(IN rast "public"."raster", IN pixeltype text, IN initialvalue float8, IN nodataval float8) IS 'args: rast, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", "public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", "public"."raster", int4, int4);
CREATE FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrast "public"."raster", IN fromband int4 DEFAULT 1, IN torastindex int4 DEFAULT NULL::integer) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_copyband'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrast "public"."raster", IN fromband int4, IN torastindex int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrast "public"."raster", IN fromband int4, IN torastindex int4) IS 'args: torast, fromrast, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_addband("public"."raster", "public"."_raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_addband"("public"."raster", "public"."_raster", int4);
CREATE FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrasts "public"."_raster", IN fromband int4 DEFAULT 1) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE var_result raster := torast;
		var_num integer := array_upper(fromrasts,1);
		var_i integer := 1; 
	BEGIN 
		IF torast IS NULL AND var_num > 0 THEN
			var_result := ST_Band(fromrasts[1],fromband); 
			var_i := 2;
		END IF;
		WHILE var_i <= var_num LOOP
			var_result := ST_AddBand(var_result, fromrasts[var_i], 1);
			var_i := var_i + 1;
		END LOOP;
		
		RETURN var_result;
	END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrasts "public"."_raster", IN fromband int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_addband"(IN torast "public"."raster", IN fromrasts "public"."_raster", IN fromband int4) IS 'args: torast, fromrasts, fromband=1 - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.';

-- ----------------------------
--  Function structure for public.st_band("public"."raster", _int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_band"("public"."raster", _int4);
CREATE FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands _int4 DEFAULT ARRAY[1]) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_band'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands _int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands _int4) IS 'args: rast, nbands = ARRAY[1] - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.';

-- ----------------------------
--  Function structure for public.st_band("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_band"("public"."raster", int4);
CREATE FUNCTION "public"."st_band"(IN rast "public"."raster", IN nband int4) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_band($1, ARRAY[$2]) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_band"(IN rast "public"."raster", IN nband int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_band"(IN rast "public"."raster", IN nband int4) IS 'args: rast, nband - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.';

-- ----------------------------
--  Function structure for public.types_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."types_are"(name, _name);
CREATE FUNCTION "public"."types_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, 'Schema ' || quote_ident($1) || ' should have the correct types', NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."types_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_band("public"."raster", text, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_band"("public"."raster", text, bpchar);
CREATE FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands text, IN "delimiter" bpchar DEFAULT ','::bpchar) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_band($1, regexp_split_to_array(regexp_replace($2, '[[:space:]]', '', 'g'), $3)::int[]) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands text, IN "delimiter" bpchar) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_band"(IN rast "public"."raster", IN nbands text, IN "delimiter" bpchar) IS 'args: rast, nbands, delimiter=, - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.';

-- ----------------------------
--  Function structure for public._st_summarystats("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_summarystats"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."_st_summarystats"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1) RETURNS "public"."summarystats" 
	AS '$libdir/rtpostgis-2.0','RASTER_summaryStats'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_summarystats"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_summarystats("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summarystats"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool) IS 'args: rast, nband, exclude_nodata_value - Returns summary stats consisting of count,sum,mean,stddev,min,max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.';

-- ----------------------------
--  Function structure for public.st_summarystats("public"."raster", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summarystats"("public"."raster", bool);
CREATE FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN exclude_nodata_value bool) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, 1, $2, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN exclude_nodata_value bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_summarystats"(IN rast "public"."raster", IN exclude_nodata_value bool) IS 'args: rast, exclude_nodata_value - Returns summary stats consisting of count,sum,mean,stddev,min,max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.';

-- ----------------------------
--  Function structure for public.st_approxsummarystats("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxsummarystats("public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"("public"."raster", int4, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN nband int4, IN sample_percent float8) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, TRUE, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN nband int4, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxsummarystats("public"."raster", bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"("public"."raster", bool, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN exclude_nodata_value bool, IN sample_percent float8 DEFAULT 0.1) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxsummarystats("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"("public"."raster", float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN sample_percent float8) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, 1, TRUE, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rast "public"."raster", IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_summarystats(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_summarystats"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."_st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1) RETURNS "public"."summarystats" 
	AS '$libdir/rtpostgis-2.0','RASTER_summaryStatsCoverage'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_summarystats(text, text, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summarystats"(text, text, int4, bool);
CREATE FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, $4, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns summary stats consisting of count,sum,mean,stddev,min,max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.';

-- ----------------------------
--  Function structure for public.st_summarystats(text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_summarystats"(text, text, bool);
CREATE FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, 1, $3, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_summarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) IS 'args: rastertable, rastercolumn, exclude_nodata_value - Returns summary stats consisting of count,sum,mean,stddev,min,max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.';

-- ----------------------------
--  Function structure for public.st_approxsummarystats(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxsummarystats(text, text, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"(text, text, int4, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, $3, TRUE, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxsummarystats(text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"(text, text, bool);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, 1, $3, 0.1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.types_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."types_are"(_name, text);
CREATE FUNCTION "public"."types_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."types_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxsummarystats(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxsummarystats"(text, text, float8);
CREATE FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN sample_percent float8) RETURNS "public"."summarystats" 
	AS $BODY$ SELECT _st_summarystats($1, $2, 1, TRUE, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxsummarystats"(IN rastertable text, IN rastercolumn text, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_count("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_count"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."_st_count"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1) RETURNS "int8" 
	AS $BODY$
	DECLARE
		rtn bigint;
	BEGIN
		IF exclude_nodata_value IS FALSE THEN
			SELECT width * height INTO rtn FROM ST_Metadata(rast);
		ELSE
			SELECT count INTO rtn FROM _st_summarystats($1, $2, $3, $4);
		END IF;

		RETURN rtn;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_count"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_count("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_count"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_count"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_count"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_count"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool) IS 'args: rast, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.';

-- ----------------------------
--  Function structure for public.st_count("public"."raster", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_count"("public"."raster", bool);
CREATE FUNCTION "public"."st_count"(IN rast "public"."raster", IN exclude_nodata_value bool) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, 1, $2, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_count"(IN rast "public"."raster", IN exclude_nodata_value bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_count"(IN rast "public"."raster", IN exclude_nodata_value bool) IS 'args: rast, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.';

-- ----------------------------
--  Function structure for public.st_approxcount("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxcount("public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"("public"."raster", int4, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN nband int4, IN sample_percent float8) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, TRUE, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN nband int4, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxcount("public"."raster", bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"("public"."raster", bool, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN exclude_nodata_value bool, IN sample_percent float8 DEFAULT 0.1) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxcount("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"("public"."raster", float8);
CREATE FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN sample_percent float8) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, 1, TRUE, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rast "public"."raster", IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_count(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_count"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."_st_count"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1) RETURNS "int8" 
	AS $BODY$
	DECLARE
		curs refcursor;

		ctable text;
		ccolumn text;
		rast raster;
		stats summarystats;

		rtn bigint;
		tmp bigint;
	BEGIN
		-- nband
		IF nband < 1 THEN
			RAISE WARNING 'Invalid band index (must use 1-based). Returning NULL';
			RETURN NULL;
		END IF;

		-- sample percent
		IF sample_percent < 0 OR sample_percent > 1 THEN
			RAISE WARNING 'Invalid sample percentage (must be between 0 and 1). Returning NULL';
			RETURN NULL;
		END IF;

		-- exclude_nodata_value IS TRUE
		IF exclude_nodata_value IS TRUE THEN
			SELECT count INTO rtn FROM _st_summarystats($1, $2, $3, $4, $5);
			RETURN rtn;
		END IF;

		-- clean rastertable and rastercolumn
		ctable := quote_ident(rastertable);
		ccolumn := quote_ident(rastercolumn);

		BEGIN
			OPEN curs FOR EXECUTE 'SELECT '
					|| ccolumn
					|| ' FROM '
					|| ctable
					|| ' WHERE '
					|| ccolumn
					|| ' IS NOT NULL';
		EXCEPTION
			WHEN OTHERS THEN
				RAISE WARNING 'Invalid table or column name. Returning NULL';
				RETURN NULL;
		END;

		rtn := 0;
		LOOP
			FETCH curs INTO rast;
			EXIT WHEN NOT FOUND;

			SELECT (width * height) INTO tmp FROM ST_Metadata(rast);
			rtn := rtn + tmp;
		END LOOP;

		CLOSE curs;

		RETURN rtn;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_count"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_count(text, text, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_count"(text, text, int4, bool);
CREATE FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, $4, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.';

-- ----------------------------
--  Function structure for public.st_count(text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_count"(text, text, bool);
CREATE FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, 1, $3, 1) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_count"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool) IS 'args: rastertable, rastercolumn, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.';

-- ----------------------------
--  Function structure for public.st_approxcount(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxcount(text, text, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"(text, text, int4, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, $3, TRUE, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxcount(text, text, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"(text, text, bool, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN sample_percent float8 DEFAULT 0.1) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, 1, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxcount(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxcount"(text, text, float8);
CREATE FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN sample_percent float8) RETURNS "int8" 
	AS $BODY$ SELECT _st_count($1, $2, 1, TRUE, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxcount"(IN rastertable text, IN rastercolumn text, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_histogram("public"."raster", int4, bool, float8, int4, _float8, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_histogram"("public"."raster", int4, bool, float8, int4, _float8, bool, float8, float8);
CREATE FUNCTION "public"."_st_histogram"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false, IN "min" float8 DEFAULT NULL::double precision, IN "max" float8 DEFAULT NULL::double precision) RETURNS SETOF "public"."histogram" 
	AS '$libdir/rtpostgis-2.0','RASTER_histogram'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool, IN "min" float8, IN "max" float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_histogram("public"."raster", int4, bool, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"("public"."raster", int4, bool, int4, _float8, bool);
CREATE FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, 1, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN width _float8, IN "right" bool) IS 'args: rast, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram("public"."raster", int4, bool, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"("public"."raster", int4, bool, int4, bool);
CREATE FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, 1, $4, NULL, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool) IS 'args: rast, nband, exclude_nodata_value, bins, right - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram("public"."raster", int4, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"("public"."raster", int4, int4, _float8, bool);
CREATE FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, 1, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN width _float8, IN "right" bool) IS 'args: rast, nband, bins, width=NULL, right=false - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram("public"."raster", int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"("public"."raster", int4, int4, bool);
CREATE FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN "right" bool) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, 1, $3, NULL, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN "right" bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_histogram"(IN rast "public"."raster", IN nband int4, IN bins int4, IN "right" bool) IS 'args: rast, nband, bins, right - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, bool, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, bool, float8, int4, _float8, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, $4, $5, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, bool, float8, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, bool, float8, int4, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN "right" bool) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, $4, $5, NULL, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, float8);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, 0, NULL, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", float8);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN sample_percent float8) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, 1, TRUE, $2, 0, NULL, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.types_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."types_are"(name, _name, text);
CREATE FUNCTION "public"."types_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, $3, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."types_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.unalike(anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."unalike"(anyelement, text);
CREATE FUNCTION "public"."unalike"(IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _unalike( $1 !~~ $2, $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."unalike"(IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, float8, int4, _float8, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN bins int4, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram("public"."raster", int4, float8, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"("public"."raster", int4, float8, int4, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN bins int4, IN "right" bool) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, $4, NULL, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN bins int4, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_histogram(text, text, int4, bool, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_histogram"(text, text, int4, bool, float8, int4, _float8, bool);
CREATE FUNCTION "public"."_st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS '$libdir/rtpostgis-2.0','RASTER_histogramCoverage'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_histogram(text, text, int4, bool, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"(text, text, int4, bool, int4, _float8, bool);
CREATE FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, $4, 1, $5, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN width _float8, IN "right" bool) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram(text, text, int4, bool, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"(text, text, int4, bool, int4, bool);
CREATE FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, $4, 1, $5, NULL, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN bins int4, IN "right" bool) IS 'args: rastertable, rastercolumn, nband, exclude_nodata_value, bins, right - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram(text, text, int4, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"(text, text, int4, int4, _float8, bool);
CREATE FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, 1, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN width _float8, IN "right" bool) IS 'args: rastertable, rastercolumn, nband=1, bins, width=NULL, right=false - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_histogram(text, text, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_histogram"(text, text, int4, int4, bool);
CREATE FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN "right" bool) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, 1, $4, NULL, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN "right" bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_histogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN bins int4, IN "right" bool) IS 'args: rastertable, rastercolumn, nband, bins, right - Returns a set of histogram summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.';

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, bool, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, bool, float8, int4, _float8, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, IN bins int4 DEFAULT 0, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, $4, $5, $6, $7, $8) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, bool, float8, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, bool, float8, int4, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN "right" bool) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, $4, $5, $6, NULL, $7) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN bins int4, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, float8);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, $4, 0, NULL, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, float8);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN sample_percent float8) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, 1, TRUE, $3, 0, NULL, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN sample_percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, float8, int4, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, float8, int4, _float8, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN bins int4, IN width _float8 DEFAULT NULL::double precision[], IN "right" bool DEFAULT false) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, $4, $5, $6, $7) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN bins int4, IN width _float8, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxhistogram(text, text, int4, float8, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxhistogram"(text, text, int4, float8, int4, bool);
CREATE FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN bins int4, IN "right" bool) RETURNS SETOF "public"."histogram" 
	AS $BODY$ SELECT _st_histogram($1, $2, $3, TRUE, $4, $5, NULL, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxhistogram"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN bins int4, IN "right" bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_quantile("public"."raster", int4, bool, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_quantile"("public"."raster", int4, bool, float8, _float8);
CREATE FUNCTION "public"."_st_quantile"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS '$libdir/rtpostgis-2.0','RASTER_quantile'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", int4, bool, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", int4, bool, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, 1, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantiles _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantiles _float8) IS 'args: rast, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", int4, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", int4, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantiles _float8) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, TRUE, 1, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantiles _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantiles _float8) IS 'args: rast, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", _float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantiles _float8) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, 1, TRUE, 1, $2) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantiles _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantiles _float8) IS 'args: rast, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", int4, bool, float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, 1, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantile float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN quantile float8) IS 'args: rast, nband, exclude_nodata_value, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", int4, float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, TRUE, 1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantile float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN nband int4, IN quantile float8) IS 'args: rast, nband, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", bool, float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8 DEFAULT NULL::double precision) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, $2, 1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8) IS 'args: rast, exclude_nodata_value, quantile=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"("public"."raster", float8);
CREATE FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, TRUE, 1, ARRAY[$2]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantile float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rast "public"."raster", IN quantile float8) IS 'args: rast, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", int4, bool, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", int4, bool, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", int4, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", int4, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN sample_percent float8, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, 1, TRUE, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN sample_percent float8, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN quantiles _float8) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, 1, TRUE, 0.1, $2) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", int4, bool, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, $4, ARRAY[$5]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", int4, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, TRUE, $3, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN nband int4, IN sample_percent float8, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, TRUE, $2, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN sample_percent float8, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", bool, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8 DEFAULT NULL::double precision) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, $2, 0.1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN exclude_nodata_value bool, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.unalike(anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."unalike"(anyelement, text, text);
CREATE FUNCTION "public"."unalike"(IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _unalike( $1 !~~ $2, $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."unalike"(IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"("public"."raster", float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, 1, TRUE, 0.1, ARRAY[$2]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rast "public"."raster", IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_quantile(text, text, int4, bool, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_quantile"(text, text, int4, bool, float8, _float8);
CREATE FUNCTION "public"."_st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 1, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS '$libdir/rtpostgis-2.0','RASTER_quantileCoverage'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, int4, bool, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, int4, bool, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, $4, 1, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN quantiles _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN quantiles _float8) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile(text, text, int4, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, int4, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantiles _float8) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, TRUE, 1, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantiles _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantiles _float8) IS 'args: rastertable, rastercolumn, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.';

-- ----------------------------
--  Function structure for public.st_quantile(text, text, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, _float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN quantiles _float8) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, 1, TRUE, 1, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, int4, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, int4, bool, float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, $4, 1, ARRAY[$5]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, int4, float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, TRUE, 1, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, bool, float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN quantile float8 DEFAULT NULL::double precision) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, $3, 1, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_quantile(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_quantile"(text, text, float8);
CREATE FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, TRUE, 1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_quantile"(IN rastertable text, IN rastercolumn text, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, int4, bool, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, int4, bool, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN sample_percent float8 DEFAULT 0.1, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, int4, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, int4, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, $3, TRUE, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, float8, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, float8, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, IN quantiles _float8 DEFAULT NULL::double precision[]) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, 1, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, _float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN quantiles _float8) RETURNS SETOF "public"."quantile" 
	AS $BODY$ SELECT _st_quantile($1, $2, 1, TRUE, 0.1, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN quantiles _float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, int4, bool, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, $4, $5, ARRAY[$6]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN sample_percent float8, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, int4, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, $3, TRUE, $4, ARRAY[$5]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN nband int4, IN sample_percent float8, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, float8, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, TRUE, $3, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN sample_percent float8, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.unialike(anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."unialike"(anyelement, text);
CREATE FUNCTION "public"."unialike"(IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _unalike( $1 !~~* $2, $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."unialike"(IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, bool, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, bool, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN quantile float8 DEFAULT NULL::double precision) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, $3, 0.1, ARRAY[$4]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN exclude_nodata_value bool, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_approxquantile(text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_approxquantile"(text, text, float8);
CREATE FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN quantile float8) RETURNS "float8" 
	AS $BODY$ SELECT (_st_quantile($1, $2, 1, TRUE, 0.1, ARRAY[$3]::double precision[])).value $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_approxquantile"(IN rastertable text, IN rastercolumn text, IN quantile float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_valuecount("public"."raster", int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_valuecount"("public"."raster", int4, bool, _float8, float8);
CREATE FUNCTION "public"."_st_valuecount"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0) RETURNS SETOF "public"."valuecount" 
	AS '$libdir/rtpostgis-2.0','RASTER_valueCount'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", int4, bool, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rast, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", int4, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", int4, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rast, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, 1, TRUE, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rast, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", int4, bool, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) IS 'args: rast, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", int4, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8) IS 'args: rast, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8) IS 'args: rast, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", int4, bool, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.unialike(anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."unialike"(anyelement, text, text);
CREATE FUNCTION "public"."unialike"(IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _unalike( $1 !~~* $2, $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."unialike"(IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", int4, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", int4, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, 1, TRUE, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", int4, bool, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", int4, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN nband int4, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rast "public"."raster", IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_valuecount(text, text, int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_valuecount"(text, text, int4, bool, _float8, float8);
CREATE FUNCTION "public"."_st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0) RETURNS SETOF "public"."valuecount" 
	AS '$libdir/rtpostgis-2.0','RASTER_valueCountCoverage'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, int4, bool, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, int4, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, int4, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, $3, TRUE, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rastertable, rastercolumn, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, _float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT "count" int4) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, count FROM _st_valuecount($1, $2, 1, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT "count" int4) IS 'args: rastertable, rastercolumn, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, int4, bool, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) IS 'args: rastertable, rastercolumn, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, int4, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8) IS 'args: rastertable, rastercolumn, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuecount(text, text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuecount"(text, text, float8, float8);
CREATE FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "int4" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).count $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_valuecount"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8) IS 'args: rastertable, rastercolumn, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.';

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, int4, bool, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, int4, bool, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4 DEFAULT 1, IN exclude_nodata_value bool DEFAULT true, IN searchvalues _float8 DEFAULT NULL::double precision[], IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, $3, $4, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, int4, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, int4, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, $3, TRUE, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, _float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, _float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8 DEFAULT 0, OUT "value" float8, OUT percent float8) RETURNS SETOF "record" 
	AS $BODY$ SELECT value, percent FROM _st_valuecount($1, $2, 1, TRUE, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN searchvalues _float8, IN roundto float8, OUT "value" float8, OUT percent float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, int4, bool, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, int4, bool, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN exclude_nodata_value bool, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, int4, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, int4, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN nband int4, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_valuepercent(text, text, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_valuepercent"(text, text, float8, float8);
CREATE FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8 DEFAULT 0) RETURNS "float8" 
	AS $BODY$ SELECT (_st_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).percent $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_valuepercent"(IN rastertable text, IN rastercolumn text, IN searchvalue float8, IN roundto float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_reclass("public"."raster", "public"."_reclassarg")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_reclass"("public"."raster", "public"."_reclassarg");
CREATE FUNCTION "public"."_st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_reclass'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_reclass("public"."raster", "public"."_reclassarg")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reclass"("public"."raster", "public"."_reclassarg");
CREATE FUNCTION "public"."st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		i int;
		expr text;
	BEGIN
		-- for each reclassarg, validate elements as all except nodataval cannot be NULL
		FOR i IN SELECT * FROM generate_subscripts($2, 1) LOOP
			IF $2[i].nband IS NULL OR $2[i].reclassexpr IS NULL OR $2[i].pixeltype IS NULL THEN
				RAISE WARNING 'Values are required for the nband, reclassexpr and pixeltype attributes.';
				RETURN rast;
			END IF;
		END LOOP;

		RETURN _st_reclass($1, VARIADIC $2);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_reclass"(IN rast "public"."raster", INOUT reclassargset "public"."_reclassarg") IS 'args: rast, VARIADIC reclassargset - Creates a new raster composed of band types reclassified from original. The nband is the band to be changed. If nband is not specified assumed to be 1. All other bands are returned unchanged. Use case: convert a 16BUI band to a 8BUI and so forth for simpler rendering as viewable formats.';

-- ----------------------------
--  Function structure for public.st_reclass("public"."raster", int4, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reclass"("public"."raster", int4, text, text, float8);
CREATE FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN nband int4, IN reclassexpr text, IN pixeltype text, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_reclass($1, ROW($2, $3, $4, $5)) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN nband int4, IN reclassexpr text, IN pixeltype text, IN nodataval float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN nband int4, IN reclassexpr text, IN pixeltype text, IN nodataval float8) IS 'args: rast, nband, reclassexpr, pixeltype, nodataval=NULL - Creates a new raster composed of band types reclassified from original. The nband is the band to be changed. If nband is not specified assumed to be 1. All other bands are returned unchanged. Use case: convert a 16BUI band to a 8BUI and so forth for simpler rendering as viewable formats.';

-- ----------------------------
--  Function structure for public.st_reclass("public"."raster", text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reclass"("public"."raster", text, text);
CREATE FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN reclassexpr text, IN pixeltype text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_reclass($1, ROW(1, $2, $3, NULL)) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN reclassexpr text, IN pixeltype text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_reclass"(IN rast "public"."raster", IN reclassexpr text, IN pixeltype text) IS 'args: rast, reclassexpr, pixeltype - Creates a new raster composed of band types reclassified from original. The nband is the band to be changed. If nband is not specified assumed to be 1. All other bands are returned unchanged. Use case: convert a 16BUI band to a 8BUI and so forth for simpler rendering as viewable formats.';

-- ----------------------------
--  Function structure for public.st_gdaldrivers()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_gdaldrivers"();
CREATE FUNCTION "public"."st_gdaldrivers"(OUT idx int4, OUT short_name text, OUT long_name text, OUT create_options text) RETURNS SETOF "record" 
	AS '$libdir/rtpostgis-2.0','RASTER_getGDALDrivers'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_gdaldrivers"(OUT idx int4, OUT short_name text, OUT long_name text, OUT create_options text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_gdaldrivers"(OUT idx int4, OUT short_name text, OUT long_name text, OUT create_options text) IS 'args: OUT idx, OUT short_name, OUT long_name, OUT create_options - Returns a list of raster formats supported by your lib gdal. These are the formats you can output your raster using ST_AsGDALRaster.';

-- ----------------------------
--  Function structure for public.st_asgdalraster("public"."raster", text, _text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asgdalraster"("public"."raster", text, _text, int4);
CREATE FUNCTION "public"."st_asgdalraster"(IN rast "public"."raster", IN format text, IN "options" _text DEFAULT NULL::text[], IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS '$libdir/rtpostgis-2.0','RASTER_asGDALRaster'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asgdalraster"(IN rast "public"."raster", IN format text, IN "options" _text, IN srid int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asgdalraster"(IN rast "public"."raster", IN format text, IN "options" _text, IN srid int4) IS 'args: rast, format, options=NULL, srid=sameassource - Return the raster tile in the designated GDAL Raster format. Raster formats are one of those supported by your compiled library. Use ST_GDALRasters() to get a list of formats supported by your library.';

-- ----------------------------
--  Function structure for public.st_astiff("public"."raster", _text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astiff"("public"."raster", _text, int4);
CREATE FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN "options" _text DEFAULT NULL::text[], IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		i int;
		num_bands int;
		nodata double precision;
		last_nodata double precision;
	BEGIN
		num_bands := st_numbands($1);

		-- TIFF only allows one NODATA value for ALL bands
		FOR i IN 1..num_bands LOOP
			nodata := st_bandnodatavalue($1, i);
			IF last_nodata IS NULL THEN
				last_nodata := nodata;
			ELSEIF nodata != last_nodata THEN
				RAISE NOTICE 'The TIFF format only permits one NODATA value for all bands.  The value used will be the last band with a NODATA value.';
			END IF;
		END LOOP;

		RETURN st_asgdalraster($1, 'GTiff', $2, $3);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN "options" _text, IN srid int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN "options" _text, IN srid int4) IS 'args: rast, options='', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.';

-- ----------------------------
--  Function structure for public.st_astiff("public"."raster", _int4, _text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astiff"("public"."raster", _int4, _text, int4);
CREATE FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN "options" _text DEFAULT NULL::text[], IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS $BODY$ SELECT st_astiff(st_band($1, $2), $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN "options" _text, IN srid int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN "options" _text, IN srid int4) IS 'args: rast, nbands, options, srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.';

-- ----------------------------
--  Function structure for public.st_astiff("public"."raster", text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astiff"("public"."raster", text, int4);
CREATE FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN compression text, IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		compression2 text;
		c_type text;
		c_level int;
		i int;
		num_bands int;
		options text[];
	BEGIN
		compression2 := trim(both from upper(compression));

		IF length(compression2) > 0 THEN
			-- JPEG
			IF position('JPEG' in compression2) != 0 THEN
				c_type := 'JPEG';
				c_level := substring(compression2 from '[0-9]+$');

				IF c_level IS NOT NULL THEN
					IF c_level > 100 THEN
						c_level := 100;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;

					options := array_append(options, 'JPEG_QUALITY=' || c_level);
				END IF;

				-- per band pixel type check
				num_bands := st_numbands($1);
				FOR i IN 1..num_bands LOOP
					IF st_bandpixeltype($1, i) != '8BUI' THEN
						RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  JPEG compression can only be used with the 8BUI pixel type.', i;
					END IF;
				END LOOP;

			-- DEFLATE
			ELSEIF position('DEFLATE' in compression2) != 0 THEN
				c_type := 'DEFLATE';
				c_level := substring(compression2 from '[0-9]+$');

				IF c_level IS NOT NULL THEN
					IF c_level > 9 THEN
						c_level := 9;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;

					options := array_append(options, 'ZLEVEL=' || c_level);
				END IF;

			ELSE
				c_type := compression2;

				-- CCITT
				IF position('CCITT' in compression2) THEN
					-- per band pixel type check
					num_bands := st_numbands($1);
					FOR i IN 1..num_bands LOOP
						IF st_bandpixeltype($1, i) != '1BB' THEN
							RAISE EXCEPTION 'The pixel type of band % in the raster is not 1BB.  CCITT compression can only be used with the 1BB pixel type.', i;
						END IF;
					END LOOP;
				END IF;

			END IF;

			-- compression type check
			IF ARRAY[c_type] <@ ARRAY['JPEG', 'LZW', 'PACKBITS', 'DEFLATE', 'CCITTRLE', 'CCITTFAX3', 'CCITTFAX4', 'NONE'] THEN
				options := array_append(options, 'COMPRESS=' || c_type);
			ELSE
				RAISE NOTICE 'Unknown compression type: %.  The outputted TIFF will not be COMPRESSED.', c_type;
			END IF;
		END IF;

		RETURN st_astiff($1, options, $3);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN compression text, IN srid int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN compression text, IN srid int4) IS 'args: rast, compression='', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.';

-- ----------------------------
--  Function structure for public.st_astiff("public"."raster", _int4, text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_astiff"("public"."raster", _int4, text, int4);
CREATE FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN compression text, IN srid int4 DEFAULT NULL::integer) RETURNS "bytea" 
	AS $BODY$ SELECT st_astiff(st_band($1, $2), $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN compression text, IN srid int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_astiff"(IN rast "public"."raster", IN nbands _int4, IN compression text, IN srid int4) IS 'args: rast, nbands, compression='', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", _text);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
	BEGIN
		num_bands := st_numbands($1);

		-- JPEG allows 1 or 3 bands
		IF num_bands <> 1 AND num_bands <> 3 THEN
			RAISE NOTICE 'The JPEG format only permits one or three bands.  The first band will be used.';
			rast2 := st_band(rast, ARRAY[1]);
			num_bands := st_numbands(rast);
		ELSE
			rast2 := rast;
		END IF;

		-- JPEG only supports 8BUI pixeltype
		FOR i IN 1..num_bands LOOP
			IF st_bandpixeltype(rast, i) != '8BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  The JPEG format can only be used with the 8BUI pixel type.', i;
			END IF;
		END LOOP;

		RETURN st_asgdalraster(rast2, 'JPEG', $2, NULL);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN "options" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN "options" _text) IS 'args: rast, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", _int4, _text);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$ SELECT st_asjpeg(st_band($1, $2), $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN "options" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN "options" _text) IS 'args: rast, nbands, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", _int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", _int4, int4);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN quality int4) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		quality2 int;
		options text[];
	BEGIN
		IF quality IS NOT NULL THEN
			IF quality > 100 THEN
				quality2 := 100;
			ELSEIF quality < 10 THEN
				quality2 := 10;
			ELSE
				quality2 := quality;
			END IF;

			options := array_append(options, 'QUALITY=' || quality2);
		END IF;

		RETURN st_asjpeg(st_band($1, $2), options);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN quality int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nbands _int4, IN quality int4) IS 'args: rast, nbands, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", int4, _text);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$ SELECT st_asjpeg(st_band($1, $2), $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN "options" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN "options" _text) IS 'args: rast, nband, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_asjpeg("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asjpeg"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN quality int4) RETURNS "bytea" 
	AS $BODY$ SELECT st_asjpeg($1, ARRAY[$2], $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN quality int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asjpeg"(IN rast "public"."raster", IN nband int4, IN quality int4) IS 'args: rast, nband, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", _text);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
		pt text;
	BEGIN
		num_bands := st_numbands($1);

		-- PNG allows 1, 3 or 4 bands
		IF num_bands <> 1 AND num_bands <> 3 AND num_bands <> 4 THEN
			RAISE NOTICE 'The PNG format only permits one, three or four bands.  The first band will be used.';
			rast2 := st_band($1, ARRAY[1]);
			num_bands := st_numbands(rast2);
		ELSE
			rast2 := rast;
		END IF;

		-- PNG only supports 8BUI and 16BUI pixeltype
		FOR i IN 1..num_bands LOOP
			pt = st_bandpixeltype(rast, i);
			IF pt != '8BUI' AND pt != '16BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI or 16BUI.  The PNG format can only be used with 8BUI and 16BUI pixel types.', i;
			END IF;
		END LOOP;

		RETURN st_asgdalraster(rast2, 'PNG', $2, NULL);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN "options" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN "options" _text) IS 'args: rast, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", _int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", _int4, _text);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$ SELECT st_aspng(st_band($1, $2), $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN "options" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN "options" _text) IS 'args: rast, nbands, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", _int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", _int4, int4);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN compression int4) RETURNS "bytea" 
	AS $BODY$
	DECLARE
		compression2 int;
		options text[];
	BEGIN
		IF compression IS NOT NULL THEN
			IF compression > 9 THEN
				compression2 := 9;
			ELSEIF compression < 1 THEN
				compression2 := 1;
			ELSE
				compression2 := compression;
			END IF;

			options := array_append(options, 'ZLEVEL=' || compression2);
		END IF;

		RETURN st_aspng(st_band($1, $2), options);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN compression int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nbands _int4, IN compression int4) IS 'args: rast, nbands, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", int4, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", int4, _text);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN "options" _text DEFAULT NULL::text[]) RETURNS "bytea" 
	AS $BODY$ SELECT st_aspng(st_band($1, $2), $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN "options" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN "options" _text) IS 'args: rast, nband, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public.st_aspng("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspng"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN compression int4) RETURNS "bytea" 
	AS $BODY$ SELECT st_aspng($1, ARRAY[$2], $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN compression int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_aspng"(IN rast "public"."raster", IN nband int4, IN compression int4) IS 'args: rast, nband, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.';

-- ----------------------------
--  Function structure for public._st_asraster("public"."geometry", float8, float8, int4, int4, _text, _float8, _float8, float8, float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_asraster"("public"."geometry", float8, float8, int4, int4, _text, _float8, _float8, float8, float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."_st_asraster"(IN geom "public"."geometry", IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0, IN width int4 DEFAULT 0, IN height int4 DEFAULT 0, IN pixeltype _text DEFAULT ARRAY['8BUI'::text], IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_asRaster'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN width int4, IN height int4, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", float8, float8, float8, float8, _text, _float8, _float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", float8, float8, float8, float8, _text, _float8, _float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN pixeltype _text DEFAULT ARRAY['8BUI'::text], IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, $2, $3, NULL, NULL, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, scalex, scaley, gridx=NULL, gridy=NULL, pixeltype=ARRAY[''8BUI''], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", float8, float8, _text, _float8, _float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", float8, float8, _text, _float8, _float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype _text, IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, $2, $3, NULL, NULL, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, scalex, scaley, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", int4, int4, float8, float8, _text, _float8, _float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", int4, int4, float8, float8, _text, _float8, _float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN pixeltype _text DEFAULT ARRAY['8BUI'::text], IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, NULL, NULL, $2, $3, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, width, height, gridx=NULL, gridy=NULL, pixeltype=ARRAY[''8BUI''], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", int4, int4, _text, _float8, _float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", int4, int4, _text, _float8, _float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype _text, IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, NULL, NULL, $2, $3, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, width, height, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", float8, float8, float8, float8, text, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", float8, float8, float8, float8, text, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, $2, $3, NULL, NULL, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, scalex, scaley, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", float8, float8, text, float8, float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", float8, float8, text, float8, float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, $2, $3, NULL, NULL, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN scalex float8, IN scaley float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, scalex, scaley, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", int4, int4, float8, float8, text, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", int4, int4, float8, float8, text, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, NULL, NULL, $2, $3, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN gridx float8, IN gridy float8, IN pixeltype text, IN "value" float8, IN nodataval float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, width, height, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", int4, int4, text, float8, float8, float8, float8, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", int4, int4, text, float8, float8, float8, float8, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN upperleftx float8 DEFAULT NULL::double precision, IN upperlefty float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_asraster($1, NULL, NULL, $2, $3, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL,$9, $10, $11) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype text, IN "value" float8, IN nodataval float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN width int4, IN height int4, IN pixeltype text, IN "value" float8, IN nodataval float8, IN upperleftx float8, IN upperlefty float8, IN skewx float8, IN skewy float8, IN touched bool) IS 'args: geom, width, height, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", "public"."raster", _text, _float8, _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", "public"."raster", _text, _float8, _float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype _text DEFAULT ARRAY['8BUI'::text], IN "value" _float8 DEFAULT ARRAY[(1)::double precision], IN nodataval _float8 DEFAULT ARRAY[(0)::double precision], IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		g geometry;
		g_srid integer;

		ul_x double precision;
		ul_y double precision;
		scale_x double precision;
		scale_y double precision;
		skew_x double precision;
		skew_y double precision;
		sr_id integer;
	BEGIN
		SELECT upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM ST_Metadata(ref);
		--RAISE NOTICE '%, %, %, %, %, %, %', ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id;

		-- geometry and raster has different SRID
		g_srid := ST_SRID(geom);
		IF g_srid != sr_id THEN
			RAISE NOTICE 'The geometry''s SRID (%) is not the same as the raster''s SRID (%).  The geometry will be transformed to the raster''s projection', g_srid, sr_id;
			g := ST_Transform(geom, sr_id);
		ELSE
			g := geom;
		END IF;

		RETURN _st_asraster(g, scale_x, scale_y, NULL, NULL, $3, $4, $5, NULL, NULL, ul_x, ul_y, skew_x, skew_y, $6);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype _text, IN "value" _float8, IN nodataval _float8, IN touched bool) IS 'args: geom, ref, pixeltype=ARRAY[''8BUI''], value=ARRAY[1], nodataval=ARRAY[0], touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public.st_asraster("public"."geometry", "public"."raster", text, float8, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asraster"("public"."geometry", "public"."raster", text, float8, float8, bool);
CREATE FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype text, IN "value" float8 DEFAULT 1, IN nodataval float8 DEFAULT 0, IN touched bool DEFAULT false) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_asraster($1, $2, ARRAY[$3]::text[], ARRAY[$4]::double precision[], ARRAY[$5]::double precision[], $6) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype text, IN "value" float8, IN nodataval float8, IN touched bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asraster"(IN geom "public"."geometry", IN "ref" "public"."raster", IN pixeltype text, IN "value" float8, IN nodataval float8, IN touched bool) IS 'args: geom, ref, pixeltype, value=1, nodataval=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.';

-- ----------------------------
--  Function structure for public._st_resample("public"."raster", text, float8, int4, float8, float8, float8, float8, float8, float8, int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_resample"("public"."raster", text, float8, int4, float8, float8, float8, float8, float8, float8, int4, int4);
CREATE FUNCTION "public"."_st_resample"(IN rast "public"."raster", IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125, IN srid int4 DEFAULT NULL::integer, IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN width int4 DEFAULT NULL::integer, IN height int4 DEFAULT NULL::integer) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_resample'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_st_resample"(IN rast "public"."raster", IN algorithm text, IN maxerr float8, IN srid int4, IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN width int4, IN height int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_resample("public"."raster", int4, float8, float8, float8, float8, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resample"("public"."raster", int4, float8, float8, float8, float8, float8, float8, text, float8);
CREATE FUNCTION "public"."st_resample"(IN rast "public"."raster", IN srid int4 DEFAULT NULL::integer, IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $9,	$10, $2, $3, $4, $5, $6, $7, $8) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resample"(IN rast "public"."raster", IN srid int4, IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_resample"(IN rast "public"."raster", IN srid int4, IN scalex float8, IN scaley float8, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, srid=NULL, scalex=0, scaley=0, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbor, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_resample("public"."raster", int4, int4, int4, float8, float8, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resample"("public"."raster", int4, int4, int4, float8, float8, float8, float8, text, float8);
CREATE FUNCTION "public"."st_resample"(IN rast "public"."raster", IN width int4, IN height int4, IN srid int4 DEFAULT NULL::integer, IN gridx float8 DEFAULT NULL::double precision, IN gridy float8 DEFAULT NULL::double precision, IN skewx float8 DEFAULT 0, IN skewy float8 DEFAULT 0, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $9,	$10, $4, NULL, NULL, $5, $6, $7, $8, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resample"(IN rast "public"."raster", IN width int4, IN height int4, IN srid int4, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_resample"(IN rast "public"."raster", IN width int4, IN height int4, IN srid int4, IN gridx float8, IN gridy float8, IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, width, height, srid=same_as_rast, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_resample("public"."raster", "public"."raster", text, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resample"("public"."raster", "public"."raster", text, float8, bool);
CREATE FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125, IN usescale bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		sr_id int;
		dim_x int;
		dim_y int;
		scale_x double precision;
		scale_y double precision;
		grid_x double precision;
		grid_y double precision;
		skew_x double precision;
		skew_y double precision;
	BEGIN
		SELECT srid, width, height, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO sr_id, dim_x, dim_y, scale_x, scale_y, grid_x, grid_y, skew_x, skew_y FROM st_metadata($2);

		IF usescale IS TRUE THEN
			dim_x := NULL;
			dim_y := NULL;
		ELSE
			scale_x := NULL;
			scale_y := NULL;
		END IF;

		RETURN _st_resample($1, $3, $4, sr_id, scale_x, scale_y, grid_x, grid_y, skew_x, skew_y, dim_x, dim_y);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN algorithm text, IN maxerr float8, IN usescale bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN algorithm text, IN maxerr float8, IN usescale bool) IS 'args: rast, ref, algorithm=NearestNeighbour, maxerr=0.125, usescale=true - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_resample("public"."raster", "public"."raster", bool, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_resample"("public"."raster", "public"."raster", bool, text, float8);
CREATE FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN usescale bool, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_resample($1, $2, $4, $5, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN usescale bool, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_resample"(IN rast "public"."raster", IN "ref" "public"."raster", IN usescale bool, IN algorithm text, IN maxerr float8) IS 'args: rast, ref, usescale, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_transform("public"."raster", int4, text, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."raster", int4, text, float8, float8, float8);
CREATE FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125, IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $3, $4, $2, $5, $6) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN algorithm text, IN maxerr float8, IN scalex float8, IN scaley float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN algorithm text, IN maxerr float8, IN scalex float8, IN scaley float8) IS 'args: rast, srid, algorithm=NearestNeighbor, maxerr=0.125, scalex, scaley - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_transform("public"."raster", int4, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."raster", int4, float8, float8, text, float8);
CREATE FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalex float8, IN scaley float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $5, $6, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) IS 'args: rast, srid, scalex, scaley, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_transform("public"."raster", int4, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_transform"("public"."raster", int4, float8, text, float8);
CREATE FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalexy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $4, $5, $2, $3, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_transform"(IN rast "public"."raster", IN srid int4, IN scalexy float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.unnest_bbox_way_nodes()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."unnest_bbox_way_nodes"();
CREATE FUNCTION "public"."unnest_bbox_way_nodes"() RETURNS "void" 
	AS $BODY$
DECLARE
	previousId ways.id%TYPE;
	currentId ways.id%TYPE;
	result bigint[];
	wayNodeRow way_nodes%ROWTYPE;
	wayNodes ways.nodes%TYPE;
BEGIN
	FOR wayNodes IN SELECT bw.nodes FROM bbox_ways bw LOOP
		FOR i IN 1 .. array_upper(wayNodes, 1) LOOP
			INSERT INTO bbox_way_nodes (id) VALUES (wayNodes[i]);
		END LOOP;
	END LOOP;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."unnest_bbox_way_nodes"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.users_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."users_are"(_name);
CREATE FUNCTION "public"."users_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT users_are( $1, 'There should be the correct users' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."users_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_rescale("public"."raster", float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rescale"("public"."raster", float8, float8, text, float8);
CREATE FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalex float8, IN scaley float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $4, $5, NULL, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) IS 'args: rast, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_rescale("public"."raster", float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_rescale"("public"."raster", float8, text, float8);
CREATE FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalexy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $3, $4, NULL, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalexy float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_rescale"(IN rast "public"."raster", IN scalexy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_reskew("public"."raster", float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reskew"("public"."raster", float8, float8, text, float8);
CREATE FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $4, $5, NULL, 0, 0, NULL, NULL, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, skewx, skewy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_reskew("public"."raster", float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_reskew"("public"."raster", float8, text, float8);
CREATE FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewxy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $3, $4, NULL, 0, 0, NULL, NULL, $2, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewxy float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_reskew"(IN rast "public"."raster", IN skewxy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, skewxy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."raster", float8, float8, text, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."raster", float8, float8, text, float8, float8, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125, IN scalex float8 DEFAULT 0, IN scaley float8 DEFAULT 0) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $4, $5, NULL, $6, $7, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN algorithm text, IN maxerr float8, IN scalex float8, IN scaley float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN algorithm text, IN maxerr float8, IN scalex float8, IN scaley float8) IS 'args: rast, gridx, gridy, algorithm=NearestNeighbour, maxerr=0.125, scalex=DEFAULT 0, scaley=DEFAULT 0 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."raster", float8, float8, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."raster", float8, float8, float8, float8, text, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalex float8, IN scaley float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $6, $7, NULL, $4, $5, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalex float8, IN scaley float8, IN algorithm text, IN maxerr float8) IS 'args: rast, gridx, gridy, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_snaptogrid("public"."raster", float8, float8, float8, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_snaptogrid"("public"."raster", float8, float8, float8, text, float8);
CREATE FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalexy float8, IN algorithm text DEFAULT 'NearestNeighbour'::text, IN maxerr float8 DEFAULT 0.125) RETURNS "public"."raster" 
	AS $BODY$ SELECT _st_resample($1, $5, $6, NULL, $4, $4, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalexy float8, IN algorithm text, IN maxerr float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_snaptogrid"(IN rast "public"."raster", IN gridx float8, IN gridy float8, IN scalexy float8, IN algorithm text, IN maxerr float8) IS 'args: rast, gridx, gridy, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.';

-- ----------------------------
--  Function structure for public.st_mapalgebraexpr("public"."raster", int4, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebraexpr"("public"."raster", int4, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN expression text, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_mapAlgebraExpr'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN expression text, IN nodataval float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN expression text, IN nodataval float8) IS 'args: rast, band, pixeltype, expression, nodataval=NULL - 1 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the input raster band and of pixeltype provided. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebraexpr("public"."raster", text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebraexpr"("public"."raster", text, text, float8);
CREATE FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN pixeltype text, IN expression text, IN nodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebraexpr($1, 1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN pixeltype text, IN expression text, IN nodataval float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebraexpr"(IN rast "public"."raster", IN pixeltype text, IN expression text, IN nodataval float8) IS 'args: rast, pixeltype, expression, nodataval=NULL - 1 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the input raster band and of pixeltype provided. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, text, regprocedure, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, text, regprocedure, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_mapAlgebraFct'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) IS 'args: rast, band, pixeltype, onerasteruserfunc, VARIADIC args - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, text, regprocedure)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, text, regprocedure);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, $2, $3, $4, NULL) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN onerastuserfunc regprocedure) IS 'args: rast, band, pixeltype, onerasteruserfunc - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, regprocedure, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, regprocedure, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure, INOUT args _text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, $2, NULL, $3, VARIADIC $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure, INOUT args _text) IS 'args: rast, band, onerasteruserfunc, VARIADIC args - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, regprocedure)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, regprocedure);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, $2, NULL, $3, NULL) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN band int4, IN onerastuserfunc regprocedure) IS 'args: rast, band, onerasteruserfunc - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", text, regprocedure, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", text, regprocedure, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, $2, $3, VARIADIC $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure, INOUT args _text) IS 'args: rast, pixeltype, onerasteruserfunc, VARIADIC args - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", text, regprocedure)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", text, regprocedure);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, $2, $3, NULL) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN pixeltype text, IN onerastuserfunc regprocedure) IS 'args: rast, pixeltype, onerasteruserfunc - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", regprocedure, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", regprocedure, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure, INOUT args _text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, NULL, $2, VARIADIC $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure, INOUT args _text) IS 'args: rast, onerasteruserfunc, VARIADIC args - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", regprocedure)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", regprocedure);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, NULL, $2, NULL) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast "public"."raster", IN onerastuserfunc regprocedure) IS 'args: rast, onerasteruserfunc - 1 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the input raster band and of pixeltype prodived. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebraexpr("public"."raster", int4, "public"."raster", int4, text, text, text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebraexpr"("public"."raster", int4, "public"."raster", int4, text, text, text, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN expression text, IN pixeltype text DEFAULT NULL::text, IN extenttype text DEFAULT 'INTERSECTION'::text, IN nodata1expr text DEFAULT NULL::text, IN nodata2expr text DEFAULT NULL::text, IN nodatanodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_mapAlgebra2'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) IS 'args: rast1, band1, rast2, band2, expression, pixeltype=same_as_rast1_band, extenttype=INTERSECTION, nodata1expr=NULL, nodata2expr=NULL, nodatanodataval=NULL - 2 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the two input raster bands and of pixeltype provided. band 1 of each raster is assumed if no band numbers are specified. The resulting raster will be aligned (scale, skew and pixel corners) on the grid defined by the first raster and have its extent defined by the "extenttype" parameter. Values for "extenttype" can be: INTERSECTION, UNION, FIRST, SECOND.';

-- ----------------------------
--  Function structure for public.st_mapalgebraexpr("public"."raster", "public"."raster", text, text, text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebraexpr"("public"."raster", "public"."raster", text, text, text, text, text, float8);
CREATE FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN expression text, IN pixeltype text DEFAULT NULL::text, IN extenttype text DEFAULT 'INTERSECTION'::text, IN nodata1expr text DEFAULT NULL::text, IN nodata2expr text DEFAULT NULL::text, IN nodatanodataval float8 DEFAULT NULL::double precision) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebraexpr($1, 1, $2, 1, $3, $4, $5, $6, $7, $8) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebraexpr"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN expression text, IN pixeltype text, IN extenttype text, IN nodata1expr text, IN nodata2expr text, IN nodatanodataval float8) IS 'args: rast1, rast2, expression, pixeltype=same_as_rast1_band, extenttype=INTERSECTION, nodata1expr=NULL, nodata2expr=NULL, nodatanodataval=NULL - 2 raster band version: Creates a new one band raster formed by applying a valid PostgreSQL algebraic operation on the two input raster bands and of pixeltype provided. band 1 of each raster is assumed if no band numbers are specified. The resulting raster will be aligned (scale, skew and pixel corners) on the grid defined by the first raster and have its extent defined by the "extenttype" parameter. Values for "extenttype" can be: INTERSECTION, UNION, FIRST, SECOND.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", int4, "public"."raster", int4, regprocedure, text, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", int4, "public"."raster", int4, regprocedure, text, text, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN tworastuserfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 'INTERSECTION'::text, IN extenttype text DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_mapAlgebra2'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN tworastuserfunc regprocedure, IN pixeltype text, IN extenttype text, INOUT userargs _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN tworastuserfunc regprocedure, IN pixeltype text, IN extenttype text, INOUT userargs _text) IS 'args: rast1, band1, rast2, band2, tworastuserfunc, pixeltype=same_as_rast1, extenttype=INTERSECTION, VARIADIC userargs - 2 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the 2 input raster bands and of pixeltype prodived. Band 1 is assumed if no band is specified. Extent type defaults to INTERSECTION if not specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafct("public"."raster", "public"."raster", regprocedure, text, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafct"("public"."raster", "public"."raster", regprocedure, text, text, _text);
CREATE FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN tworastuserfunc regprocedure DEFAULT NULL::text, IN pixeltype text DEFAULT 'INTERSECTION'::text, IN extenttype text DEFAULT NULL::text[], INOUT userargs _text DEFAULT (null)) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafct($1, 1, $2, 1, $3, $4, $5, VARIADIC $6) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN tworastuserfunc regprocedure, IN pixeltype text, IN extenttype text, INOUT userargs _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafct"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN tworastuserfunc regprocedure, IN pixeltype text, IN extenttype text, INOUT userargs _text) IS 'args: rast1, rast2, tworastuserfunc, pixeltype=same_as_rast1, extenttype=INTERSECTION, VARIADIC userargs - 2 band version - Creates a new one band raster formed by applying a valid PostgreSQL function on the 2 input raster bands and of pixeltype prodived. Band 1 is assumed if no band is specified. Extent type defaults to INTERSECTION if not specified.';

-- ----------------------------
--  Function structure for public.st_mapalgebrafctngb("public"."raster", int4, text, int4, int4, regprocedure, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mapalgebrafctngb"("public"."raster", int4, text, int4, int4, regprocedure, text, _text);
CREATE FUNCTION "public"."st_mapalgebrafctngb"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN ngbwidth int4, IN ngbheight int4, IN onerastngbuserfunc regprocedure, IN nodatamode text, INOUT args _text) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_mapAlgebraFctNgb'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mapalgebrafctngb"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN ngbwidth int4, IN ngbheight int4, IN onerastngbuserfunc regprocedure, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mapalgebrafctngb"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN ngbwidth int4, IN ngbheight int4, IN onerastngbuserfunc regprocedure, IN nodatamode text, INOUT args _text) IS 'args: rast, band, pixeltype, ngbwidth, ngbheight, onerastngbuserfunc, nodatamode, VARIADIC args - 1-band version: Map Algebra Nearest Neighbor using user-defined PostgreSQL function. Return a raster which values are the result of a PLPGSQL user function involving a neighborhood of values from the input raster band.';

-- ----------------------------
--  Function structure for public.st_max4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_max4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_max4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        max float;
    BEGIN
        _matrix := matrix;
        max := '-Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF max < _matrix[x][y] THEN
                    max := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN max;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_max4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_max4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) IS 'args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the maximum pixel value in a neighborhood.';

-- ----------------------------
--  Function structure for public.st_min4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_min4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_min4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        min float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN min;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_min4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_min4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) IS 'args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the minimum pixel value in a neighborhood.';

-- ----------------------------
--  Function structure for public.st_sum4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_sum4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_sum4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        sum float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        RETURN sum;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_sum4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_sum4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) IS 'args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the sum of all pixel values in a neighborhood.';

-- ----------------------------
--  Function structure for public.st_mean4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_mean4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_mean4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        sum float;
        count float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        count := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                        count := count + 1;
                    END IF;
                ELSE
                    count := count + 1;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        IF count = 0 THEN
            RETURN NULL;
        END IF;
        RETURN sum / count;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_mean4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_mean4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) IS 'args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the mean pixel value in a neighborhood.';

-- ----------------------------
--  Function structure for public.st_range4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_range4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_range4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        _matrix float[][];
        min float;
        max float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        max := '-Infinity'::float;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min = _matrix[x][y];
                END IF;
                IF max < _matrix[x][y] THEN
                    max = _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        IF max = '-Infinity'::float OR min = 'Infinity'::float THEN
            RETURN NULL;
        END IF;
        RETURN max - min;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_range4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_range4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) IS 'args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the range of pixel values in a neighborhood.';

-- ----------------------------
--  Function structure for public._st_slope4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_slope4ma"(_float8, text, _text);
CREATE FUNCTION "public"."_st_slope4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        pwidth float;
        pheight float;
        dz_dx float;
        dz_dy float;
    BEGIN
        pwidth := args[1]::float;
        pheight := args[2]::float;
        dz_dx := ((matrix[3][1] + 2.0 * matrix[3][2] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[1][2] + matrix[1][3])) / (8.0 * pwidth);
        dz_dy := ((matrix[1][3] + 2.0 * matrix[2][3] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[2][1] + matrix[3][1])) / (8.0 * pheight);
        RETURN atan(sqrt(pow(dz_dx, 2.0) + pow(dz_dy, 2.0)));
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_slope4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_slope("public"."raster", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_slope"("public"."raster", int4, text);
CREATE FUNCTION "public"."st_slope"(IN rast "public"."raster", IN band int4, IN pixeltype text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafctngb($1, $2, $3, 1, 1, '_st_slope4ma(float[][], text, text[])'::regprocedure, 'value', st_pixelwidth($1)::text, st_pixelheight($1)::text) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_slope"(IN rast "public"."raster", IN band int4, IN pixeltype text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_slope"(IN rast "public"."raster", IN band int4, IN pixeltype text) IS 'args: rast, band, pixeltype - Returns the surface slope of an elevation raster band. Useful for analyzing terrain.';

-- ----------------------------
--  Function structure for public._st_aspect4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_aspect4ma"(_float8, text, _text);
CREATE FUNCTION "public"."_st_aspect4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        pwidth float;
        pheight float;
        dz_dx float;
        dz_dy float;
        aspect float;
    BEGIN
        pwidth := args[1]::float;
        pheight := args[2]::float;
        dz_dx := ((matrix[3][1] + 2.0 * matrix[3][2] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[1][2] + matrix[1][3])) / (8.0 * pwidth);
        dz_dy := ((matrix[1][3] + 2.0 * matrix[2][3] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[2][1] + matrix[3][1])) / (8.0 * pheight);
        IF abs(dz_dx) = 0::float AND abs(dz_dy) = 0::float THEN
            RETURN -1;
        END IF;

        aspect := atan2(dz_dy, -dz_dx);
        IF aspect > (pi() / 2.0) THEN
            RETURN (5.0 * pi() / 2.0) - aspect;
        ELSE
            RETURN (pi() / 2.0) - aspect;
        END IF;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_aspect4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_aspect("public"."raster", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_aspect"("public"."raster", int4, text);
CREATE FUNCTION "public"."st_aspect"(IN rast "public"."raster", IN band int4, IN pixeltype text) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafctngb($1, $2, $3, 1, 1, '_st_aspect4ma(float[][], text, text[])'::regprocedure, 'value', st_pixelwidth($1)::text, st_pixelheight($1)::text) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_aspect"(IN rast "public"."raster", IN band int4, IN pixeltype text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_aspect"(IN rast "public"."raster", IN band int4, IN pixeltype text) IS 'args: rast, band, pixeltype - Returns the surface aspect of an elevation raster band. Useful for analyzing terrain.';

-- ----------------------------
--  Function structure for public.users_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."users_are"(_name, text);
CREATE FUNCTION "public"."users_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'users',
        ARRAY(
            SELECT usename
              FROM pg_catalog.pg_user
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT usename
              FROM pg_catalog.pg_user
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."users_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.view_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."view_owner_is"(name, name);
CREATE FUNCTION "public"."view_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT view_owner_is(
        $1, $2,
        'View ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."view_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_hillshade4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_hillshade4ma"(_float8, text, _text);
CREATE FUNCTION "public"."_st_hillshade4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$
    DECLARE
        pwidth float;
        pheight float;
        dz_dx float;
        dz_dy float;
        zenith float;
        azimuth float;
        slope float;
        aspect float;
        max_bright float;
        elevation_scale float;
    BEGIN
        pwidth := args[1]::float;
        pheight := args[2]::float;
        azimuth := (5.0 * pi() / 2.0) - args[3]::float;
        zenith := (pi() / 2.0) - args[4]::float;
        dz_dx := ((matrix[3][1] + 2.0 * matrix[3][2] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[1][2] + matrix[1][3])) / (8.0 * pwidth);
        dz_dy := ((matrix[1][3] + 2.0 * matrix[2][3] + matrix[3][3]) - (matrix[1][1] + 2.0 * matrix[2][1] + matrix[3][1])) / (8.0 * pheight);
        elevation_scale := args[6]::float;
        slope := atan(sqrt(elevation_scale * pow(dz_dx, 2.0) + pow(dz_dy, 2.0)));

        IF dz_dx != 0. THEN
            aspect := atan2(dz_dy, -dz_dx);
						IF aspect < 0 THEN
							aspect := aspect + (2.0 * pi());
						END IF;
				ELSE
					IF dz_dy > 0.THEN
						aspect := pi() / 2.;
					ELSEIF dz_dy < 0.THEN
						aspect := (2 * pi()) - (pi() / 2.);
					-- set to pi as that is the expected PostgreSQL answer in Linux
					ELSE
            aspect := pi();
        	END IF;
        END IF;
        max_bright := args[5]::float;

        RETURN max_bright * ( (cos(zenith)*cos(slope)) + (sin(zenith)*sin(slope)*cos(azimuth - aspect)) );
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_hillshade4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_hillshade("public"."raster", int4, text, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hillshade"("public"."raster", int4, text, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_hillshade"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN azimuth float8, IN altitude float8, IN max_bright float8 DEFAULT 255.0, IN elevation_scale float8 DEFAULT 1.0) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_mapalgebrafctngb($1, $2, $3, 1, 1, '_st_hillshade4ma(float[][], text, text[])'::regprocedure, 'value', st_pixelwidth($1)::text, st_pixelheight($1)::text, $4::text, $5::text, $6::text, $7::text) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_hillshade"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN azimuth float8, IN altitude float8, IN max_bright float8, IN elevation_scale float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_hillshade"(IN rast "public"."raster", IN band int4, IN pixeltype text, IN azimuth float8, IN altitude float8, IN max_bright float8, IN elevation_scale float8) IS 'args: rast, band, pixeltype, azimuth, altitude, max_bright=255, elevation_scale=1 - Returns the hypothetical illumination of an elevation raster band using provided azimuth, altitude, brightness and elevation scale inputs. Useful for visualizing terrain.';

-- ----------------------------
--  Function structure for public.st_distinct4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_distinct4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_distinct4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$ SELECT COUNT(DISTINCT unnest)::float FROM unnest($1) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_distinct4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_distinct4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) IS 'args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the number of unique pixel values in a neighborhood.';

-- ----------------------------
--  Function structure for public.st_stddev4ma(_float8, text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_stddev4ma"(_float8, text, _text);
CREATE FUNCTION "public"."st_stddev4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) RETURNS "float8" 
	AS $BODY$ SELECT stddev(unnest) FROM unnest($1) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_stddev4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_stddev4ma"(IN matrix _float8, IN nodatamode text, INOUT args _text) IS 'args: matrix, nodatamode, VARIADIC args - Raster processing function that calculates the standard deviation of pixel values in a neighborhood.';

-- ----------------------------
--  Function structure for public.st_isempty("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_isempty"("public"."raster");
CREATE FUNCTION "public"."st_isempty"(IN rast "public"."raster") RETURNS "bool" 
	AS '$libdir/rtpostgis-2.0','RASTER_isEmpty'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_isempty"(IN rast "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_isempty"(IN rast "public"."raster") IS 'args: rast - Returns true if the raster is empty (width = 0 and height = 0). Otherwise, returns false.';

-- ----------------------------
--  Function structure for public.st_hasnoband("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_hasnoband"("public"."raster", int4);
CREATE FUNCTION "public"."st_hasnoband"(IN rast "public"."raster", IN nband int4 DEFAULT 1) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.0','RASTER_hasNoBand'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_hasnoband"(IN rast "public"."raster", IN nband int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_hasnoband"(IN rast "public"."raster", IN nband int4) IS 'args: rast, bandnum=1 - Returns true if there is no band with given band number. If no band number is specified, then band number 1 is assumed.';

-- ----------------------------
--  Function structure for public.st_bandnodatavalue("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandnodatavalue"("public"."raster", int4);
CREATE FUNCTION "public"."st_bandnodatavalue"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getBandNoDataValue'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandnodatavalue"(IN rast "public"."raster", IN band int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_bandnodatavalue"(IN rast "public"."raster", IN band int4) IS 'args: rast, bandnum=1 - Returns the value in a given band that represents no data. If no band num 1 is assumed.';

-- ----------------------------
--  Function structure for public.st_bandisnodata("public"."raster", int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandisnodata"("public"."raster", int4, bool);
CREATE FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN band int4 DEFAULT 1, IN forcechecking bool DEFAULT false) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.0','RASTER_bandIsNoData'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN band int4, IN forcechecking bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN band int4, IN forcechecking bool) IS 'args: rast, band, forceChecking=true - Returns true if the band is filled with only nodata values.';

-- ----------------------------
--  Function structure for public.st_bandisnodata("public"."raster", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandisnodata"("public"."raster", bool);
CREATE FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN forcechecking bool) RETURNS "bool" 
	AS $BODY$ SELECT st_bandisnodata($1, 1, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN forcechecking bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_bandisnodata"(IN rast "public"."raster", IN forcechecking bool) IS 'args: rast, forceChecking=true - Returns true if the band is filled with only nodata values.';

-- ----------------------------
--  Function structure for public.st_bandpath("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandpath"("public"."raster", int4);
CREATE FUNCTION "public"."st_bandpath"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "text" 
	AS '$libdir/rtpostgis-2.0','RASTER_getBandPath'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandpath"(IN rast "public"."raster", IN band int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_bandpath"(IN rast "public"."raster", IN band int4) IS 'args: rast, bandnum=1 - Returns system file path to a band stored in file system. If no bandnum specified, 1 is assumed.';

-- ----------------------------
--  Function structure for public.st_bandpixeltype("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandpixeltype"("public"."raster", int4);
CREATE FUNCTION "public"."st_bandpixeltype"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "text" 
	AS '$libdir/rtpostgis-2.0','RASTER_getBandPixelTypeName'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandpixeltype"(IN rast "public"."raster", IN band int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_bandpixeltype"(IN rast "public"."raster", IN band int4) IS 'args: rast, bandnum=1 - Returns the type of pixel for given band. If no bandnum specified, 1 is assumed.';

-- ----------------------------
--  Function structure for public.st_bandmetadata("public"."raster", _int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandmetadata"("public"."raster", _int4);
CREATE FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band _int4, OUT bandnum int4, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) RETURNS "record" 
	AS '$libdir/rtpostgis-2.0','RASTER_bandmetadata'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band _int4, OUT bandnum int4, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_bandmetadata("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_bandmetadata"("public"."raster", int4);
CREATE FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band int4 DEFAULT 1, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) RETURNS "record" 
	AS $BODY$ SELECT pixeltype, nodatavalue, isoutdb, path FROM st_bandmetadata($1, ARRAY[$2]::int[]) LIMIT 1 $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band int4, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_bandmetadata"(IN rast "public"."raster", IN band int4, OUT pixeltype text, OUT nodatavalue float8, OUT isoutdb bool, OUT "path" text) IS 'args: rast, bandnum=1 - Returns basic meta data for a specific raster band. band num 1 is assumed if none-specified.';

-- ----------------------------
--  Function structure for public.st_value("public"."raster", int4, int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_value"("public"."raster", int4, int4, int4, bool);
CREATE FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN hasnodata bool DEFAULT true) RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_getPixelValue'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN hasnodata bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN hasnodata bool) IS 'args: rast, bandnum, columnx, rowy, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.';

-- ----------------------------
--  Function structure for public.view_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."view_owner_is"(name, name, name);
CREATE FUNCTION "public"."view_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT view_owner_is(
        $1, $2, $3,
        'View ' || quote_ident($1) || '.' || quote_ident($2) || ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."view_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_value("public"."raster", int4, int4, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_value"("public"."raster", int4, int4, bool);
CREATE FUNCTION "public"."st_value"(IN rast "public"."raster", IN x int4, IN y int4, IN hasnodata bool DEFAULT true) RETURNS "float8" 
	AS $BODY$ SELECT st_value($1, 1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_value"(IN rast "public"."raster", IN x int4, IN y int4, IN hasnodata bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_value"(IN rast "public"."raster", IN x int4, IN y int4, IN hasnodata bool) IS 'args: rast, columnx, rowy, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.';

-- ----------------------------
--  Function structure for public.st_value("public"."raster", int4, "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_value"("public"."raster", int4, "public"."geometry", bool);
CREATE FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN hasnodata bool DEFAULT true) RETURNS "float8" 
	AS $BODY$
    DECLARE
        x float8;
        y float8;
        gtype text;
    BEGIN
        gtype := st_geometrytype(pt);
        IF ( gtype != 'ST_Point' ) THEN
            RAISE EXCEPTION 'Attempting to get the value of a pixel with a non-point geometry';
        END IF;
				IF ST_SRID(rast) != ST_SRID(pt) THEN
					RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
				END IF;
        x := st_x(pt);
        y := st_y(pt);
        RETURN st_value(rast,
                        band,
                        st_world2rastercoordx(rast, x, y),
                        st_world2rastercoordy(rast, x, y),
                        hasnodata);
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN hasnodata bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_value"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN hasnodata bool) IS 'args: rast, bandnum, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.';

-- ----------------------------
--  Function structure for public.st_value("public"."raster", "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_value"("public"."raster", "public"."geometry", bool);
CREATE FUNCTION "public"."st_value"(IN rast "public"."raster", IN pt "public"."geometry", IN hasnodata bool DEFAULT true) RETURNS "float8" 
	AS $BODY$ SELECT st_value($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_value"(IN rast "public"."raster", IN pt "public"."geometry", IN hasnodata bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_value"(IN rast "public"."raster", IN pt "public"."geometry", IN hasnodata bool) IS 'args: rast, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.';

-- ----------------------------
--  Function structure for public.st_georeference("public"."raster", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_georeference"("public"."raster", text);
CREATE FUNCTION "public"."st_georeference"(IN rast "public"."raster", IN format text DEFAULT 'GDAL'::text) RETURNS "text" 
	AS $BODY$
    DECLARE
				scale_x numeric;
				scale_y numeric;
				skew_x numeric;
				skew_y numeric;
				ul_x numeric;
				ul_y numeric;

        result text;
    BEGIN
			SELECT scalex::numeric, scaley::numeric, skewx::numeric, skewy::numeric, upperleftx::numeric, upperlefty::numeric
				INTO scale_x, scale_y, skew_x, skew_y, ul_x, ul_y FROM ST_Metadata(rast);

						-- scale x
            result := trunc(scale_x, 10) || E'\n';

						-- skew y
            result := result || trunc(skew_y, 10) || E'\n';

						-- skew x
            result := result || trunc(skew_x, 10) || E'\n';

						-- scale y
            result := result || trunc(scale_y, 10) || E'\n';

        IF format = 'ESRI' THEN
						-- upper left x
            result := result || trunc((ul_x + scale_x * 0.5), 10) || E'\n';

						-- upper left y
            result = result || trunc((ul_y + scale_y * 0.5), 10) || E'\n';
        ELSE -- IF format = 'GDAL' THEN
						-- upper left x
            result := result || trunc(ul_x, 10) || E'\n';

						-- upper left y
            result := result || trunc(ul_y, 10) || E'\n';
        END IF;

        RETURN result;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_georeference"(IN rast "public"."raster", IN format text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_georeference"(IN rast "public"."raster", IN format text) IS 'args: rast, format=GDAL - Returns the georeference meta data in GDAL or ESRI format as commonly seen in a world file. Default is GDAL.';

-- ----------------------------
--  Function structure for public.st_setscale("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setscale"("public"."raster", float8);
CREATE FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN "scale" float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setScale'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN "scale" float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN "scale" float8) IS 'args: rast, xy - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.';

-- ----------------------------
--  Function structure for public.st_setscale("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setscale"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN scalex float8, IN scaley float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setScaleXY'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN scalex float8, IN scaley float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setscale"(IN rast "public"."raster", IN scalex float8, IN scaley float8) IS 'args: rast, x, y - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.';

-- ----------------------------
--  Function structure for public.st_setskew("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setskew"("public"."raster", float8);
CREATE FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skew float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setSkew'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skew float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skew float8) IS 'args: rast, skewxy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.';

-- ----------------------------
--  Function structure for public.st_setskew("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setskew"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setSkewXY'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setskew"(IN rast "public"."raster", IN skewx float8, IN skewy float8) IS 'args: rast, skewx, skewy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.';

-- ----------------------------
--  Function structure for public.st_setsrid("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setsrid"("public"."raster", int4);
CREATE FUNCTION "public"."st_setsrid"(IN rast "public"."raster", IN srid int4) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setSRID'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setsrid"(IN rast "public"."raster", IN srid int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setsrid"(IN rast "public"."raster", IN srid int4) IS 'args: rast, srid - Sets the SRID of a raster to a particular integer srid defined in the spatial_ref_sys table.';

-- ----------------------------
--  Function structure for public.st_setupperleft("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setupperleft"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_setupperleft"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setUpperLeftXY'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setupperleft"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setupperleft"(IN rast "public"."raster", IN upperleftx float8, IN upperlefty float8) IS 'args: rast, x, y - Sets the value of the upper left corner of the pixel to projected X and Y coordinates.';

-- ----------------------------
--  Function structure for public.st_setrotation("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setrotation"("public"."raster", float8);
CREATE FUNCTION "public"."st_setrotation"(IN rast "public"."raster", IN rotation float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setRotation'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setrotation"(IN rast "public"."raster", IN rotation float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setrotation"(IN rast "public"."raster", IN rotation float8) IS 'args: rast, rotation - Set the rotation of the raster in radian.';

-- ----------------------------
--  Function structure for public.st_setgeotransform("public"."raster", float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setgeotransform"("public"."raster", float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_setgeotransform"(IN rast "public"."raster", IN imag float8, IN jmag float8, IN theta_i float8, IN theta_ij float8, IN xoffset float8, IN yoffset float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setGeotransform'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setgeotransform"(IN rast "public"."raster", IN imag float8, IN jmag float8, IN theta_i float8, IN theta_ij float8, IN xoffset float8, IN yoffset float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_setgeoreference("public"."raster", text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setgeoreference"("public"."raster", text, text);
CREATE FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN georef text, IN format text DEFAULT 'GDAL'::text) RETURNS "public"."raster" 
	AS $BODY$
    DECLARE
        params text[];
        rastout raster;
    BEGIN
        IF rast IS NULL THEN
            RAISE WARNING 'Cannot set georeferencing on a null raster in st_setgeoreference.';
            RETURN rastout;
        END IF;

        SELECT regexp_matches(georef,
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s' ||
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)') INTO params;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'st_setgeoreference requires a string with 6 floating point values.';
        END IF;

        IF format = 'ESRI' THEN
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := st_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := st_setskew(rastout, params[3]::float8, params[2]::float8);
            rastout := st_setupperleft(rastout,
                                   params[5]::float8 - (params[1]::float8 * 0.5),
                                   params[6]::float8 - (params[4]::float8 * 0.5));
        ELSE
            IF format != 'GDAL' THEN
                RAISE WARNING E'Format \'%\' is not recognized, defaulting to GDAL format.', format;
            END IF;
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}

            rastout := st_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := st_setskew( rastout, params[3]::float8, params[2]::float8);
            rastout := st_setupperleft(rastout, params[5]::float8, params[6]::float8);
        END IF;
        RETURN rastout;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN georef text, IN format text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setgeoreference"(IN rast "public"."raster", IN georef text, IN format text) IS 'args: rast, georefcoords, format=GDAL - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.';

-- ----------------------------
--  Function structure for public.st_setbandnodatavalue("public"."raster", int4, float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setbandnodatavalue"("public"."raster", int4, float8, bool);
CREATE FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN band int4, IN nodatavalue float8, IN forcechecking bool DEFAULT false) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setBandNoDataValue'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN band int4, IN nodatavalue float8, IN forcechecking bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN band int4, IN nodatavalue float8, IN forcechecking bool) IS 'args: rast, band, nodatavalue, forcechecking=false - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.';

-- ----------------------------
--  Function structure for public.st_setbandnodatavalue("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setbandnodatavalue"("public"."raster", float8);
CREATE FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN nodatavalue float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_setbandnodatavalue($1, 1, $2, FALSE) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN nodatavalue float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setbandnodatavalue"(IN rast "public"."raster", IN nodatavalue float8) IS 'args: rast, nodatavalue - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.';

-- ----------------------------
--  Function structure for public.st_setbandisnodata("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setbandisnodata"("public"."raster", int4);
CREATE FUNCTION "public"."st_setbandisnodata"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setBandIsNoData'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setbandisnodata"(IN rast "public"."raster", IN band int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setbandisnodata"(IN rast "public"."raster", IN band int4) IS 'args: rast, band=1 - Sets the isnodata flag of the band to TRUE. You may want to call this function if ST_BandIsNoData(rast, band) != ST_BandIsNodata(rast, band, TRUE). This is, if the isnodata flag is dirty. Band 1 is assumed if no band is specified.';

-- ----------------------------
--  Function structure for public.st_setvalue("public"."raster", int4, int4, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalue"("public"."raster", int4, int4, int4, float8);
CREATE FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN newvalue float8) RETURNS "public"."raster" 
	AS '$libdir/rtpostgis-2.0','RASTER_setPixelValue'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN newvalue float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN x int4, IN y int4, IN newvalue float8) IS 'args: rast, bandnum, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or at a pixel that intersects a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified.';

-- ----------------------------
--  Function structure for public.st_setvalue("public"."raster", int4, int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalue"("public"."raster", int4, int4, float8);
CREATE FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN x int4, IN y int4, IN newvalue float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_setvalue($1, 1, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN x int4, IN y int4, IN newvalue float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN x int4, IN y int4, IN newvalue float8) IS 'args: rast, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or at a pixel that intersects a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified.';

-- ----------------------------
--  Function structure for public.st_setvalue("public"."raster", int4, "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalue"("public"."raster", int4, "public"."geometry", float8);
CREATE FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN newvalue float8) RETURNS "public"."raster" 
	AS $BODY$
    DECLARE
        x float8;
        y float8;
        gtype text;
    BEGIN
        gtype := st_geometrytype(pt);
        IF ( gtype != 'ST_Point' ) THEN
            RAISE EXCEPTION 'Attempting to get the value of a pixel with a non-point geometry';
        END IF;

        IF st_srid(pt) != st_srid(rast) THEN
            RAISE NOTICE 'The SRIDs of the raster and point geometry do NOT match. Returning original raster';
            RETURN rast;
        END IF;

        x := st_x(pt);
        y := st_y(pt);

        RETURN st_setvalue(rast,
                           band,
                           st_world2rastercoordx(rast, x, y),
                           st_world2rastercoordy(rast, x, y),
                           newvalue);
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN newvalue float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN band int4, IN pt "public"."geometry", IN newvalue float8) IS 'args: rast, bandnum, pt, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or at a pixel that intersects a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified.';

-- ----------------------------
--  Function structure for public.st_setvalue("public"."raster", "public"."geometry", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_setvalue"("public"."raster", "public"."geometry", float8);
CREATE FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN pt "public"."geometry", IN newvalue float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_setvalue($1, 1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN pt "public"."geometry", IN newvalue float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_setvalue"(IN rast "public"."raster", IN pt "public"."geometry", IN newvalue float8) IS 'args: rast, pt, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or at a pixel that intersects a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified.';

-- ----------------------------
--  Function structure for public.st_dumpaspolygons("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_dumpaspolygons"("public"."raster", int4);
CREATE FUNCTION "public"."st_dumpaspolygons"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS SETOF "public"."geomval" 
	AS '$libdir/rtpostgis-2.0','RASTER_dumpAsPolygons'
	LANGUAGE c
	COST 1
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_dumpaspolygons"(IN rast "public"."raster", IN band int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_dumpaspolygons"(IN rast "public"."raster", IN band int4) IS 'args: rast, band_num=1 - Returns a set of geomval (geom,val) rows, from a given raster band. If no band number is specified, band num defaults to 1.';

-- ----------------------------
--  Function structure for public.st_polygon("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_polygon"("public"."raster", int4);
CREATE FUNCTION "public"."st_polygon"(IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS "public"."geometry" 
	AS $BODY$
    SELECT st_union(f.geom) AS singlegeom
    FROM (SELECT (st_dumpaspolygons($1, $2)).geom AS geom) AS f;
    $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_polygon"(IN rast "public"."raster", IN band int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_polygon"(IN rast "public"."raster", IN band int4) IS 'args: rast, band_num=1 - Returns a polygon geometry formed by the union of pixels that have a pixel value that is not no data value. If no band number is specified, band num defaults to 1.';

-- ----------------------------
--  Function structure for public.st_pixelaspolygon("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelaspolygon"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_pixelaspolygon"(IN rast "public"."raster", IN x int4, IN y int4) RETURNS "public"."geometry" 
	AS '$libdir/rtpostgis-2.0','RASTER_getPixelPolygon'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_pixelaspolygon"(IN rast "public"."raster", IN x int4, IN y int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_pixelaspolygon"(IN rast "public"."raster", IN x int4, IN y int4) IS 'args: rast, columnx, rowy - Returns the geometry that bounds the pixel for a particular row and column.';

-- ----------------------------
--  Function structure for public.st_pixelaspolygons("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_pixelaspolygons"("public"."raster", int4);
CREATE FUNCTION "public"."st_pixelaspolygons"(IN rast "public"."raster", IN band int4 DEFAULT 1, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) RETURNS SETOF "record" 
	AS $BODY$
    DECLARE
        rast alias for $1;
        var_w integer;
        var_h integer;
        var_x integer;
        var_y integer;
        value float8 := NULL;
        hasband boolean := TRUE;
    BEGIN
        IF rast IS NOT NULL AND NOT ST_IsEmpty(rast) THEN
            IF ST_HasNoBand(rast, band) THEN
                RAISE NOTICE 'Raster do not have band %. Returning null values', band;
                hasband := false;
            END IF;
            SELECT ST_Width(rast), ST_Height(rast) INTO var_w, var_h;
            FOR var_x IN 1..var_w LOOP
                FOR var_y IN 1..var_h LOOP
                    IF hasband THEN
                        value := ST_Value(rast, band, var_x, var_y);
                    END IF;
                    SELECT ST_PixelAsPolygon(rast, var_x, var_y), value, var_x, var_y INTO geom,val,x,y;
                    RETURN NEXT;
                END LOOP;
            END LOOP;
        END IF;
        RETURN;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."st_pixelaspolygons"(IN rast "public"."raster", IN band int4, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_pixelaspolygons"(IN rast "public"."raster", IN band int4, OUT geom "public"."geometry", OUT val float8, OUT x int4, OUT y int4) IS 'args: rast, band=1 - Returns the geometry that bounds every pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.';

-- ----------------------------
--  Function structure for public._st_world2rastercoord("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_world2rastercoord"("public"."raster", float8, float8);
CREATE FUNCTION "public"."_st_world2rastercoord"(IN rast "public"."raster", IN longitude float8 DEFAULT NULL::double precision, IN latitude float8 DEFAULT NULL::double precision, OUT columnx int4, OUT rowy int4) RETURNS "record" 
	AS '$libdir/rtpostgis-2.0','RASTER_worldToRasterCoord'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_world2rastercoord"(IN rast "public"."raster", IN longitude float8, IN latitude float8, OUT columnx int4, OUT rowy int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_world2rastercoordx("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_world2rastercoordx"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN xw float8, IN yw float8) RETURNS "int4" 
	AS $BODY$ SELECT columnx FROM _st_world2rastercoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN xw float8, IN yw float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN xw float8, IN yw float8) IS 'args: rast, xw, yw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_world2rastercoordx("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_world2rastercoordx"("public"."raster", float8);
CREATE FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN xw float8) RETURNS "int4" 
	AS $BODY$ SELECT columnx FROM _st_world2rastercoord($1, $2, NULL) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN xw float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN xw float8) IS 'args: rast, xw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_world2rastercoordx("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_world2rastercoordx"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN pt "public"."geometry") RETURNS "int4" 
	AS $BODY$
	DECLARE
		xr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT columnx INTO xr FROM _st_world2rastercoord($1, st_x(pt), st_y(pt));
		RETURN xr;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN pt "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_world2rastercoordx"(IN rast "public"."raster", IN pt "public"."geometry") IS 'args: rast, pt - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_world2rastercoordy("public"."raster", float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_world2rastercoordy"("public"."raster", float8, float8);
CREATE FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN xw float8, IN yw float8) RETURNS "int4" 
	AS $BODY$ SELECT rowy FROM _st_world2rastercoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN xw float8, IN yw float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN xw float8, IN yw float8) IS 'args: rast, xw, yw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_world2rastercoordy("public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_world2rastercoordy"("public"."raster", float8);
CREATE FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN yw float8) RETURNS "int4" 
	AS $BODY$ SELECT rowy FROM _st_world2rastercoord($1, NULL, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN yw float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN yw float8) IS 'args: rast, xw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.st_world2rastercoordy("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_world2rastercoordy"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN pt "public"."geometry") RETURNS "int4" 
	AS $BODY$
	DECLARE
		yr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT rowy INTO yr FROM _st_world2rastercoord($1, st_x(pt), st_y(pt));
		RETURN yr;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN pt "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_world2rastercoordy"(IN rast "public"."raster", IN pt "public"."geometry") IS 'args: rast, pt - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.';

-- ----------------------------
--  Function structure for public.view_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."view_owner_is"(name, name, text);
CREATE FUNCTION "public"."view_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('v'::char, $1);
BEGIN
    -- Make sure the view exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    View ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."view_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_raster2worldcoord("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_raster2worldcoord"("public"."raster", int4, int4);
CREATE FUNCTION "public"."_st_raster2worldcoord"(IN rast "public"."raster", IN columnx int4 DEFAULT NULL::integer, IN rowy int4 DEFAULT NULL::integer, OUT longitude float8, OUT latitude float8) RETURNS "record" 
	AS '$libdir/rtpostgis-2.0','RASTER_rasterToWorldCoord'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_raster2worldcoord"(IN rast "public"."raster", IN columnx int4, IN rowy int4, OUT longitude float8, OUT latitude float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_raster2worldcoordx("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_raster2worldcoordx"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_raster2worldcoordx"(IN rast "public"."raster", IN xr int4, IN yr int4) RETURNS "float8" 
	AS $BODY$ SELECT longitude FROM _st_raster2worldcoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_raster2worldcoordx"(IN rast "public"."raster", IN xr int4, IN yr int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_raster2worldcoordx"(IN rast "public"."raster", IN xr int4, IN yr int4) IS 'args: rast, xcolumn, yrow - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.';

-- ----------------------------
--  Function structure for public.st_raster2worldcoordx("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_raster2worldcoordx"("public"."raster", int4);
CREATE FUNCTION "public"."st_raster2worldcoordx"(IN rast "public"."raster", IN xr int4) RETURNS "float8" 
	AS $BODY$ SELECT longitude FROM _st_raster2worldcoord($1, $2, NULL) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_raster2worldcoordx"(IN rast "public"."raster", IN xr int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_raster2worldcoordx"(IN rast "public"."raster", IN xr int4) IS 'args: rast, xcolumn - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.';

-- ----------------------------
--  Function structure for public.st_raster2worldcoordy("public"."raster", int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_raster2worldcoordy"("public"."raster", int4, int4);
CREATE FUNCTION "public"."st_raster2worldcoordy"(IN rast "public"."raster", IN xr int4, IN yr int4) RETURNS "float8" 
	AS $BODY$ SELECT latitude FROM _st_raster2worldcoord($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_raster2worldcoordy"(IN rast "public"."raster", IN xr int4, IN yr int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_raster2worldcoordy"(IN rast "public"."raster", IN xr int4, IN yr int4) IS 'args: rast, xcolumn, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.';

-- ----------------------------
--  Function structure for public.st_raster2worldcoordy("public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_raster2worldcoordy"("public"."raster", int4);
CREATE FUNCTION "public"."st_raster2worldcoordy"(IN rast "public"."raster", IN yr int4) RETURNS "float8" 
	AS $BODY$ SELECT latitude FROM _st_raster2worldcoord($1, NULL, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_raster2worldcoordy"(IN rast "public"."raster", IN yr int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_raster2worldcoordy"(IN rast "public"."raster", IN yr int4) IS 'args: rast, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.';

-- ----------------------------
--  Function structure for public.st_minpossiblevalue(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_minpossiblevalue"(text);
CREATE FUNCTION "public"."st_minpossiblevalue"(IN pixeltype text) RETURNS "float8" 
	AS '$libdir/rtpostgis-2.0','RASTER_minPossibleValue'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_minpossiblevalue"(IN pixeltype text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_asbinary("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_asbinary"("public"."raster");
CREATE FUNCTION "public"."st_asbinary"(IN "public"."raster") RETURNS "bytea" 
	AS '$libdir/rtpostgis-2.0','RASTER_to_binary'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_asbinary"(IN "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_asbinary"(IN "public"."raster") IS 'args: rast - Return the Well-Known Binary (WKB) representation of the raster without SRID meta data.';

-- ----------------------------
--  Function structure for public.bytea("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bytea"("public"."raster");
CREATE FUNCTION "public"."bytea"(IN "public"."raster") RETURNS "bytea" 
	AS '$libdir/rtpostgis-2.0','RASTER_to_bytea'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."bytea"(IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_overleft("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overleft"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overleft"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry &< $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overleft"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_overright("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overright"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overright"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry &> $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overright"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_left("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_left"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_left"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry << $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_left"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_right("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_right"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_right"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry >> $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_right"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_overabove("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overabove"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overabove"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry |&> $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overabove"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_overbelow("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overbelow"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overbelow"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry &<| $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overbelow"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_above("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_above"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_above"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry |>> $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_above"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_below("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_below"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_below"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry <<| $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_below"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_same("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_same"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_same"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry ~= $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_same"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_contained("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_contained"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_contained"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry @ $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_contained"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_contain("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_contain"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_contain"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry ~ $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_contain"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_overlap("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_overlap"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."raster_overlap"(IN "public"."raster", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1::geometry && $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_overlap"(IN "public"."raster", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_geometry_contain("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_geometry_contain"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."raster_geometry_contain"(IN "public"."raster", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$select $1::geometry ~ $2$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_geometry_contain"(IN "public"."raster", IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.raster_geometry_overlap("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."raster_geometry_overlap"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."raster_geometry_overlap"(IN "public"."raster", IN "public"."geometry") RETURNS "bool" 
	AS $BODY$select $1::geometry && $2$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."raster_geometry_overlap"(IN "public"."raster", IN "public"."geometry") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_raster_contain("public"."geometry", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_raster_contain"("public"."geometry", "public"."raster");
CREATE FUNCTION "public"."geometry_raster_contain"(IN "public"."geometry", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1 ~ $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_raster_contain"(IN "public"."geometry", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.geometry_raster_overlap("public"."geometry", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."geometry_raster_overlap"("public"."geometry", "public"."raster");
CREATE FUNCTION "public"."geometry_raster_overlap"(IN "public"."geometry", IN "public"."raster") RETURNS "bool" 
	AS $BODY$select $1 && $2::geometry$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."geometry_raster_overlap"(IN "public"."geometry", IN "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_samealignment("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_samealignment"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_samealignment"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS '$libdir/rtpostgis-2.0','RASTER_sameAlignment'
	LANGUAGE c
	COST 1
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_samealignment"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_samealignment"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rastA, rastB - Returns true if rasters have same skew, scale, spatial ref and false if they dont with notice detailing issue.';

-- ----------------------------
--  Function structure for public.st_samealignment(float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_samealignment"(float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8);
CREATE FUNCTION "public"."st_samealignment"(IN ulx1 float8, IN uly1 float8, IN scalex1 float8, IN scaley1 float8, IN skewx1 float8, IN skewy1 float8, IN ulx2 float8, IN uly2 float8, IN scalex2 float8, IN scaley2 float8, IN skewx2 float8, IN skewy2 float8) RETURNS "bool" 
	AS $BODY$ SELECT st_samealignment(st_makeemptyraster(1, 1, $1, $2, $3, $4, $5, $6), st_makeemptyraster(1, 1, $7, $8, $9, $10, $11, $12)) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_samealignment"(IN ulx1 float8, IN uly1 float8, IN scalex1 float8, IN scaley1 float8, IN skewx1 float8, IN skewy1 float8, IN ulx2 float8, IN uly2 float8, IN scalex2 float8, IN scaley2 float8, IN skewx2 float8, IN skewy2 float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_samealignment"(IN ulx1 float8, IN uly1 float8, IN scalex1 float8, IN scaley1 float8, IN skewx1 float8, IN skewy1 float8, IN ulx2 float8, IN uly2 float8, IN scalex2 float8, IN scaley2 float8, IN skewx2 float8, IN skewy2 float8) IS 'args: ulx1, uly1, scalex1, scaley1, skewx1, skewy1, ulx2, uly2, scalex2, scaley2, skewx2, skewy2 - Returns true if rasters have same skew, scale, spatial ref and false if they dont with notice detailing issue.';

-- ----------------------------
--  Function structure for public._st_intersects("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_intersects"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."_st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS '$libdir/rtpostgis-2.0','RASTER_intersects'
	LANGUAGE c
	COST 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersects("public"."raster", int4, "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."raster", int4, "public"."raster", int4);
CREATE FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN TRUE ELSE _st_intersects($1, $2, $3, $4) END $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN nband1 int4, IN rast2 "public"."raster", IN nband2 int4) IS 'args: rasta, nbanda, rastb, nbandb - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.';

-- ----------------------------
--  Function structure for public.st_intersects("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "bool" 
	AS $BODY$ SELECT st_intersects($1, NULL::integer, $2, NULL::integer) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersects"(IN rast1 "public"."raster", IN rast2 "public"."raster") IS 'args: rasta, rastb - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.';

-- ----------------------------
--  Function structure for public.view_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."view_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."view_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('v'::char, $1, $2);
BEGIN
    -- Make sure the view exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    View ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."view_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_intersects("public"."raster", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_intersects"("public"."raster", "public"."geometry", int4);
CREATE FUNCTION "public"."_st_intersects"(IN rast "public"."raster", IN geom "public"."geometry", IN nband int4 DEFAULT NULL::integer) RETURNS "bool" 
	AS $BODY$
	DECLARE
		gr raster;
		scale double precision;
	BEGIN
		IF ST_SRID(rast) != ST_SRID(geom) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;

		IF ST_Intersects(geom, ST_ConvexHull(rast)) IS NOT TRUE THEN
			RETURN FALSE;
		ELSEIF nband IS NULL THEN
			RETURN TRUE;
		END IF;

		-- scale is set to 1/100th of raster for granularity
		SELECT least(scalex, scaley) / 100. INTO scale FROM ST_Metadata(rast);
		gr := _st_asraster(geom, scale, scale);
		IF gr IS NULL THEN
			RAISE EXCEPTION 'Unable to convert geometry to a raster';
			RETURN FALSE;
		END IF;

		RETURN ST_Intersects(rast, nband, gr, 1);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_intersects"(IN rast "public"."raster", IN geom "public"."geometry", IN nband int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersects("public"."raster", "public"."geometry", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."raster", "public"."geometry", int4);
CREATE FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN geom "public"."geometry", IN nband int4 DEFAULT NULL::integer) RETURNS "bool" 
	AS $BODY$ SELECT $1::geometry && $2 AND _st_intersects($1, $2, $3) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN geom "public"."geometry", IN nband int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN geom "public"."geometry", IN nband int4) IS 'args: rast, geommin, nband=NULL - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.';

-- ----------------------------
--  Function structure for public.st_intersects("public"."raster", int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."raster", int4, "public"."geometry");
CREATE FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry") RETURNS "bool" 
	AS $BODY$ SELECT $1::geometry && $3 AND _st_intersects($1, $3, $2) $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersects"(IN rast "public"."raster", IN nband int4, IN geom "public"."geometry") IS 'args: rast, nband, geommin - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.';

-- ----------------------------
--  Function structure for public._st_intersects("public"."geometry", "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_intersects"("public"."geometry", "public"."raster", int4);
CREATE FUNCTION "public"."_st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4 DEFAULT NULL::integer) RETURNS "bool" 
	AS $BODY$
	DECLARE
		hasnodata boolean := TRUE;
		nodata float8 := 0.0;
		convexhull geometry;
		geomintersect geometry;
		x1w double precision := 0.0;
		x2w double precision := 0.0;
		y1w double precision := 0.0;
		y2w double precision := 0.0;
		x1 integer := 0;
		x2 integer := 0;
		x3 integer := 0;
		x4 integer := 0;
		y1 integer := 0;
		y2 integer := 0;
		y3 integer := 0;
		y4 integer := 0;
		x integer := 0;
		y integer := 0;
		xinc integer := 0;
		yinc integer := 0;
		pixelval double precision;
		bintersect boolean := FALSE;
		gtype text;
		scale float8;
		w int;
		h int;
	BEGIN
		IF ST_SRID(rast) != ST_SRID(geom) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;

		convexhull := ST_ConvexHull(rast);
		IF nband IS NOT NULL THEN
			SELECT CASE WHEN bmd.nodatavalue IS NULL THEN FALSE ELSE NULL END INTO hasnodata FROM ST_BandMetaData(rast, nband) AS bmd;
		END IF;

		IF ST_Intersects(geom, convexhull) IS NOT TRUE THEN
			RETURN FALSE;
		ELSEIF nband IS NULL OR hasnodata IS FALSE THEN
			RETURN TRUE;
		END IF;

		-- Get the intersection between with the geometry.
		-- We will search for withvalue pixel only in this area.
		geomintersect := st_intersection(geom, convexhull);

--RAISE NOTICE 'geomintersect=%', st_astext(geomintersect);

		-- If the intersection is empty, return false
		IF st_isempty(geomintersect) THEN
			RETURN FALSE;
		END IF;

		-- We create a minimalistic buffer around the intersection in order to scan every pixels
		-- that would touch the edge or intersect with the geometry
		SELECT sqrt(scalex * scalex + skewy * skewy), width, height INTO scale, w, h FROM ST_Metadata(rast);
		IF scale != 0 THEN
			geomintersect := st_buffer(geomintersect, scale / 1000000);
		END IF;

--RAISE NOTICE 'geomintersect2=%', st_astext(geomintersect);

		-- Find the world coordinates of the bounding box of the intersecting area
		x1w := st_xmin(geomintersect);
		y1w := st_ymin(geomintersect);
		x2w := st_xmax(geomintersect);
		y2w := st_ymax(geomintersect);
		nodata := st_bandnodatavalue(rast, nband);

--RAISE NOTICE 'x1w=%, y1w=%, x2w=%, y2w=%', x1w, y1w, x2w, y2w;

		-- Convert world coordinates to raster coordinates
		x1 := st_world2rastercoordx(rast, x1w, y1w);
		y1 := st_world2rastercoordy(rast, x1w, y1w);
		x2 := st_world2rastercoordx(rast, x2w, y1w);
		y2 := st_world2rastercoordy(rast, x2w, y1w);
		x3 := st_world2rastercoordx(rast, x1w, y2w);
		y3 := st_world2rastercoordy(rast, x1w, y2w);
		x4 := st_world2rastercoordx(rast, x2w, y2w);
		y4 := st_world2rastercoordy(rast, x2w, y2w);

--RAISE NOTICE 'x1=%, y1=%, x2=%, y2=%, x3=%, y3=%, x4=%, y4=%', x1, y1, x2, y2, x3, y3, x4, y4;

		-- Order the raster coordinates for the upcoming FOR loop.
		x1 := int4smaller(int4smaller(int4smaller(x1, x2), x3), x4);
		y1 := int4smaller(int4smaller(int4smaller(y1, y2), y3), y4);
		x2 := int4larger(int4larger(int4larger(x1, x2), x3), x4);
		y2 := int4larger(int4larger(int4larger(y1, y2), y3), y4);

		-- Make sure the range is not lower than 1.
		-- This can happen when world coordinate are exactly on the left border
		-- of the raster and that they do not span on more than one pixel.
		x1 := int4smaller(int4larger(x1, 1), w);
		y1 := int4smaller(int4larger(y1, 1), h);

		-- Also make sure the range does not exceed the width and height of the raster.
		-- This can happen when world coordinate are exactly on the lower right border
		-- of the raster.
		x2 := int4smaller(x2, w);
		y2 := int4smaller(y2, h);

--RAISE NOTICE 'x1=%, y1=%, x2=%, y2=%', x1, y1, x2, y2;

		-- Search exhaustively for withvalue pixel on a moving 3x3 grid
		-- (very often more efficient than searching on a mere 1x1 grid)
		FOR xinc in 0..2 LOOP
			FOR yinc in 0..2 LOOP
				FOR x IN x1+xinc..x2 BY 3 LOOP
					FOR y IN y1+yinc..y2 BY 3 LOOP
						-- Check first if the pixel intersects with the geometry. Often many won't.
						bintersect := NOT st_isempty(st_intersection(st_pixelaspolygon(rast, x, y), geom));

						IF bintersect THEN
							-- If the pixel really intersects, check its value. Return TRUE if with value.
							pixelval := st_value(rast, nband, x, y);
							IF pixelval != nodata THEN
								RETURN TRUE;
							END IF;
						END IF;
					END LOOP;
				END LOOP;
			END LOOP;
		END LOOP;

		RETURN FALSE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersects("public"."geometry", "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersects"("public"."geometry", "public"."raster", int4);
CREATE FUNCTION "public"."st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4 DEFAULT NULL::integer) RETURNS "bool" 
	AS $BODY$ SELECT $1 && $2::geometry AND _st_intersects($1, $2, $3); $BODY$
	LANGUAGE sql
	COST 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersects"(IN geom "public"."geometry", IN rast "public"."raster", IN nband int4) IS 'args: geommin, rast, nband=NULL - Return true if the raster spatially intersects a separate raster or geometry. If the band number is not provided (or set to NULL), only the convex hull of the raster is considered in the test. If the band number is provided, only those pixels with value (not NODATA) are considered in the test.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."geometry", "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."geometry", "public"."raster", int4);
CREATE FUNCTION "public"."st_intersection"(IN geomin "public"."geometry", IN rast "public"."raster", IN band int4 DEFAULT 1) RETURNS SETOF "public"."geomval" 
	AS $BODY$
	DECLARE
		intersects boolean := FALSE;
	BEGIN
		intersects := ST_Intersects(geomin, rast, band);
		IF intersects THEN
			-- Return the intersections of the geometry with the vectorized parts of
			-- the raster and the values associated with those parts, if really their
			-- intersection is not empty.
			RETURN QUERY
				SELECT
					intgeom,
					val
				FROM (
					SELECT
						ST_Intersection((gv).geom, geomin) AS intgeom,
						(gv).val
					FROM ST_DumpAsPolygons(rast, band) gv
					WHERE ST_Intersects((gv).geom, geomin)
				) foo
				WHERE NOT ST_IsEmpty(intgeom);
		ELSE
			-- If the geometry does not intersect with the raster, return an empty
			-- geometry and a null value
			RETURN QUERY
				SELECT
					emptygeom,
					NULL::float8
				FROM ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY', ST_SRID($1)) emptygeom;
		END IF;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."st_intersection"(IN geomin "public"."geometry", IN rast "public"."raster", IN band int4) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN geomin "public"."geometry", IN rast "public"."raster", IN band int4) IS 'args: geom, rast, band_num=1 - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."geometry");
CREATE FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN band int4, IN geomin "public"."geometry") RETURNS SETOF "public"."geomval" 
	AS $BODY$ SELECT st_intersection($3, $1, $2) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN band int4, IN geomin "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN band int4, IN geomin "public"."geometry") IS 'args: rast, band_num, geom - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."geometry")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."geometry");
CREATE FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN geomin "public"."geometry") RETURNS SETOF "public"."geomval" 
	AS $BODY$ SELECT st_intersection($2, $1, 1) $BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN geomin "public"."geometry") OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN rast "public"."raster", IN geomin "public"."geometry") IS 'args: rast, geom - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."raster", int4, text, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."raster", int4, text, _float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text DEFAULT 'BOTH'::text, IN nodataval _float8 DEFAULT NULL::double precision[]) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		rtn raster;
		_returnband text;
		newnodata1 float8;
		newnodata2 float8;
	BEGIN
		newnodata1 := coalesce(nodataval[1], ST_BandNodataValue(rast1, band1), ST_MinPossibleValue(ST_BandPixelType(rast1, band1)));
		newnodata2 := coalesce(nodataval[2], ST_BandNodataValue(rast2, band2), ST_MinPossibleValue(ST_BandPixelType(rast2, band2)));
		
		_returnband := upper(returnband);

		rtn := NULL;
		CASE
			WHEN _returnband = 'BAND1' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
			WHEN _returnband = 'BAND2' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata2);
			WHEN _returnband = 'BOTH' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
				rtn := ST_AddBand(rtn, ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2));
				rtn := ST_SetBandNodataValue(rtn, 2, newnodata2);
			ELSE
				RAISE EXCEPTION 'Unknown value provided for returnband: %', returnband;
				RETURN NULL;
		END CASE;

		RETURN rtn;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text, IN nodataval _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text, IN nodataval _float8) IS 'args: rast1, band_num1, rast2, band_num2, returnband=''BOTH'', nodataval=NULL - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."raster", int4, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."raster", int4, text, float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text, IN nodataval float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, $2, $3, $4, $5, ARRAY[$6, $6]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN returnband text, IN nodataval float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."raster", int4, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."raster", int4, _float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval _float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', $5) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval _float8) IS 'args: rast1, band_num1, rast2, band_num2, nodataval - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", int4, "public"."raster", int4, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", int4, "public"."raster", int4, float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', ARRAY[$5, $5]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN band1 int4, IN rast2 "public"."raster", IN band2 int4, IN nodataval float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."raster", text, _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."raster", text, _float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text DEFAULT 'BOTH'::text, IN nodataval _float8 DEFAULT NULL::double precision[]) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, 1, $2, 1, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text, IN nodataval _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text, IN nodataval _float8) IS 'args: rast1, rast2, returnband=''BOTH'', nodataval=NULL - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."raster", text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."raster", text, float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text, IN nodataval float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, 1, $2, 1, $3, ARRAY[$4, $4]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN returnband text, IN nodataval float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."raster", _float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."raster", _float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval _float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval _float8) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval _float8) IS 'args: rast1, rast2, nodataval - Returns a raster or a set of geometry-pixelvalue pairs representing the shared portion of two rasters or the geometrical intersection of a vectorization of the raster and a geometry.';

-- ----------------------------
--  Function structure for public.st_intersection("public"."raster", "public"."raster", float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_intersection"("public"."raster", "public"."raster", float8);
CREATE FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval float8) RETURNS "public"."raster" 
	AS $BODY$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', ARRAY[$3, $3]) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_intersection"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN nodataval float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_mapalgebra4unionstate("public"."raster", "public"."raster", text, text, text, float8, text, text, text, float8)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_mapalgebra4unionstate"("public"."raster", "public"."raster", text, text, text, float8, text, text, text, float8);
CREATE FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN p_expression text, IN p_nodata1expr text, IN p_nodata2expr text, IN p_nodatanodataval float8, IN t_expression text, IN t_nodata1expr text, IN t_nodata2expr text, IN t_nodatanodataval float8) RETURNS "public"."raster" 
	AS $BODY$
    DECLARE
        t_raster raster;
        p_raster raster;
    BEGIN
        -- With the new ST_MapAlgebraExpr we must split the main expression in three expressions: expression, nodata1expr, nodata2expr and a nodatanodataval
        -- ST_MapAlgebraExpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extentexpr text, nodata1expr text, nodata2expr text, nodatanodatadaval double precision)
        -- We must make sure that when NULL is passed as the first raster to ST_MapAlgebraExpr, ST_MapAlgebraExpr resolve the nodata1expr
        -- Note: rast2 is always a single band raster since it is the accumulated raster thus far
        -- 		There we always set that to band 1 regardless of what band num is requested
        IF upper(p_expression) = 'LAST' THEN
            --RAISE NOTICE 'last asked for ';
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, '[rast2.val]'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'FIRST' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, '[rast1.val]'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'MIN' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, 'LEAST([rast1.val], [rast2.val])'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'MAX' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, 'GREATEST([rast1.val], [rast2.val])'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'COUNT' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, '[rast1.val] + 1'::text, NULL::text, 'UNION'::text, '1'::text, '[rast1.val]'::text, 0::double precision);
        ELSIF upper(p_expression) = 'SUM' THEN
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, '[rast1.val] + [rast2.val]'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
        ELSIF upper(p_expression) = 'RANGE' THEN
        -- have no idea what this is 
            t_raster = ST_MapAlgebraExpr(rast1, 2, rast2, 1, 'LEAST([rast1.val], [rast2.val])'::text, NULL::text, 'UNION'::text, '[rast2.val]'::text, '[rast1.val]'::text, NULL::double precision);
            p_raster := _ST_MapAlgebra4UnionState(rast1, rast2, 'MAX'::text, NULL::text, NULL::text, NULL::double precision, NULL::text, NULL::text, NULL::text, NULL::double precision);
            RETURN ST_AddBand(p_raster, t_raster, 1, 2);
        ELSIF upper(p_expression) = 'MEAN' THEN
        -- looks like t_raster is used to keep track of accumulated count
        -- and p_raster is there to keep track of accumulated sum and final state function
        -- would then do a final map to divide them.  This one is currently broken because 
        	-- have not reworked it so it can do without a final function
            t_raster = ST_MapAlgebraExpr(rast1, 2, rast2, 1, '[rast1.val] + 1'::text, NULL::text, 'UNION'::text, '1'::text, '[rast1.val]'::text, 0::double precision);
            p_raster := _ST_MapAlgebra4UnionState(rast1, rast2, 'SUM'::text, NULL::text, NULL::text, NULL::double precision, NULL::text, NULL::text, NULL::text, NULL::double precision);
            RETURN ST_AddBand(p_raster, t_raster, 1, 2);
        ELSE
            IF t_expression NOTNULL AND t_expression != '' THEN
                t_raster = ST_MapAlgebraExpr(rast1, 2, rast2, 1, t_expression, NULL::text, 'UNION'::text, t_nodata1expr, t_nodata2expr, t_nodatanodataval::double precision);
                p_raster = ST_MapAlgebraExpr(rast1, 1, rast2, 1, p_expression, NULL::text, 'UNION'::text, p_nodata1expr, p_nodata2expr, p_nodatanodataval::double precision);
                RETURN ST_AddBand(p_raster, t_raster, 1, 2);
            END IF;
            RETURN ST_MapAlgebraExpr(rast1, 1, rast2, 1, p_expression, NULL, 'UNION'::text, NULL::text, NULL::text, NULL::double precision);
        END IF;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN p_expression text, IN p_nodata1expr text, IN p_nodata2expr text, IN p_nodatanodataval float8, IN t_expression text, IN t_nodata1expr text, IN t_nodata2expr text, IN t_nodatanodataval float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_mapalgebra4unionstate("public"."raster", "public"."raster", int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_mapalgebra4unionstate"("public"."raster", "public"."raster", int4, text);
CREATE FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN bandnum int4, IN p_expression text) RETURNS "public"."raster" 
	AS $BODY$
        SELECT _ST_MapAlgebra4UnionState($1, ST_Band($2,$3), $4, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
    $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN bandnum int4, IN p_expression text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_mapalgebra4unionstate("public"."raster", "public"."raster", int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_mapalgebra4unionstate"("public"."raster", "public"."raster", int4);
CREATE FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN bandnum int4) RETURNS "public"."raster" 
	AS $BODY$
        SELECT _ST_MapAlgebra4UnionState($1,ST_Band($2,$3), 'LAST', NULL, NULL, NULL, NULL, NULL, NULL, NULL)
    $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN bandnum int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_mapalgebra4unionstate("public"."raster", "public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_mapalgebra4unionstate"("public"."raster", "public"."raster");
CREATE FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster") RETURNS "public"."raster" 
	AS $BODY$
        SELECT _ST_MapAlgebra4UnionState($1,$2, 'LAST', NULL, NULL, NULL, NULL, NULL, NULL, NULL)
    $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_mapalgebra4unionstate("public"."raster", "public"."raster", text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_mapalgebra4unionstate"("public"."raster", "public"."raster", text);
CREATE FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN p_expression text) RETURNS "public"."raster" 
	AS $BODY$
        SELECT _ST_MapAlgebra4UnionState($1,$2, $3, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
    $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_st_mapalgebra4unionstate"(IN rast1 "public"."raster", IN rast2 "public"."raster", IN p_expression text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._st_mapalgebra4unionfinal1("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_st_mapalgebra4unionfinal1"("public"."raster");
CREATE FUNCTION "public"."_st_mapalgebra4unionfinal1"(IN rast "public"."raster") RETURNS "public"."raster" 
	AS $BODY$
    DECLARE
    BEGIN
    	-- NOTE: I have to sacrifice RANGE.  Sorry RANGE.  Any 2 banded raster is going to be treated
    	-- as a MEAN
        IF ST_NumBands(rast) = 2 THEN
            RETURN ST_MapAlgebraExpr(rast, 1, rast, 2, 'CASE WHEN [rast2.val] > 0 THEN [rast1.val] / [rast2.val]::float8 ELSE NULL END'::text, NULL::text, 'UNION'::text, NULL::text, NULL::text, NULL::double precision);
        ELSE
            RETURN rast;
        END IF;
    END;
    $BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_st_mapalgebra4unionfinal1"(IN rast "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", int4, "public"."geometry", _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", int4, "public"."geometry", _float8, bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN band int4, IN geom "public"."geometry", IN nodataval _float8 DEFAULT NULL::double precision[], IN crop bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$
	DECLARE
		g geometry;
		newrast raster;
		geomrast raster;
		numband int;
		bandstart int;
		bandend int;
		newextent text;
		newnodataval double precision;
		newpixtype text;
		bandi int;
		hasnodata bool;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		IF geom IS NULL THEN
			RETURN rast;
		END IF;
		numband := ST_Numbands(rast);
		IF band IS NULL THEN
			bandstart := 1;
			bandend := numband;
		ELSEIF ST_HasNoBand(rast, band) THEN
			RAISE NOTICE 'Raster do not have band %. Returning null', band;
			RETURN NULL;
		ELSE
			bandstart := band;
			bandend := band;
		END IF;

		newpixtype := ST_BandPixelType(rast, bandstart);
		newnodataval := coalesce(nodataval[1], ST_BandNodataValue(rast, bandstart), ST_MinPossibleValue(newpixtype));
		newextent := CASE WHEN crop THEN 'INTERSECTION' ELSE 'FIRST' END;

		-- Convert the geometry to a raster
		g := ST_Intersection(geom, rast::geometry);
		geomrast := ST_AsRaster(g, rast, ST_BandPixelType(rast, band), 1, newnodataval);

		-- Compute the first raster band
		newrast := ST_MapAlgebraExpr(rast, bandstart, geomrast, 1, '[rast1.val]', newpixtype, newextent, newnodataval::text, newnodataval::text, newnodataval);
		-- Set the newnodataval
		newrast := ST_SetBandNodataValue(newrast, bandstart, newnodataval);

		FOR bandi IN bandstart+1..bandend LOOP
			-- for each band we must determine the nodata value
			newpixtype := ST_BandPixelType(rast, bandi);
			IF ST_BandNodataValue(rast, bandi) IS NULL THEN
				hasnodata := FALSE;
			ELSE
				hasnodata := TRUE;
			END IF;
			newnodataval := coalesce(nodataval[bandi], nodataval[array_upper(nodataval, 1)], ST_BandNodataValue(rast, bandi), ST_MinPossibleValue(newpixtype));
			newrast := ST_AddBand(newrast, ST_MapAlgebraExpr(rast, bandi, geomrast, 1, '[rast1.val]', newpixtype, newextent, newnodataval::text, newnodataval::text, newnodataval));

			IF hasnodata THEN
				newrast := ST_SetBandNodataValue(newrast, bandi, newnodataval);
			END IF;
		END LOOP;

		RETURN newrast;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN band int4, IN geom "public"."geometry", IN nodataval _float8, IN crop bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", int4, "public"."geometry", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", int4, "public"."geometry", float8, bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN band int4, IN geom "public"."geometry", IN nodataval float8, IN crop bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, $2, $3, ARRAY[$4], $5) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN band int4, IN geom "public"."geometry", IN nodataval float8, IN crop bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", int4, "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", int4, "public"."geometry", bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN band int4, IN geom "public"."geometry", IN crop bool) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, $2, $3, null::float8[], $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN band int4, IN geom "public"."geometry", IN crop bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_clip"(IN rast "public"."raster", IN band int4, IN geom "public"."geometry", IN crop bool) IS 'args: rast, band, geom, crop - Returns the raster clipped by the input geometry. If no band is specified all bands are returned. If crop is not specified, true is assumed meaning the output raster is cropped.';

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", "public"."geometry", _float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", "public"."geometry", _float8, bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval _float8 DEFAULT NULL::double precision[], IN crop bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, NULL, $2, $3, $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval _float8, IN crop bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval _float8, IN crop bool) IS 'args: rast, geom, nodataval=NULL, crop=true - Returns the raster clipped by the input geometry. If no band is specified all bands are returned. If crop is not specified, true is assumed meaning the output raster is cropped.';

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", "public"."geometry", float8, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", "public"."geometry", float8, bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval float8, IN crop bool DEFAULT true) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, NULL, $2, ARRAY[$3], $4) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN nodataval float8, IN crop bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.st_clip("public"."raster", "public"."geometry", bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."st_clip"("public"."raster", "public"."geometry", bool);
CREATE FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN crop bool) RETURNS "public"."raster" 
	AS $BODY$ SELECT ST_Clip($1, NULL, $2, null::float8[], $3) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN crop bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."st_clip"(IN rast "public"."raster", IN geom "public"."geometry", IN crop bool) IS 'args: rast, geom, crop - Returns the raster clipped by the input geometry. If no band is specified all bands are returned. If crop is not specified, true is assumed meaning the output raster is cropped.';

-- ----------------------------
--  Function structure for public._add_raster_constraint(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint"(name, text);
CREATE FUNCTION "public"."_add_raster_constraint"(IN cn name, IN "sql" text) RETURNS "bool" 
	AS $BODY$
	BEGIN
		BEGIN
			EXECUTE sql;
		EXCEPTION
			WHEN duplicate_object THEN
				RAISE NOTICE 'The constraint "%" already exists.  To replace the existing constraint, delete the constraint and call ApplyRasterConstraints again', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to add constraint "%"', cn;
				RETURN FALSE;
		END;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint"(IN cn name, IN "sql" text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint"(IN rastschema name, IN rasttable name, IN cn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		BEGIN
			EXECUTE 'ALTER TABLE '
				|| fqtn
				|| ' DROP CONSTRAINT '
				|| quote_ident(cn);
			RETURN TRUE;
		EXCEPTION
			WHEN undefined_object THEN
				RAISE NOTICE 'The constraint "%" does not exist.  Skipping', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to drop constraint "%"', cn;
				RETURN FALSE;
		END;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint"(IN rastschema name, IN rasttable name, IN cn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_srid(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_srid"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "int4" 
	AS $BODY$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_srid(% = %';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_srid(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_srid"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_srid_' || $3;

		sql := 'SELECT st_srid('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the SRID of a sample raster';
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_srid('
			|| quote_ident($3)
			|| ') = ' || attr || ')';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_srid(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_srid"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_srid_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_srid"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_scale(name, name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_scale"(name, name, name, bpchar);
CREATE FUNCTION "public"."_raster_constraint_info_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) RETURNS "float8" 
	AS $BODY$
	SELECT
		replace(replace(split_part(split_part(s.consrc, ' = ', 2), '::', 1), ')', ''), '(', '')::double precision
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_scale' || $4 || '(% = %';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_scale(name, name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_scale"(name, name, name, bpchar);
CREATE FUNCTION "public"."_add_raster_constraint_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision;
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_scale' || $4 || '_' || $3;

		sql := 'SELECT st_scale' || $4 || '('
			|| quote_ident($3)
			|| ') FROM '
			|| fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the %-scale of a sample raster', upper($4);
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_scale' || $4 || '('
			|| quote_ident($3)
			|| ')::numeric(16,10) = (' || attr || ')::numeric(16,10))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_scale(name, name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_scale"(name, name, name, bpchar);
CREATE FUNCTION "public"."_drop_raster_constraint_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) RETURNS "bool" 
	AS $BODY$
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;

		RETURN _drop_raster_constraint($1, $2, 'enforce_scale' || $4 || '_' || $3);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_scale"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_blocksize(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_blocksize"(name, name, name, text);
CREATE FUNCTION "public"."_raster_constraint_info_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) RETURNS "int4" 
	AS $BODY$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_' || $4 || '(% = %';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_blocksize(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_blocksize"(name, name, name, text);
CREATE FUNCTION "public"."_add_raster_constraint_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_' || $4 || '_' || $3;

		sql := 'SELECT st_' || $4 || '('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the % of a sample raster', $4;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_' || $4 || '('
			|| quote_ident($3)
			|| ') = ' || attr || ')';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_blocksize(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_blocksize"(name, name, name, text);
CREATE FUNCTION "public"."_drop_raster_constraint_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) RETURNS "bool" 
	AS $BODY$
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;

		RETURN _drop_raster_constraint($1, $2, 'enforce_' || $4 || '_' || $3);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_blocksize"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN axis text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_extent(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_extent"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "public"."geometry" 
	AS $BODY$
	SELECT
		trim(both '''' from split_part(trim(split_part(s.consrc, ',', 2)), '::', 1))::geometry
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_coveredby(st_convexhull(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_extent(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_extent"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_max_extent_' || $3;

		sql := 'SELECT st_ashexewkb(st_convexhull(st_collect(st_convexhull('
			|| quote_ident($3)
			|| ')))) FROM '
			|| fqtn;
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the extent of a sample raster. Attempting memory efficient (slower) approach';

			sql := 'SELECT st_ashexewkb(st_convexhull(st_memunion(st_convexhull('
				|| quote_ident($3)
				|| ')))) FROM '
				|| fqtn;
			BEGIN
				EXECUTE sql INTO attr;
			EXCEPTION WHEN OTHERS THEN
				RAISE NOTICE 'Still unable to get the extent of a sample raster. Cannot add extent constraint';
				RETURN FALSE;
			END;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_coveredby(st_convexhull('
			|| quote_ident($3)
			|| '), ''' || attr || '''::geometry))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_extent(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_extent"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_max_extent_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_extent"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_alignment(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_alignment"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_samealignment(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_alignment(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_alignment"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_same_alignment_' || $3;

		sql := 'SELECT st_makeemptyraster(1, 1, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid) FROM st_metadata((SELECT '
			|| quote_ident($3)
			|| ' FROM ' || fqtn || ' LIMIT 1))';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the alignment of a sample raster';
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_samealignment(' || quote_ident($3) || ', ''' || attr || '''::raster))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_alignment(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_alignment"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_same_alignment_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_alignment"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_regular_blocking(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_regular_blocking"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		cn text;
		sql text;
		rtn boolean;
	BEGIN
		cn := 'enforce_regular_blocking_' || $3;

		sql := 'SELECT TRUE FROM pg_class c, pg_namespace n, pg_constraint s'
			|| ' WHERE n.nspname = ' || quote_literal($1)
			|| ' AND c.relname = ' || quote_literal($2)
			|| ' AND s.connamespace = n.oid AND s.conrelid = c.oid'
			|| ' AND s.conname = ' || quote_literal(cn);
		EXECUTE sql INTO rtn;
		RETURN rtn;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_regular_blocking(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_regular_blocking"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
	BEGIN

		RAISE INFO 'The regular_blocking constraint is just a flag indicating that the column "%" is regularly blocked.  It is up to the end-user to ensure that the column is truely regularly blocked.', quote_ident($3);

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_regular_blocking_' || $3;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (TRUE)';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_regular_blocking(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_regular_blocking"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_regular_blocking_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_regular_blocking"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_num_bands(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_num_bands"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "int4" 
	AS $BODY$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_numbands(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_num_bands(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_num_bands"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_num_bands_' || $3;

		sql := 'SELECT st_numbands(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the number of bands of a sample raster';
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_numbands(' || quote_ident($3)
			|| ') = ' || attr
			|| ')';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_num_bands(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_num_bands"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_num_bands_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_num_bands"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_pixel_types(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_pixel_types"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "_text" 
	AS $BODY$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::text[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_pixel_types(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_pixel_types("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_pixel_types"("public"."raster");
CREATE FUNCTION "public"."_raster_constraint_pixel_types"(IN rast "public"."raster") RETURNS "_text" 
	AS $BODY$ SELECT array_agg(pixeltype)::text[] FROM st_bandmetadata($1, ARRAY[]::int[]); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_pixel_types"(IN rast "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_pixel_types(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_pixel_types"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_pixel_types_' || $3;

		sql := 'SELECT _raster_constraint_pixel_types(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_pixel_types(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			sql := sql || '"' || attr[x] || '"';
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::text[])';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_pixel_types(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_pixel_types"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_pixel_types_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_pixel_types"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_nodata_values(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_nodata_values"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "_float8" 
	AS $BODY$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::double precision[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_nodata_values(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_nodata_values("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_nodata_values"("public"."raster");
CREATE FUNCTION "public"."_raster_constraint_nodata_values"(IN rast "public"."raster") RETURNS "_float8" 
	AS $BODY$ SELECT array_agg(nodatavalue)::double precision[] FROM st_bandmetadata($1, ARRAY[]::int[]); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_nodata_values"(IN rast "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_nodata_values(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_nodata_values"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_nodata_values_' || $3;

		sql := 'SELECT _raster_constraint_nodata_values(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_nodata_values(' || quote_ident($3)
			|| ')::numeric(16,10)[] = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS NULL THEN
				sql := sql || 'NULL';
			ELSE
				sql := sql || attr[x];
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::numeric(16,10)[])';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_nodata_values(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_nodata_values"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_nodata_values_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_nodata_values"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_info_out_db(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_info_out_db"(name, name, name);
CREATE FUNCTION "public"."_raster_constraint_info_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "_bool" 
	AS $BODY$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::boolean[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_out_db(%';
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_info_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._raster_constraint_out_db("public"."raster")
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_raster_constraint_out_db"("public"."raster");
CREATE FUNCTION "public"."_raster_constraint_out_db"(IN rast "public"."raster") RETURNS "_bool" 
	AS $BODY$ SELECT array_agg(isoutdb)::boolean[] FROM st_bandmetadata($1, ARRAY[]::int[]); $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_raster_constraint_out_db"(IN rast "public"."raster") OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_raster_constraint_out_db(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_raster_constraint_out_db"(name, name, name);
CREATE FUNCTION "public"."_add_raster_constraint_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr boolean[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_out_db_' || $3;

		sql := 'SELECT _raster_constraint_out_db(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_out_db(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS FALSE THEN
				sql := sql || 'FALSE';
			ELSE
				sql := sql || 'TRUE';
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::boolean[])';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_raster_constraint_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_raster_constraint_out_db(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_raster_constraint_out_db"(name, name, name);
CREATE FUNCTION "public"."_drop_raster_constraint_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_out_db_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_raster_constraint_out_db"(IN rastschema name, IN rasttable name, IN rastcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.addrasterconstraints(name, name, name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addrasterconstraints"(name, name, name, _text);
CREATE FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) RETURNS "bool" 
	AS $BODY$
	DECLARE
		max int;
		cnt int;
		sql text;
		schema name;
		x int;
		kw text;
		rtn boolean;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be added.  Doing nothing';
			RETURN TRUE;
		END IF;

		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));

			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Adding SRID constraint';
						rtn := _add_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Adding alignment constraint';
						rtn := _add_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						RAISE NOTICE 'Adding regular blocking constraint';
						rtn := _add_raster_constraint_regular_blocking(schema, $2, $3);
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Adding number of bands constraint';
						rtn := _add_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Adding pixel type constraint';
						rtn := _add_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Adding nodata value constraint';
						rtn := _add_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Adding out-of-database constraint';
						rtn := _add_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Adding maximum extent constraint';
						rtn := _add_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;

			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to add constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;

		END LOOP kwloop;

		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be added.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) IS 'args: rastschema, rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.';

-- ----------------------------
--  Function structure for public.addrasterconstraints(name, name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addrasterconstraints"(name, name, _text);
CREATE FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) RETURNS "bool" 
	AS $BODY$ SELECT AddRasterConstraints('', $1, $2, VARIADIC $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) IS 'args: rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.';

-- ----------------------------
--  Function structure for public.addrasterconstraints(name, name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addrasterconstraints"(name, name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
CREATE FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool DEFAULT true, IN scale_x bool DEFAULT true, IN scale_y bool DEFAULT true, IN blocksize_x bool DEFAULT true, IN blocksize_y bool DEFAULT true, IN same_alignment bool DEFAULT true, IN regular_blocking bool DEFAULT false, IN num_bands bool DEFAULT true, IN pixel_types bool DEFAULT true, IN nodata_values bool DEFAULT true, IN out_db bool DEFAULT true, IN extent bool DEFAULT true) RETURNS "bool" 
	AS $BODY$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;

		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;

		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;

		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;

		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;

		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;

		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;

		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;

		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;

		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;

		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;

		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;

		RETURN AddRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."addrasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) IS 'args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=true, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.';

-- ----------------------------
--  Function structure for public.addrasterconstraints(name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addrasterconstraints"(name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
CREATE FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool DEFAULT true, IN scale_x bool DEFAULT true, IN scale_y bool DEFAULT true, IN blocksize_x bool DEFAULT true, IN blocksize_y bool DEFAULT true, IN same_alignment bool DEFAULT true, IN regular_blocking bool DEFAULT false, IN num_bands bool DEFAULT true, IN pixel_types bool DEFAULT true, IN nodata_values bool DEFAULT true, IN out_db bool DEFAULT true, IN extent bool DEFAULT true) RETURNS "bool" 
	AS $BODY$ SELECT AddRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."addrasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) IS 'args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.';

-- ----------------------------
--  Function structure for public.droprasterconstraints(name, name, name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."droprasterconstraints"(name, name, name, _text);
CREATE FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) RETURNS "bool" 
	AS $BODY$
	DECLARE
		max int;
		x int;
		schema name;
		sql text;
		kw text;
		rtn boolean;
		cnt int;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be dropped.  Doing nothing';
			RETURN TRUE;
		END IF;

		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));

			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Dropping SRID constraint';
						rtn := _drop_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Dropping alignment constraint';
						rtn := _drop_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						RAISE NOTICE 'Dropping regular blocking constraint';
						rtn := _drop_raster_constraint_regular_blocking(schema, $2, $3);
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Dropping number of bands constraint';
						rtn := _drop_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Dropping pixel type constraint';
						rtn := _drop_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Dropping nodata value constraint';
						rtn := _drop_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Dropping out-of-database constraint';
						rtn := _drop_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Dropping maximum extent constraint';
						rtn := _drop_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;

			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to drop constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;

		END LOOP kwloop;

		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be dropped.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) IS 'args: rastschema, rasttable, rastcolumn, constraints - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.';

-- ----------------------------
--  Function structure for public.droprasterconstraints(name, name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."droprasterconstraints"(name, name, _text);
CREATE FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) RETURNS "bool" 
	AS $BODY$ SELECT DropRasterConstraints('', $1, $2, VARIADIC $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, INOUT "constraints" _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.views_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."views_are"(_name);
CREATE FUNCTION "public"."views_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'views', _extras('v', $1), _missing('v', $1),
        'Search path ' || pg_catalog.current_setting('search_path') || ' should have the correct views'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."views_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.views_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."views_are"(name, _name);
CREATE FUNCTION "public"."views_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'views', _extras('v', $1, $2), _missing('v', $1, $2),
        'Schema ' || quote_ident($1) || ' should have the correct views'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."views_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.views_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."views_are"(_name, text);
CREATE FUNCTION "public"."views_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are( 'views', _extras('v', $1), _missing('v', $1), $2);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."views_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.droprasterconstraints(name, name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."droprasterconstraints"(name, name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
CREATE FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool DEFAULT true, IN scale_x bool DEFAULT true, IN scale_y bool DEFAULT true, IN blocksize_x bool DEFAULT true, IN blocksize_y bool DEFAULT true, IN same_alignment bool DEFAULT true, IN regular_blocking bool DEFAULT true, IN num_bands bool DEFAULT true, IN pixel_types bool DEFAULT true, IN nodata_values bool DEFAULT true, IN out_db bool DEFAULT true, IN extent bool DEFAULT true) RETURNS "bool" 
	AS $BODY$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;

		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;

		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;

		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;

		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;

		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;

		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;

		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;

		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;

		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;

		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;

		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;

		RETURN DropRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."droprasterconstraints"(IN rastschema name, IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) IS 'args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=true, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.';

-- ----------------------------
--  Function structure for public.droprasterconstraints(name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."droprasterconstraints"(name, name, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool);
CREATE FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool DEFAULT true, IN scale_x bool DEFAULT true, IN scale_y bool DEFAULT true, IN blocksize_x bool DEFAULT true, IN blocksize_y bool DEFAULT true, IN same_alignment bool DEFAULT true, IN regular_blocking bool DEFAULT true, IN num_bands bool DEFAULT true, IN pixel_types bool DEFAULT true, IN nodata_values bool DEFAULT true, IN out_db bool DEFAULT true, IN extent bool DEFAULT true) RETURNS "bool" 
	AS $BODY$ SELECT DropRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) OWNER TO "s3rccp";
COMMENT ON FUNCTION "public"."droprasterconstraints"(IN rasttable name, IN rastcolumn name, IN srid bool, IN scale_x bool, IN scale_y bool, IN blocksize_x bool, IN blocksize_y bool, IN same_alignment bool, IN regular_blocking bool, IN num_bands bool, IN pixel_types bool, IN nodata_values bool, IN out_db bool, IN extent bool) IS 'args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.';

-- ----------------------------
--  Function structure for public._overview_constraint("public"."raster", int4, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_overview_constraint"("public"."raster", int4, name, name, name);
CREATE FUNCTION "public"."_overview_constraint"(IN ov "public"."raster", IN factor int4, IN refschema name, IN reftable name, IN refcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT COALESCE((SELECT TRUE FROM raster_columns WHERE r_table_catalog = current_database() AND r_table_schema = $3 AND r_table_name = $4 AND r_raster_column = $5), FALSE) $BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_overview_constraint"(IN ov "public"."raster", IN factor int4, IN refschema name, IN reftable name, IN refcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._overview_constraint_info(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_overview_constraint_info"(name, name, name);
CREATE FUNCTION "public"."_overview_constraint_info"(IN ovschema name, IN ovtable name, IN ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor int4) RETURNS "record" 
	AS $BODY$
	SELECT
		split_part(split_part(s.consrc, '''::name', 1), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 2), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 3), '''', 2)::name,
		trim(both from split_part(s.consrc, ',', 2))::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_overview_constraint(%'
	$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_overview_constraint_info"(IN ovschema name, IN ovtable name, IN ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add_overview_constraint(name, name, name, name, name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add_overview_constraint"(name, name, name, name, name, name, int4);
CREATE FUNCTION "public"."_add_overview_constraint"(IN ovschema name, IN ovtable name, IN ovcolumn name, IN refschema name, IN reftable name, IN refcolumn name, IN factor int4) RETURNS "bool" 
	AS $BODY$
	DECLARE
		fqtn text;
		cn name;
		sql text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_overview_' || $3;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_overview_constraint(' || quote_ident($3)
			|| ',' || $7
			|| ',' || quote_literal($4)
			|| ',' || quote_literal($5)
			|| ',' || quote_literal($6)
			|| '))';

		RETURN _add_raster_constraint(cn, sql);
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add_overview_constraint"(IN ovschema name, IN ovtable name, IN ovcolumn name, IN refschema name, IN reftable name, IN refcolumn name, IN factor int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._drop_overview_constraint(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_drop_overview_constraint"(name, name, name);
CREATE FUNCTION "public"."_drop_overview_constraint"(IN ovschema name, IN ovtable name, IN ovcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT _drop_raster_constraint($1, $2, 'enforce_overview_' || $3) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_drop_overview_constraint"(IN ovschema name, IN ovtable name, IN ovcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.addoverviewconstraints(name, name, name, name, name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addoverviewconstraints"(name, name, name, name, name, name, int4);
CREATE FUNCTION "public"."addoverviewconstraints"(IN ovschema name, IN ovtable name, IN ovcolumn name, IN refschema name, IN reftable name, IN refcolumn name, IN ovfactor int4) RETURNS "bool" 
	AS $BODY$
	DECLARE
		x int;
		s name;
		t name;
		oschema name;
		rschema name;
		sql text;
		rtn boolean;
	BEGIN
		FOR x IN 1..2 LOOP
			s := '';

			IF x = 1 THEN
				s := $1;
				t := $2;
			ELSE
				s := $4;
				t := $5;
			END IF;

			-- validate user-provided schema
			IF length(s) > 0 THEN
				sql := 'SELECT nspname FROM pg_namespace '
					|| 'WHERE nspname = ' || quote_literal(s)
					|| 'LIMIT 1';
				EXECUTE sql INTO s;

				IF s IS NULL THEN
					RAISE EXCEPTION 'The value % is not a valid schema', quote_literal(s);
					RETURN FALSE;
				END IF;
			END IF;

			-- no schema, determine what it could be using the table
			IF length(s) < 1 THEN
				sql := 'SELECT n.nspname AS schemaname '
					|| 'FROM pg_catalog.pg_class c '
					|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
					|| 'WHERE c.relkind = ' || quote_literal('r')
					|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
					|| ', ' || quote_literal('pg_toast')
					|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
					|| ' AND c.relname = ' || quote_literal(t);
				EXECUTE sql INTO s;

				IF s IS NULL THEN
					RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal(t);
					RETURN FALSE;
				END IF;
			END IF;

			IF x = 1 THEN
				oschema := s;
			ELSE
				rschema := s;
			END IF;
		END LOOP;

		-- reference raster
		rtn := _add_overview_constraint(oschema, $2, $3, rschema, $5, $6, $7);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to add the overview constraint.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addoverviewconstraints"(IN ovschema name, IN ovtable name, IN ovcolumn name, IN refschema name, IN reftable name, IN refcolumn name, IN ovfactor int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.addoverviewconstraints(name, name, name, name, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."addoverviewconstraints"(name, name, name, name, int4);
CREATE FUNCTION "public"."addoverviewconstraints"(IN ovtable name, IN ovcolumn name, IN reftable name, IN refcolumn name, IN ovfactor int4) RETURNS "bool" 
	AS $BODY$ SELECT AddOverviewConstraints('', $1, $2, '', $3, $4, $5) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."addoverviewconstraints"(IN ovtable name, IN ovcolumn name, IN reftable name, IN refcolumn name, IN ovfactor int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.views_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."views_are"(name, _name, text);
CREATE FUNCTION "public"."views_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are( 'views', _extras('v', $1, $2), _missing('v', $1, $2), $3);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."views_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.volatility_is(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."volatility_is"(name, text);
CREATE FUNCTION "public"."volatility_is"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT volatility_is(
        $1, $2,
        'Function ' || quote_ident($1) || '() should be ' || _refine_vol($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."volatility_is"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.dropoverviewconstraints(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropoverviewconstraints"(name, name, name);
CREATE FUNCTION "public"."dropoverviewconstraints"(IN ovschema name, IN ovtable name, IN ovcolumn name) RETURNS "bool" 
	AS $BODY$
	DECLARE
		schema name;
		sql text;
		rtn boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		rtn := _drop_overview_constraint(schema, $2, $3);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to drop the overview constraint .  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropoverviewconstraints"(IN ovschema name, IN ovtable name, IN ovcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.dropoverviewconstraints(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."dropoverviewconstraints"(name, name);
CREATE FUNCTION "public"."dropoverviewconstraints"(IN ovtable name, IN ovcolumn name) RETURNS "bool" 
	AS $BODY$ SELECT DropOverviewConstraints('', $1, $2) $BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."dropoverviewconstraints"(IN ovtable name, IN ovcolumn name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add"(text, int4);
CREATE FUNCTION "public"."_add"(IN text, IN int4) RETURNS "int4" 
	AS $BODY$
    SELECT _add($1, $2, '')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add"(IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._add(text, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_add"(text, int4, text);
CREATE FUNCTION "public"."_add"(IN text, IN int4, IN text) RETURNS "int4" 
	AS $BODY$
BEGIN
    EXECUTE 'INSERT INTO __tcache__ (label, value, note) values (' ||
    quote_literal($1) || ', ' || $2 || ', ' || quote_literal(COALESCE($3, '')) || ')';
    RETURN $2;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_add"(IN text, IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._agg(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_agg"(name);
CREATE FUNCTION "public"."_agg"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT is_agg FROM tap_funky WHERE name = $1 AND is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_agg"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._agg(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_agg"(name, name);
CREATE FUNCTION "public"."_agg"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT is_agg FROM tap_funky WHERE schema = $1 AND name = $2
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_agg"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._agg(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_agg"(name, _name);
CREATE FUNCTION "public"."_agg"(IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT is_agg
      FROM tap_funky
     WHERE name = $1
       AND args = array_to_string($2, ',')
       AND is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_agg"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._agg(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_agg"(name, name, _name);
CREATE FUNCTION "public"."_agg"(IN name, IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT is_agg
      FROM tap_funky
     WHERE schema = $1
       AND name   = $2
       AND args   = array_to_string($3, ',')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_agg"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._alike(bool, anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_alike"(bool, anyelement, text, text);
CREATE FUNCTION "public"."_alike"(IN bool, IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    result ALIAS FOR $1;
    got    ALIAS FOR $2;
    rx     ALIAS FOR $3;
    descr  ALIAS FOR $4;
    output TEXT;
BEGIN
    output := ok( result, descr );
    RETURN output || CASE result WHEN TRUE THEN '' ELSE E'\n' || diag(
           '                  ' || COALESCE( quote_literal(got), 'NULL' ) ||
       E'\n   doesn''t match: ' || COALESCE( quote_literal(rx), 'NULL' )
    ) END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_alike"(IN bool, IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._are(text, _name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_are"(text, _name, _name, text);
CREATE FUNCTION "public"."_are"(IN text, IN _name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    what    ALIAS FOR $1;
    extras  ALIAS FOR $2;
    missing ALIAS FOR $3;
    descr   ALIAS FOR $4;
    msg     TEXT    := '';
    res     BOOLEAN := TRUE;
BEGIN
    IF extras[1] IS NOT NULL THEN
        res = FALSE;
        msg := E'\n' || diag(
            '    Extra ' || what || E':\n        '
            ||  _ident_array_to_string( extras, E'\n        ' )
        );
    END IF;
    IF missing[1] IS NOT NULL THEN
        res = FALSE;
        msg := msg || E'\n' || diag(
            '    Missing ' || what || E':\n        '
            ||  _ident_array_to_string( missing, E'\n        ' )
        );
    END IF;

    RETURN ok(res, descr) || msg;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_are"(IN text, IN _name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._areni(text, _text, _text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_areni"(text, _text, _text, text);
CREATE FUNCTION "public"."_areni"(IN text, IN _text, IN _text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    what    ALIAS FOR $1;
    extras  ALIAS FOR $2;
    missing ALIAS FOR $3;
    descr   ALIAS FOR $4;
    msg     TEXT    := '';
    res     BOOLEAN := TRUE;
BEGIN
    IF extras[1] IS NOT NULL THEN
        res = FALSE;
        msg := E'\n' || diag(
            '    Extra ' || what || E':\n        '
            ||  array_to_string( extras, E'\n        ' )
        );
    END IF;
    IF missing[1] IS NOT NULL THEN
        res = FALSE;
        msg := msg || E'\n' || diag(
            '    Missing ' || what || E':\n        '
            ||  array_to_string( missing, E'\n        ' )
        );
    END IF;

    RETURN ok(res, descr) || msg;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_areni"(IN text, IN _text, IN _text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._assets_are(text, _text, _text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_assets_are"(text, _text, _text, text);
CREATE FUNCTION "public"."_assets_are"(IN text, IN _text, IN _text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _areni(
        $1,
        ARRAY(
            SELECT UPPER($2[i]) AS thing
              FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
             ORDER BY thing
        ),
        ARRAY(
            SELECT $3[i] AS thing
              FROM generate_series(1, array_upper($3, 1)) s(i)
            EXCEPT
            SELECT UPPER($2[i])
              FROM generate_series(1, array_upper($2, 1)) s(i)
             ORDER BY thing
        ),
        $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_assets_are"(IN text, IN _text, IN _text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cast_exists(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cast_exists"(name, name);
CREATE FUNCTION "public"."_cast_exists"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
       SELECT TRUE
         FROM pg_catalog.pg_cast c
        WHERE _cmp_types(castsource, $1)
          AND _cmp_types(casttarget, $2)
   );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cast_exists"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cast_exists(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cast_exists"(name, name, name);
CREATE FUNCTION "public"."_cast_exists"(IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
       SELECT TRUE
         FROM pg_catalog.pg_cast c
         JOIN pg_catalog.pg_proc p ON c.castfunc = p.oid
        WHERE _cmp_types(castsource, $1)
          AND _cmp_types(casttarget, $2)
          AND p.proname   = $3
   );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cast_exists"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cast_exists(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cast_exists"(name, name, name, name);
CREATE FUNCTION "public"."_cast_exists"(IN name, IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
       SELECT TRUE
         FROM pg_catalog.pg_cast c
         JOIN pg_catalog.pg_proc p ON c.castfunc = p.oid
         JOIN pg_catalog.pg_namespace n ON p.pronamespace = n.oid
        WHERE _cmp_types(castsource, $1)
          AND _cmp_types(casttarget, $2)
          AND n.nspname   = $3
          AND p.proname   = $4
   );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cast_exists"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cdi(name, name, anyelement)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cdi"(name, name, anyelement);
CREATE FUNCTION "public"."_cdi"(IN name, IN name, IN anyelement) RETURNS "text" 
	AS $BODY$
    SELECT col_default_is(
        $1, $2, $3,
        'Column ' || quote_ident($1) || '.' || quote_ident($2) || ' should default to '
        || COALESCE( quote_literal($3), 'NULL')
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cdi"(IN name, IN name, IN anyelement) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cdi(name, name, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cdi"(name, name, anyelement, text);
CREATE FUNCTION "public"."_cdi"(IN name, IN name, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF NOT _cexists( $1, $2 ) THEN
        RETURN fail( $4 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist' );
    END IF;

    IF NOT _has_def( $1, $2 ) THEN
        RETURN fail( $4 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || ' has no default' );
    END IF;

    RETURN _def_is(
        pg_catalog.pg_get_expr(d.adbin, d.adrelid),
        pg_catalog.format_type(a.atttypid, a.atttypmod),
        $3, $4
    )
      FROM pg_catalog.pg_class c, pg_catalog.pg_attribute a, pg_catalog.pg_attrdef d
     WHERE c.oid = a.attrelid
       AND pg_table_is_visible(c.oid)
       AND a.atthasdef
       AND a.attrelid = d.adrelid
       AND a.attnum = d.adnum
       AND c.relname = $1
       AND a.attnum > 0
       AND NOT a.attisdropped
       AND a.attname = $2;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cdi"(IN name, IN name, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cdi(name, name, name, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cdi"(name, name, name, anyelement, text);
CREATE FUNCTION "public"."_cdi"(IN name, IN name, IN name, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF NOT _cexists( $1, $2, $3 ) THEN
        RETURN fail( $5 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || '.' || quote_ident($3) || ' does not exist' );
    END IF;

    IF NOT _has_def( $1, $2, $3 ) THEN
        RETURN fail( $5 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || '.' || quote_ident($3) || ' has no default' );
    END IF;

    RETURN _def_is(
        pg_catalog.pg_get_expr(d.adbin, d.adrelid),
        pg_catalog.format_type(a.atttypid, a.atttypmod),
        $4, $5
    )
      FROM pg_catalog.pg_namespace n, pg_catalog.pg_class c, pg_catalog.pg_attribute a,
           pg_catalog.pg_attrdef d
     WHERE n.oid = c.relnamespace
       AND c.oid = a.attrelid
       AND a.atthasdef
       AND a.attrelid = d.adrelid
       AND a.attnum = d.adnum
       AND n.nspname = $1
       AND c.relname = $2
       AND a.attnum > 0
       AND NOT a.attisdropped
       AND a.attname = $3;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cdi"(IN name, IN name, IN name, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cexists(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cexists"(name, name);
CREATE FUNCTION "public"."_cexists"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_class c
          JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
         WHERE c.relname = $1
           AND pg_catalog.pg_table_is_visible(c.oid)
           AND a.attnum > 0
           AND NOT a.attisdropped
           AND a.attname = $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cexists"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cexists(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cexists"(name, name, name);
CREATE FUNCTION "public"."_cexists"(IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_namespace n
          JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
          JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
         WHERE n.nspname = $1
           AND c.relname = $2
           AND a.attnum > 0
           AND NOT a.attisdropped
           AND a.attname = $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cexists"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._ckeys(name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_ckeys"(name, bpchar);
CREATE FUNCTION "public"."_ckeys"(IN name, IN bpchar) RETURNS "_name" 
	AS $BODY$
    SELECT * FROM _keys($1, $2) LIMIT 1;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_ckeys"(IN name, IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._ckeys(name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_ckeys"(name, name, bpchar);
CREATE FUNCTION "public"."_ckeys"(IN name, IN name, IN bpchar) RETURNS "_name" 
	AS $BODY$
    SELECT * FROM _keys($1, $2, $3) LIMIT 1;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_ckeys"(IN name, IN name, IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cleanup()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cleanup"();
CREATE FUNCTION "public"."_cleanup"() RETURNS "bool" 
	AS $BODY$
    DROP TABLE __tresults__;
    DROP SEQUENCE __tresults___numb_seq;
    DROP TABLE __tcache__;
    DROP SEQUENCE __tcache___id_seq;
    SELECT TRUE;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cleanup"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._cmp_types(oid, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_cmp_types"(oid, name);
CREATE FUNCTION "public"."_cmp_types"(IN oid, IN name) RETURNS "bool" 
	AS $BODY$
DECLARE
    dtype TEXT := pg_catalog.format_type($1, NULL);
BEGIN
    RETURN dtype = _quote_ident_like($2, dtype);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_cmp_types"(IN oid, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._col_is_null(name, name, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_col_is_null"(name, name, text, bool);
CREATE FUNCTION "public"."_col_is_null"(IN name, IN name, IN text, IN bool) RETURNS "text" 
	AS $BODY$
BEGIN
    IF NOT _cexists( $1, $2 ) THEN
        RETURN fail( $3 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist' );
    END IF;
    RETURN ok(
        EXISTS(
            SELECT true
              FROM pg_catalog.pg_class c
              JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
             WHERE pg_catalog.pg_table_is_visible(c.oid)
               AND c.relname = $1
               AND a.attnum > 0
               AND NOT a.attisdropped
               AND a.attname    = $2
               AND a.attnotnull = $4
        ), $3
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_col_is_null"(IN name, IN name, IN text, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._col_is_null(name, name, name, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_col_is_null"(name, name, name, text, bool);
CREATE FUNCTION "public"."_col_is_null"(IN name, IN name, IN name, IN text, IN bool) RETURNS "text" 
	AS $BODY$
BEGIN
    IF NOT _cexists( $1, $2, $3 ) THEN
        RETURN fail( $4 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || '.' || quote_ident($3) || ' does not exist' );
    END IF;
    RETURN ok(
        EXISTS(
            SELECT true
              FROM pg_catalog.pg_namespace n
              JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
              JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
             WHERE n.nspname = $1
               AND c.relname = $2
               AND a.attnum  > 0
               AND NOT a.attisdropped
               AND a.attname    = $3
               AND a.attnotnull = $5
        ), $4
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_col_is_null"(IN name, IN name, IN name, IN text, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._constraint(name, bpchar, _name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_constraint"(name, bpchar, _name, text, text);
CREATE FUNCTION "public"."_constraint"(IN name, IN bpchar, IN _name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    akey NAME[];
    keys TEXT[] := '{}';
    have TEXT;
BEGIN
    FOR akey IN SELECT * FROM _keys($1, $2) LOOP
        IF akey = $3 THEN RETURN pass($4); END IF;
        keys = keys || akey::text;
    END LOOP;
    IF array_upper(keys, 0) = 1 THEN
        have := 'No ' || $5 || ' constraints';
    ELSE
        have := array_to_string(keys, E'\n              ');
    END IF;

    RETURN fail($4) || E'\n' || diag(
             '        have: ' || have
       || E'\n        want: ' || CASE WHEN $3 IS NULL THEN 'NULL' ELSE $3::text END
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_constraint"(IN name, IN bpchar, IN _name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._constraint(name, name, bpchar, _name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_constraint"(name, name, bpchar, _name, text, text);
CREATE FUNCTION "public"."_constraint"(IN name, IN name, IN bpchar, IN _name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    akey NAME[];
    keys TEXT[] := '{}';
    have TEXT;
BEGIN
    FOR akey IN SELECT * FROM _keys($1, $2, $3) LOOP
        IF akey = $4 THEN RETURN pass($5); END IF;
        keys = keys || akey::text;
    END LOOP;
    IF array_upper(keys, 0) = 1 THEN
        have := 'No ' || $6 || ' constraints';
    ELSE
        have := array_to_string(keys, E'\n              ');
    END IF;

    RETURN fail($5) || E'\n' || diag(
             '        have: ' || have
       || E'\n        want: ' || CASE WHEN $4 IS NULL THEN 'NULL' ELSE $4::text END
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_constraint"(IN name, IN name, IN bpchar, IN _name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._contract_on(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_contract_on"(text);
CREATE FUNCTION "public"."_contract_on"(IN text) RETURNS "char" 
	AS $BODY$
   SELECT CASE substring(LOWER($1) FROM 1 FOR 1)
          WHEN 's' THEN '1'::"char"
          WHEN 'u' THEN '2'::"char"
          WHEN 'i' THEN '3'::"char"
          WHEN 'd' THEN '4'::"char"
          ELSE          '0'::"char" END
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_contract_on"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._currtest()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_currtest"();
CREATE FUNCTION "public"."_currtest"() RETURNS "int4" 
	AS $BODY$
BEGIN
    RETURN currval('__tresults___numb_seq');
EXCEPTION
    WHEN object_not_in_prerequisite_state THEN RETURN 0;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_currtest"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._db_privs()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_db_privs"();
CREATE FUNCTION "public"."_db_privs"() RETURNS "_name" 
	AS $BODY$
DECLARE
    pgversion INTEGER := pg_version_num();
BEGIN
    IF pgversion < 80200 THEN
        RETURN ARRAY['CREATE', 'TEMPORARY'];
    ELSE
        RETURN ARRAY['CREATE', 'CONNECT', 'TEMPORARY'];
    END IF;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_db_privs"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._def_is(text, text, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_def_is"(text, text, anyelement, text);
CREATE FUNCTION "public"."_def_is"(IN text, IN text, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    thing text;
BEGIN
    IF $1 ~ '^[^'']+[(]' THEN
        -- It's a functional default.
        RETURN is( $1, $3, $4 );
    END IF;

    EXECUTE 'SELECT is('
             || COALESCE($1, 'NULL' || '::' || $2) || '::' || $2 || ', '
             || COALESCE(quote_literal($3), 'NULL') || '::' || $2 || ', '
             || COALESCE(quote_literal($4), 'NULL')
    || ')' INTO thing;
    RETURN thing;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_def_is"(IN text, IN text, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._definer(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_definer"(name);
CREATE FUNCTION "public"."_definer"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT is_definer FROM tap_funky WHERE name = $1 AND is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_definer"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._definer(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_definer"(name, name);
CREATE FUNCTION "public"."_definer"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT is_definer FROM tap_funky WHERE schema = $1 AND name = $2
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_definer"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._definer(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_definer"(name, _name);
CREATE FUNCTION "public"."_definer"(IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT is_definer
      FROM tap_funky
     WHERE name = $1
       AND args = array_to_string($2, ',')
       AND is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_definer"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._definer(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_definer"(name, name, _name);
CREATE FUNCTION "public"."_definer"(IN name, IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT is_definer
      FROM tap_funky
     WHERE schema = $1
       AND name   = $2
       AND args   = array_to_string($3, ',')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_definer"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._dexists(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_dexists"(name);
CREATE FUNCTION "public"."_dexists"(IN name) RETURNS "bool" 
	AS $BODY$
   SELECT EXISTS(
       SELECT true
         FROM pg_catalog.pg_type t
        WHERE t.typname = $1
          AND pg_catalog.pg_type_is_visible(t.oid)
   );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_dexists"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._dexists(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_dexists"(name, name);
CREATE FUNCTION "public"."_dexists"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
   SELECT EXISTS(
       SELECT true
         FROM pg_catalog.pg_namespace n
         JOIN pg_catalog.pg_type t on n.oid = t.typnamespace
        WHERE n.nspname = $1
          AND t.typname = $2
   );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_dexists"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._do_ne(text, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_do_ne"(text, text, text, text);
CREATE FUNCTION "public"."_do_ne"(IN text, IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have    ALIAS FOR $1;
    want    ALIAS FOR $2;
    extras  TEXT[]  := '{}';
    missing TEXT[]  := '{}';
    res     BOOLEAN := TRUE;
    msg     TEXT    := '';
BEGIN
    BEGIN
        -- Find extra records.
        EXECUTE 'SELECT EXISTS ( '
             || '( SELECT * FROM ' || have || ' EXCEPT ' || $4
             || '  SELECT * FROM ' || want
             || ' ) UNION ( '
             || '  SELECT * FROM ' || want || ' EXCEPT ' || $4
             || '  SELECT * FROM ' || have
             || ' ) LIMIT 1 )' INTO res;

        -- Drop the temporary tables.
        EXECUTE 'DROP TABLE ' || have;
        EXECUTE 'DROP TABLE ' || want;
    EXCEPTION WHEN syntax_error OR datatype_mismatch THEN
        msg := E'\n' || diag(
            E'    Columns differ between queries:\n'
            || '        have: (' || _temptypes(have) || E')\n'
            || '        want: (' || _temptypes(want) || ')'
        );
        EXECUTE 'DROP TABLE ' || have;
        EXECUTE 'DROP TABLE ' || want;
        RETURN ok(FALSE, $3) || msg;
    END;

    -- Return the value from the query.
    RETURN ok(res, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_do_ne"(IN text, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._docomp(text, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_docomp"(text, text, text, text);
CREATE FUNCTION "public"."_docomp"(IN text, IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have    ALIAS FOR $1;
    want    ALIAS FOR $2;
    extras  TEXT[]  := '{}';
    missing TEXT[]  := '{}';
    res     BOOLEAN := TRUE;
    msg     TEXT    := '';
    rec     RECORD;
BEGIN
    BEGIN
        -- Find extra records.
        FOR rec in EXECUTE 'SELECT * FROM ' || have || ' EXCEPT ' || $4
                        || 'SELECT * FROM ' || want LOOP
            extras := extras || rec::text;
        END LOOP;

        -- Find missing records.
        FOR rec in EXECUTE 'SELECT * FROM ' || want || ' EXCEPT ' || $4
                        || 'SELECT * FROM ' || have LOOP
            missing := missing || rec::text;
        END LOOP;

        -- Drop the temporary tables.
        EXECUTE 'DROP TABLE ' || have;
        EXECUTE 'DROP TABLE ' || want;
    EXCEPTION WHEN syntax_error OR datatype_mismatch THEN
        msg := E'\n' || diag(
            E'    Columns differ between queries:\n'
            || '        have: (' || _temptypes(have) || E')\n'
            || '        want: (' || _temptypes(want) || ')'
        );
        EXECUTE 'DROP TABLE ' || have;
        EXECUTE 'DROP TABLE ' || want;
        RETURN ok(FALSE, $3) || msg;
    END;

    -- What extra records do we have?
    IF extras[1] IS NOT NULL THEN
        res := FALSE;
        msg := E'\n' || diag(
            E'    Extra records:\n        '
            ||  array_to_string( extras, E'\n        ' )
        );
    END IF;

    -- What missing records do we have?
    IF missing[1] IS NOT NULL THEN
        res := FALSE;
        msg := msg || E'\n' || diag(
            E'    Missing records:\n        '
            ||  array_to_string( missing, E'\n        ' )
        );
    END IF;

    RETURN ok(res, $3) || msg;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_docomp"(IN text, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._expand_context(bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_expand_context"(bpchar);
CREATE FUNCTION "public"."_expand_context"(IN bpchar) RETURNS "text" 
	AS $BODY$
   SELECT CASE $1
          WHEN 'i' THEN 'implicit'
          WHEN 'a' THEN 'assignment'
          WHEN 'e' THEN 'explicit'
          ELSE          'unknown' END
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_expand_context"(IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._expand_on(bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_expand_on"(bpchar);
CREATE FUNCTION "public"."_expand_on"(IN bpchar) RETURNS "text" 
	AS $BODY$
   SELECT CASE $1
          WHEN '1' THEN 'SELECT'
          WHEN '2' THEN 'UPDATE'
          WHEN '3' THEN 'INSERT'
          WHEN '4' THEN 'DELETE'
          ELSE          'UNKNOWN' END
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_expand_on"(IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._expand_vol(bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_expand_vol"(bpchar);
CREATE FUNCTION "public"."_expand_vol"(IN bpchar) RETURNS "text" 
	AS $BODY$
   SELECT CASE $1
          WHEN 'i' THEN 'IMMUTABLE'
          WHEN 's' THEN 'STABLE'
          WHEN 'v' THEN 'VOLATILE'
          ELSE          'UNKNOWN' END
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_expand_vol"(IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._extras(bpchar, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_extras"(bpchar, _name);
CREATE FUNCTION "public"."_extras"(IN bpchar, IN _name) RETURNS "_name" 
	AS $BODY$
    SELECT ARRAY(
        SELECT c.relname
          FROM pg_catalog.pg_namespace n
          JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
         WHERE pg_catalog.pg_table_is_visible(c.oid)
           AND n.nspname <> 'pg_catalog'
           AND c.relkind = $1
           AND c.relname NOT IN ('__tcache__', '__tresults__', 'pg_all_foreign_keys', 'tap_funky', '__tresults___numb_seq', '__tcache___id_seq')
        EXCEPT
        SELECT $2[i]
          FROM generate_series(1, array_upper($2, 1)) s(i)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_extras"(IN bpchar, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._extras(bpchar, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_extras"(bpchar, name, _name);
CREATE FUNCTION "public"."_extras"(IN bpchar, IN name, IN _name) RETURNS "_name" 
	AS $BODY$
    SELECT ARRAY(
        SELECT c.relname
          FROM pg_catalog.pg_namespace n
          JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
         WHERE c.relkind = $1
           AND n.nspname = $2
           AND c.relname NOT IN('pg_all_foreign_keys', 'tap_funky', '__tresults___numb_seq', '__tcache___id_seq')
        EXCEPT
        SELECT $3[i]
          FROM generate_series(1, array_upper($3, 1)) s(i)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_extras"(IN bpchar, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._finish(int4, int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_finish"(int4, int4, int4);
CREATE FUNCTION "public"."_finish"(IN int4, IN int4, IN int4) RETURNS SETOF "text" 
	AS $BODY$
DECLARE
    curr_test ALIAS FOR $1;
    exp_tests INTEGER := $2;
    num_faild ALIAS FOR $3;
    plural    CHAR;
BEGIN
    plural    := CASE exp_tests WHEN 1 THEN '' ELSE 's' END;

    IF curr_test IS NULL THEN
        RAISE EXCEPTION '# No tests run!';
    END IF;

    IF exp_tests = 0 OR exp_tests IS NULL THEN
         -- No plan. Output one now.
        exp_tests = curr_test;
        RETURN NEXT '1..' || exp_tests;
    END IF;

    IF curr_test <> exp_tests THEN
        RETURN NEXT diag(
            'Looks like you planned ' || exp_tests || ' test' ||
            plural || ' but ran ' || curr_test
        );
    ELSIF num_faild > 0 THEN
        RETURN NEXT diag(
            'Looks like you failed ' || num_faild || ' test' ||
            CASE num_faild WHEN 1 THEN '' ELSE 's' END
            || ' of ' || exp_tests
        );
    ELSE

    END IF;
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_finish"(IN int4, IN int4, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._fkexists(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_fkexists"(name, _name);
CREATE FUNCTION "public"."_fkexists"(IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT TRUE
           FROM pg_all_foreign_keys
          WHERE quote_ident(fk_table_name)     = quote_ident($1)
            AND pg_catalog.pg_table_is_visible(fk_table_oid)
            AND fk_columns = $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_fkexists"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._fkexists(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_fkexists"(name, name, _name);
CREATE FUNCTION "public"."_fkexists"(IN name, IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT TRUE
           FROM pg_all_foreign_keys
          WHERE fk_schema_name    = $1
            AND quote_ident(fk_table_name)     = quote_ident($2)
            AND fk_columns = $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_fkexists"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._fprivs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_fprivs_are"(name, name, _name, text);
CREATE FUNCTION "public"."_fprivs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_func_privs($2, $1);
BEGIN
    IF grants[1] = 'undefined_function' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Function ' || $1 || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_fprivs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._func_compare(name, name, bool, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_func_compare"(name, name, bool, text);
CREATE FUNCTION "public"."_func_compare"(IN name, IN name, IN bool, IN text) RETURNS "text" 
	AS $BODY$
    SELECT CASE WHEN $3 IS NULL
      THEN ok( FALSE, $4 ) || _nosuch($1, $2, '{}')
      ELSE ok( $3, $4 )
      END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_func_compare"(IN name, IN name, IN bool, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._func_compare(name, name, anyelement, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_func_compare"(name, name, anyelement, anyelement, text);
CREATE FUNCTION "public"."_func_compare"(IN name, IN name, IN anyelement, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT CASE WHEN $3 IS NULL
      THEN ok( FALSE, $5 ) || _nosuch($1, $2, '{}')
      ELSE is( $3, $4, $5 )
      END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_func_compare"(IN name, IN name, IN anyelement, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._func_compare(name, name, _name, bool, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_func_compare"(name, name, _name, bool, text);
CREATE FUNCTION "public"."_func_compare"(IN name, IN name, IN _name, IN bool, IN text) RETURNS "text" 
	AS $BODY$
    SELECT CASE WHEN $4 IS NULL
      THEN ok( FALSE, $5 ) || _nosuch($1, $2, $3)
      ELSE ok( $4, $5 )
      END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_func_compare"(IN name, IN name, IN _name, IN bool, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._func_compare(name, name, _name, anyelement, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_func_compare"(name, name, _name, anyelement, anyelement, text);
CREATE FUNCTION "public"."_func_compare"(IN name, IN name, IN _name, IN anyelement, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT CASE WHEN $4 IS NULL
      THEN ok( FALSE, $6 ) || _nosuch($1, $2, $3)
      ELSE is( $4, $5, $6 )
      END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_func_compare"(IN name, IN name, IN _name, IN anyelement, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get"(text);
CREATE FUNCTION "public"."_get"(IN text) RETURNS "int4" 
	AS $BODY$
DECLARE
    ret integer;
BEGIN
    EXECUTE 'SELECT value FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' INTO ret;
    RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_ac_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_ac_privs"(name, text);
CREATE FUNCTION "public"."_get_ac_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
DECLARE
    privs  TEXT[] := ARRAY['INSERT', 'REFERENCES', 'SELECT', 'UPDATE'];
    grants TEXT[] := '{}';
BEGIN
    FOR i IN 1..array_upper(privs, 1) LOOP
        BEGIN
            IF pg_catalog.has_any_column_privilege($1, $2, privs[i]) THEN
                grants := grants || privs[i];
            END IF;
        EXCEPTION WHEN undefined_table THEN
            -- Not a valid table name.
            RETURN '{undefined_table}';
        WHEN undefined_object THEN
            -- Not a valid role.
            RETURN '{undefined_role}';
        WHEN invalid_parameter_value THEN
            -- Not a valid permission on this version of PostgreSQL; ignore;
        END;
    END LOOP;
    RETURN grants;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_ac_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_col_ns_type(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_col_ns_type"(name, name, name);
CREATE FUNCTION "public"."_get_col_ns_type"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    -- Always include the namespace.
    SELECT CASE WHEN pg_catalog.pg_type_is_visible(t.oid)
                THEN quote_ident(tn.nspname) || '.'
                ELSE ''
           END || pg_catalog.format_type(a.atttypid, a.atttypmod)
      FROM pg_catalog.pg_namespace n
      JOIN pg_catalog.pg_class c      ON n.oid = c.relnamespace
      JOIN pg_catalog.pg_attribute a  ON c.oid = a.attrelid
      JOIN pg_catalog.pg_type t       ON a.atttypid = t.oid
      JOIN pg_catalog.pg_namespace tn ON t.typnamespace = tn.oid
     WHERE n.nspname = $1
       AND c.relname = $2
       AND a.attname = $3
       AND attnum    > 0
       AND NOT a.attisdropped
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_col_ns_type"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_col_privs(name, text, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_col_privs"(name, text, name);
CREATE FUNCTION "public"."_get_col_privs"(IN name, IN text, IN name) RETURNS "_text" 
	AS $BODY$
DECLARE
    privs  TEXT[] := ARRAY['INSERT', 'REFERENCES', 'SELECT', 'UPDATE'];
    grants TEXT[] := '{}';
BEGIN
    FOR i IN 1..array_upper(privs, 1) LOOP
        IF pg_catalog.has_column_privilege($1, $2, $3, privs[i]) THEN
            grants := grants || privs[i];
        END IF;
    END LOOP;
    RETURN grants;
EXCEPTION
    -- Not a valid column name.
    WHEN undefined_column THEN RETURN '{undefined_column}';
    -- Not a valid table name.
    WHEN undefined_table THEN RETURN '{undefined_table}';
    -- Not a valid role.
    WHEN undefined_object THEN RETURN '{undefined_role}';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_col_privs"(IN name, IN text, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_col_type(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_col_type"(name, name);
CREATE FUNCTION "public"."_get_col_type"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT pg_catalog.format_type(a.atttypid, a.atttypmod)
      FROM pg_catalog.pg_attribute a
      JOIN pg_catalog.pg_class c ON  a.attrelid = c.oid
     WHERE pg_catalog.pg_table_is_visible(c.oid)
       AND c.relname = $1
       AND a.attname = $2
       AND attnum    > 0
       AND NOT a.attisdropped
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_col_type"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_col_type(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_col_type"(name, name, name);
CREATE FUNCTION "public"."_get_col_type"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT pg_catalog.format_type(a.atttypid, a.atttypmod)
      FROM pg_catalog.pg_namespace n
      JOIN pg_catalog.pg_class c     ON n.oid = c.relnamespace
      JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
     WHERE n.nspname = $1
       AND c.relname = $2
       AND a.attname = $3
       AND attnum    > 0
       AND NOT a.attisdropped
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_col_type"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_context(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_context"(name, name);
CREATE FUNCTION "public"."_get_context"(IN name, IN name) RETURNS "char" 
	AS $BODY$
   SELECT c.castcontext
     FROM pg_catalog.pg_cast c
    WHERE _cmp_types(castsource, $1)
      AND _cmp_types(casttarget, $2)
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_context"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_db_owner(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_db_owner"(name);
CREATE FUNCTION "public"."_get_db_owner"(IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(datdba)
      FROM pg_catalog.pg_database
     WHERE datname = $1;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_db_owner"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_db_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_db_privs"(name, text);
CREATE FUNCTION "public"."_get_db_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
DECLARE
    privs  TEXT[] := _db_privs();
    grants TEXT[] := '{}';
BEGIN
    FOR i IN 1..array_upper(privs, 1) LOOP
        BEGIN
            IF pg_catalog.has_database_privilege($1, $2, privs[i]) THEN
                grants := grants || privs[i];
            END IF;
        EXCEPTION WHEN invalid_catalog_name THEN
            -- Not a valid db name.
            RETURN '{invalid_catalog_name}';
        WHEN undefined_object THEN
            -- Not a valid role.
            RETURN '{undefined_role}';
        WHEN invalid_parameter_value THEN
            -- Not a valid permission on this version of PostgreSQL; ignore;
        END;
    END LOOP;
    RETURN grants;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_db_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_dtype(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_dtype"(name);
CREATE FUNCTION "public"."_get_dtype"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT pg_catalog.format_type(t.oid, t.typtypmod)
      FROM pg_catalog.pg_type d
      JOIN pg_catalog.pg_type t  ON d.typbasetype  = t.oid
     WHERE d.typisdefined
       AND pg_catalog.pg_type_is_visible(d.oid)
       AND d.typname = LOWER($1)
       AND d.typtype = 'd'
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_dtype"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_dtype(name, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_dtype"(name, text, bool);
CREATE FUNCTION "public"."_get_dtype"(IN name, IN text, IN bool) RETURNS "text" 
	AS $BODY$
    SELECT CASE WHEN $3 AND pg_catalog.pg_type_is_visible(t.oid)
                THEN quote_ident(tn.nspname) || '.'
                ELSE ''
            END || pg_catalog.format_type(t.oid, t.typtypmod)
      FROM pg_catalog.pg_type d
      JOIN pg_catalog.pg_namespace dn ON d.typnamespace = dn.oid
      JOIN pg_catalog.pg_type t       ON d.typbasetype  = t.oid
      JOIN pg_catalog.pg_namespace tn ON t.typnamespace = tn.oid
     WHERE d.typisdefined
       AND dn.nspname = $1
       AND d.typname  = LOWER($2)
       AND d.typtype  = 'd'
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_dtype"(IN name, IN text, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_fdw_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_fdw_privs"(name, text);
CREATE FUNCTION "public"."_get_fdw_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
BEGIN
    IF pg_catalog.has_foreign_data_wrapper_privilege($1, $2, 'USAGE') THEN
        RETURN '{USAGE}';
    ELSE
        RETURN '{}';
    END IF;
EXCEPTION WHEN undefined_object THEN
    -- Same error code for unknown user or fdw. So figure out which.
    RETURN CASE WHEN SQLERRM LIKE '%' || $1 || '%' THEN
        '{undefined_role}'
    ELSE
        '{undefined_fdw}'
    END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_fdw_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_func_owner(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_func_owner"(name, _name);
CREATE FUNCTION "public"."_get_func_owner"(IN name, IN _name) RETURNS "name" 
	AS $BODY$
    SELECT owner
      FROM tap_funky
     WHERE name = $1
       AND args = array_to_string($2, ',')
       AND is_visible
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_func_owner"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_func_owner(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_func_owner"(name, name, _name);
CREATE FUNCTION "public"."_get_func_owner"(IN name, IN name, IN _name) RETURNS "name" 
	AS $BODY$
    SELECT owner
      FROM tap_funky
     WHERE schema = $1
       AND name   = $2
       AND args   = array_to_string($3, ',')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_func_owner"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_func_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_func_privs"(name, text);
CREATE FUNCTION "public"."_get_func_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
BEGIN
    IF pg_catalog.has_function_privilege($1, $2, 'EXECUTE') THEN
        RETURN '{EXECUTE}';
    ELSE
        RETURN '{}';
    END IF;
EXCEPTION
    -- Not a valid func name.
    WHEN undefined_function THEN RETURN '{undefined_function}';
    -- Not a valid role.
    WHEN undefined_object   THEN RETURN '{undefined_role}';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_func_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_index_owner(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_index_owner"(name, name);
CREATE FUNCTION "public"."_get_index_owner"(IN name, IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(ci.relowner)
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
     WHERE ct.relname = $1
       AND ci.relname = $2
       AND pg_catalog.pg_table_is_visible(ct.oid);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_index_owner"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_index_owner(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_index_owner"(name, name, name);
CREATE FUNCTION "public"."_get_index_owner"(IN name, IN name, IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(ci.relowner)
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
     WHERE n.nspname  = $1
       AND ct.relname = $2
       AND ci.relname = $3;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_index_owner"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_lang_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_lang_privs"(name, text);
CREATE FUNCTION "public"."_get_lang_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
BEGIN
    IF pg_catalog.has_language_privilege($1, $2, 'USAGE') THEN
        RETURN '{USAGE}';
    ELSE
        RETURN '{}';
    END IF;
EXCEPTION WHEN undefined_object THEN
    -- Same error code for unknown user or language. So figure out which.
    RETURN CASE WHEN SQLERRM LIKE '%' || $1 || '%' THEN
        '{undefined_role}'
    ELSE
        '{undefined_language}'
    END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_lang_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_language_owner(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_language_owner"(name);
CREATE FUNCTION "public"."_get_language_owner"(IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(lanowner)
      FROM pg_catalog.pg_language
     WHERE lanname = $1;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_language_owner"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_latest(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_latest"(text);
CREATE FUNCTION "public"."_get_latest"(IN text) RETURNS "_int4" 
	AS $BODY$
DECLARE
    ret integer[];
BEGIN
    EXECUTE 'SELECT ARRAY[ id, value] FROM __tcache__ WHERE label = ' ||
    quote_literal($1) || ' AND id = (SELECT MAX(id) FROM __tcache__ WHERE label = ' ||
    quote_literal($1) || ') LIMIT 1' INTO ret;
    RETURN ret;
EXCEPTION WHEN undefined_table THEN
   RAISE EXCEPTION 'You tried to run a test without a plan! Gotta have a plan';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_latest"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_latest(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_latest"(text, int4);
CREATE FUNCTION "public"."_get_latest"(IN text, IN int4) RETURNS "int4" 
	AS $BODY$
DECLARE
    ret integer;
BEGIN
    EXECUTE 'SELECT MAX(id) FROM __tcache__ WHERE label = ' ||
    quote_literal($1) || ' AND value = ' || $2 INTO ret;
    RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_latest"(IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_note(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_note"(int4);
CREATE FUNCTION "public"."_get_note"(IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
    ret text;
BEGIN
    EXECUTE 'SELECT note FROM __tcache__ WHERE id = ' || $1 || ' LIMIT 1' INTO ret;
    RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_note"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_note(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_note"(text);
CREATE FUNCTION "public"."_get_note"(IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    ret text;
BEGIN
    EXECUTE 'SELECT note FROM __tcache__ WHERE label = ' || quote_literal($1) || ' LIMIT 1' INTO ret;
    RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_note"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_opclass_owner(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_opclass_owner"(name);
CREATE FUNCTION "public"."_get_opclass_owner"(IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(opcowner)
      FROM pg_catalog.pg_opclass
     WHERE opcname = $1
       AND pg_catalog.pg_opclass_is_visible(oid);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_opclass_owner"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_opclass_owner(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_opclass_owner"(name, name);
CREATE FUNCTION "public"."_get_opclass_owner"(IN name, IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(opcowner)
      FROM pg_catalog.pg_opclass oc
      JOIN pg_catalog.pg_namespace n ON oc.opcnamespace = n.oid
     WHERE n.nspname = $1
       AND opcname   = $2;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_opclass_owner"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_rel_owner(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_rel_owner"(name);
CREATE FUNCTION "public"."_get_rel_owner"(IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(c.relowner)
      FROM pg_catalog.pg_class c
     WHERE c.relname = $1
       AND pg_catalog.pg_table_is_visible(c.oid)
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_rel_owner"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_rel_owner(bpchar, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_rel_owner"(bpchar, name);
CREATE FUNCTION "public"."_get_rel_owner"(IN bpchar, IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(c.relowner)
      FROM pg_catalog.pg_class c
     WHERE c.relkind = $1
       AND c.relname = $2
       AND pg_catalog.pg_table_is_visible(c.oid)
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_rel_owner"(IN bpchar, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_rel_owner(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_rel_owner"(name, name);
CREATE FUNCTION "public"."_get_rel_owner"(IN name, IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(c.relowner)
      FROM pg_catalog.pg_class c
      JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
     WHERE n.nspname = $1
       AND c.relname = $2
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_rel_owner"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_rel_owner(bpchar, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_rel_owner"(bpchar, name, name);
CREATE FUNCTION "public"."_get_rel_owner"(IN bpchar, IN name, IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(c.relowner)
      FROM pg_catalog.pg_class c
      JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
     WHERE c.relkind = $1
       AND n.nspname = $2
       AND c.relname = $3
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_rel_owner"(IN bpchar, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_schema_owner(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_schema_owner"(name);
CREATE FUNCTION "public"."_get_schema_owner"(IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(nspowner)
      FROM pg_catalog.pg_namespace
     WHERE nspname = $1;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_schema_owner"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_schema_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_schema_privs"(name, text);
CREATE FUNCTION "public"."_get_schema_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
DECLARE
    privs  TEXT[] := ARRAY['CREATE', 'USAGE'];
    grants TEXT[] := '{}';
BEGIN
    FOR i IN 1..array_upper(privs, 1) LOOP
        IF pg_catalog.has_schema_privilege($1, $2, privs[i]) THEN
            grants := grants || privs[i];
        END IF;
    END LOOP;
    RETURN grants;
EXCEPTION
    -- Not a valid schema name.
    WHEN invalid_schema_name THEN RETURN '{invalid_schema_name}';
    -- Not a valid role.
    WHEN undefined_object   THEN RETURN '{undefined_role}';
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_schema_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_sequence_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_sequence_privs"(name, text);
CREATE FUNCTION "public"."_get_sequence_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
DECLARE
    privs  TEXT[] := ARRAY['SELECT', 'UPDATE', 'USAGE'];
    grants TEXT[] := '{}';
BEGIN
    FOR i IN 1..array_upper(privs, 1) LOOP
        BEGIN
            IF pg_catalog.has_sequence_privilege($1, $2, privs[i]) THEN
                grants := grants || privs[i];
            END IF;
        EXCEPTION WHEN undefined_table THEN
            -- Not a valid sequence name.
            RETURN '{undefined_table}';
        WHEN undefined_object THEN
            -- Not a valid role.
            RETURN '{undefined_role}';
        WHEN invalid_parameter_value THEN
            -- Not a valid permission on this version of PostgreSQL; ignore;
        END;
    END LOOP;
    RETURN grants;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_sequence_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_server_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_server_privs"(name, text);
CREATE FUNCTION "public"."_get_server_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
BEGIN
    IF pg_catalog.has_server_privilege($1, $2, 'USAGE') THEN
        RETURN '{USAGE}';
    ELSE
        RETURN '{}';
    END IF;
EXCEPTION WHEN undefined_object THEN
    -- Same error code for unknown user or server. So figure out which.
    RETURN CASE WHEN SQLERRM LIKE '%' || $1 || '%' THEN
        '{undefined_role}'
    ELSE
        '{undefined_server}'
    END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_server_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_table_privs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_table_privs"(name, text);
CREATE FUNCTION "public"."_get_table_privs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
DECLARE
    privs  TEXT[] := _table_privs();
    grants TEXT[] := '{}';
BEGIN
    FOR i IN 1..array_upper(privs, 1) LOOP
        BEGIN
            IF pg_catalog.has_table_privilege($1, $2, privs[i]) THEN
                grants := grants || privs[i];
            END IF;
        EXCEPTION WHEN undefined_table THEN
            -- Not a valid table name.
            RETURN '{undefined_table}';
        WHEN undefined_object THEN
            -- Not a valid role.
            RETURN '{undefined_role}';
        WHEN invalid_parameter_value THEN
            -- Not a valid permission on this version of PostgreSQL; ignore;
        END;
    END LOOP;
    RETURN grants;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_table_privs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_tablespace_owner(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_tablespace_owner"(name);
CREATE FUNCTION "public"."_get_tablespace_owner"(IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(spcowner)
      FROM pg_catalog.pg_tablespace
     WHERE spcname = $1;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_tablespace_owner"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_tablespaceprivs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_tablespaceprivs"(name, text);
CREATE FUNCTION "public"."_get_tablespaceprivs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
BEGIN
    IF pg_catalog.has_tablespace_privilege($1, $2, 'CREATE') THEN
        RETURN '{CREATE}';
    ELSE
        RETURN '{}';
    END IF;
EXCEPTION WHEN undefined_object THEN
    -- Same error code for unknown user or tablespace. So figure out which.
    RETURN CASE WHEN SQLERRM LIKE '%' || $1 || '%' THEN
        '{undefined_role}'
    ELSE
        '{undefined_tablespace}'
    END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_tablespaceprivs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_type_owner(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_type_owner"(name);
CREATE FUNCTION "public"."_get_type_owner"(IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(typowner)
      FROM pg_catalog.pg_type
     WHERE typname = $1
       AND pg_catalog.pg_type_is_visible(oid)
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_type_owner"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._get_type_owner(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_get_type_owner"(name, name);
CREATE FUNCTION "public"."_get_type_owner"(IN name, IN name) RETURNS "name" 
	AS $BODY$
    SELECT pg_catalog.pg_get_userbyid(t.typowner)
      FROM pg_catalog.pg_type t
      JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
     WHERE n.nspname = $1
       AND t.typname = $2
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_get_type_owner"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._got_func(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_got_func"(name);
CREATE FUNCTION "public"."_got_func"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS( SELECT TRUE FROM tap_funky WHERE name = $1 AND is_visible);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_got_func"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._got_func(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_got_func"(name, name);
CREATE FUNCTION "public"."_got_func"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS( SELECT TRUE FROM tap_funky WHERE schema = $1 AND name = $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_got_func"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._got_func(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_got_func"(name, _name);
CREATE FUNCTION "public"."_got_func"(IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT TRUE
          FROM tap_funky
         WHERE name = $1
           AND args = array_to_string($2, ',')
           AND is_visible
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_got_func"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._got_func(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_got_func"(name, name, _name);
CREATE FUNCTION "public"."_got_func"(IN name, IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT TRUE
          FROM tap_funky
         WHERE schema = $1
           AND name   = $2
           AND args   = array_to_string($3, ',')
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_got_func"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._grolist(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_grolist"(name);
CREATE FUNCTION "public"."_grolist"(IN name) RETURNS "_oid" 
	AS $BODY$
    SELECT ARRAY(
        SELECT member
          FROM pg_catalog.pg_auth_members m
          JOIN pg_catalog.pg_roles r ON m.roleid = r.oid
         WHERE r.rolname =  $1
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_grolist"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._has_def(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_has_def"(name, name);
CREATE FUNCTION "public"."_has_def"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT a.atthasdef
      FROM pg_catalog.pg_class c
      JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
     WHERE c.relname = $1
       AND a.attnum > 0
       AND NOT a.attisdropped
       AND a.attname = $2
       AND pg_catalog.pg_table_is_visible(c.oid)
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_has_def"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._has_def(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_has_def"(name, name, name);
CREATE FUNCTION "public"."_has_def"(IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT a.atthasdef
      FROM pg_catalog.pg_namespace n
      JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
      JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
     WHERE n.nspname = $1
       AND c.relname = $2
       AND a.attnum > 0
       AND NOT a.attisdropped
       AND a.attname = $3
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_has_def"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._has_group(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_has_group"(name);
CREATE FUNCTION "public"."_has_group"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_group
         WHERE groname = $1
    );
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_has_group"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._has_role(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_has_role"(name);
CREATE FUNCTION "public"."_has_role"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_roles
         WHERE rolname = $1
    );
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_has_role"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._has_type(name, _bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_has_type"(name, _bpchar);
CREATE FUNCTION "public"."_has_type"(IN name, IN _bpchar) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_type t
         WHERE t.typisdefined
           AND pg_catalog.pg_type_is_visible(t.oid)
           AND t.typname = $1
           AND t.typtype = ANY( COALESCE($2, ARRAY['b', 'c', 'd', 'p', 'e']) )
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_has_type"(IN name, IN _bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._has_type(name, name, _bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_has_type"(name, name, _bpchar);
CREATE FUNCTION "public"."_has_type"(IN name, IN name, IN _bpchar) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_type t
          JOIN pg_catalog.pg_namespace n ON t.typnamespace = n.oid
         WHERE t.typisdefined
           AND n.nspname = $1
           AND t.typname = $2
           AND t.typtype = ANY( COALESCE($3, ARRAY['b', 'c', 'd', 'p', 'e']) )
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_has_type"(IN name, IN name, IN _bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._has_user(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_has_user"(name);
CREATE FUNCTION "public"."_has_user"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS( SELECT true FROM pg_catalog.pg_user WHERE usename = $1);
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_has_user"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._hasc(name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_hasc"(name, bpchar);
CREATE FUNCTION "public"."_hasc"(IN name, IN bpchar) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
            SELECT true
              FROM pg_catalog.pg_class c
              JOIN pg_catalog.pg_constraint x ON c.oid = x.conrelid
             WHERE c.relhaspkey = true
               AND pg_table_is_visible(c.oid)
               AND c.relname = $1
               AND x.contype = $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_hasc"(IN name, IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._hasc(name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_hasc"(name, name, bpchar);
CREATE FUNCTION "public"."_hasc"(IN name, IN name, IN bpchar) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
            SELECT true
              FROM pg_catalog.pg_namespace n
              JOIN pg_catalog.pg_class c      ON c.relnamespace = n.oid
              JOIN pg_catalog.pg_constraint x ON c.oid = x.conrelid
             WHERE c.relhaspkey = true
               AND n.nspname = $1
               AND c.relname = $2
               AND x.contype = $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_hasc"(IN name, IN name, IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._have_index(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_have_index"(name, name);
CREATE FUNCTION "public"."_have_index"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
    SELECT TRUE
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
     WHERE ct.relname = $1
       AND ci.relname = $2
       AND pg_catalog.pg_table_is_visible(ct.oid)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_have_index"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._have_index(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_have_index"(name, name, name);
CREATE FUNCTION "public"."_have_index"(IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
    SELECT TRUE
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
     WHERE n.nspname  = $1
       AND ct.relname = $2
       AND ci.relname = $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_have_index"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._ident_array_to_string(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_ident_array_to_string"(_name, text);
CREATE FUNCTION "public"."_ident_array_to_string"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT array_to_string(ARRAY(
        SELECT quote_ident($1[i])
          FROM generate_series(1, array_upper($1, 1)) s(i)
         ORDER BY i
    ), $2);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_ident_array_to_string"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._ikeys(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_ikeys"(name, name);
CREATE FUNCTION "public"."_ikeys"(IN name, IN name) RETURNS "_text" 
	AS $BODY$
    SELECT ARRAY(
        SELECT pg_catalog.pg_get_indexdef( ci.oid, s.i + 1, false)
          FROM pg_catalog.pg_index x
          JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
          JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
          JOIN generate_series(0, current_setting('max_index_keys')::int - 1) s(i)
            ON x.indkey[s.i] IS NOT NULL
         WHERE ct.relname = $1
           AND ci.relname = $2
           AND pg_catalog.pg_table_is_visible(ct.oid)
         ORDER BY s.i
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_ikeys"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.volatility_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."volatility_is"(name, name, text);
CREATE FUNCTION "public"."volatility_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT volatility_is(
        $1, $2, $3,
        'Function ' || quote_ident($1) || '.' || quote_ident($2)
        || '() should be ' || _refine_vol($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."volatility_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._ikeys(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_ikeys"(name, name, name);
CREATE FUNCTION "public"."_ikeys"(IN name, IN name, IN name) RETURNS "_text" 
	AS $BODY$
    SELECT ARRAY(
        SELECT pg_catalog.pg_get_indexdef( ci.oid, s.i + 1, false)
          FROM pg_catalog.pg_index x
          JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
          JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
          JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
          JOIN generate_series(0, current_setting('max_index_keys')::int - 1) s(i)
            ON x.indkey[s.i] IS NOT NULL
         WHERE ct.relname = $2
           AND ci.relname = $3
           AND n.nspname  = $1
         ORDER BY s.i
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_ikeys"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._is_instead(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_is_instead"(name, name);
CREATE FUNCTION "public"."_is_instead"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT r.is_instead
      FROM pg_catalog.pg_rewrite r
      JOIN pg_catalog.pg_class c     ON c.oid = r.ev_class
     WHERE r.rulename = $2
       AND c.relname  = $1
       AND pg_catalog.pg_table_is_visible(c.oid)
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_is_instead"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._is_instead(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_is_instead"(name, name, name);
CREATE FUNCTION "public"."_is_instead"(IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT r.is_instead
      FROM pg_catalog.pg_rewrite r
      JOIN pg_catalog.pg_class c     ON c.oid = r.ev_class
      JOIN pg_catalog.pg_namespace n ON c.relnamespace = n.oid
     WHERE r.rulename = $3
       AND c.relname  = $2
       AND n.nspname  = $1
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_is_instead"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._is_schema(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_is_schema"(name);
CREATE FUNCTION "public"."_is_schema"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_namespace
          WHERE nspname = $1
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_is_schema"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._is_super(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_is_super"(name);
CREATE FUNCTION "public"."_is_super"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT rolsuper
      FROM pg_catalog.pg_roles
     WHERE rolname = $1
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_is_super"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._is_trusted(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_is_trusted"(name);
CREATE FUNCTION "public"."_is_trusted"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT lanpltrusted FROM pg_catalog.pg_language WHERE lanname = $1;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_is_trusted"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._is_verbose()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_is_verbose"();
CREATE FUNCTION "public"."_is_verbose"() RETURNS "bool" 
	AS $BODY$
    SELECT current_setting('client_min_messages') NOT IN (
        'warning', 'error', 'fatal', 'panic'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_is_verbose"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._keys(name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_keys"(name, bpchar);
CREATE FUNCTION "public"."_keys"(IN name, IN bpchar) RETURNS SETOF "_name" 
	AS $BODY$
    SELECT _pg_sv_column_array(x.conrelid,x.conkey)
      FROM pg_catalog.pg_class c
      JOIN pg_catalog.pg_constraint x  ON c.oid = x.conrelid
       AND c.relname = $1
       AND x.contype = $2
     WHERE pg_catalog.pg_table_is_visible(c.oid)
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_keys"(IN name, IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._keys(name, name, bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_keys"(name, name, bpchar);
CREATE FUNCTION "public"."_keys"(IN name, IN name, IN bpchar) RETURNS SETOF "_name" 
	AS $BODY$
    SELECT _pg_sv_column_array(x.conrelid,x.conkey)
      FROM pg_catalog.pg_namespace n
      JOIN pg_catalog.pg_class c       ON n.oid = c.relnamespace
      JOIN pg_catalog.pg_constraint x  ON c.oid = x.conrelid
     WHERE n.nspname = $1
       AND c.relname = $2
       AND x.contype = $3
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_keys"(IN name, IN name, IN bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._lang(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_lang"(name);
CREATE FUNCTION "public"."_lang"(IN name) RETURNS "name" 
	AS $BODY$
    SELECT l.lanname
      FROM tap_funky f
      JOIN pg_catalog.pg_language l ON f.langoid = l.oid
     WHERE f.name = $1
       AND f.is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_lang"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._lang(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_lang"(name, name);
CREATE FUNCTION "public"."_lang"(IN name, IN name) RETURNS "name" 
	AS $BODY$
    SELECT l.lanname
      FROM tap_funky f
      JOIN pg_catalog.pg_language l ON f.langoid = l.oid
     WHERE f.schema = $1
       and f.name   = $2
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_lang"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._lang(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_lang"(name, _name);
CREATE FUNCTION "public"."_lang"(IN name, IN _name) RETURNS "name" 
	AS $BODY$
    SELECT l.lanname
      FROM tap_funky f
      JOIN pg_catalog.pg_language l ON f.langoid = l.oid
     WHERE f.name = $1
       AND f.args = array_to_string($2, ',')
       AND f.is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_lang"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._lang(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_lang"(name, name, _name);
CREATE FUNCTION "public"."_lang"(IN name, IN name, IN _name) RETURNS "name" 
	AS $BODY$
    SELECT l.lanname
      FROM tap_funky f
      JOIN pg_catalog.pg_language l ON f.langoid = l.oid
     WHERE f.schema = $1
       and f.name   = $2
       AND f.args   = array_to_string($3, ',')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_lang"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._missing(bpchar, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_missing"(bpchar, _name);
CREATE FUNCTION "public"."_missing"(IN bpchar, IN _name) RETURNS "_name" 
	AS $BODY$
    SELECT ARRAY(
        SELECT $2[i]
          FROM generate_series(1, array_upper($2, 1)) s(i)
        EXCEPT
        SELECT c.relname
          FROM pg_catalog.pg_namespace n
          JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
         WHERE pg_catalog.pg_table_is_visible(c.oid)
           AND n.nspname NOT IN ('pg_catalog', 'information_schema')
           AND c.relkind = $1
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_missing"(IN bpchar, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._missing(bpchar, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_missing"(bpchar, name, _name);
CREATE FUNCTION "public"."_missing"(IN bpchar, IN name, IN _name) RETURNS "_name" 
	AS $BODY$
    SELECT ARRAY(
        SELECT $3[i]
          FROM generate_series(1, array_upper($3, 1)) s(i)
        EXCEPT
        SELECT c.relname
          FROM pg_catalog.pg_namespace n
          JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
         WHERE c.relkind = $1
           AND n.nspname = $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_missing"(IN bpchar, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._nosuch(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_nosuch"(name, name, _name);
CREATE FUNCTION "public"."_nosuch"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT E'\n' || diag(
        '    Function '
          || CASE WHEN $1 IS NOT NULL THEN quote_ident($1) || '.' ELSE '' END
          || quote_ident($2) || '('
          || array_to_string($3, ', ') || ') does not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_nosuch"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._op_exists(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_op_exists"(name, name, name);
CREATE FUNCTION "public"."_op_exists"(IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
       SELECT TRUE
         FROM pg_catalog.pg_operator o
        WHERE pg_catalog.pg_operator_is_visible(o.oid)
          AND o.oprname = $2
          AND CASE o.oprkind WHEN 'l' THEN $1 IS NULL
              ELSE _cmp_types(o.oprleft, $1) END
          AND CASE o.oprkind WHEN 'r' THEN $3 IS NULL
              ELSE _cmp_types(o.oprright, $3) END
   );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_op_exists"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._op_exists(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_op_exists"(name, name, name, name);
CREATE FUNCTION "public"."_op_exists"(IN name, IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
       SELECT TRUE
         FROM pg_catalog.pg_operator o
        WHERE pg_catalog.pg_operator_is_visible(o.oid)
          AND o.oprname = $2
          AND CASE o.oprkind WHEN 'l' THEN $1 IS NULL
              ELSE _cmp_types(o.oprleft, $1) END
          AND CASE o.oprkind WHEN 'r' THEN $3 IS NULL
              ELSE _cmp_types(o.oprright, $3) END
          AND _cmp_types(o.oprresult, $4)
   );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_op_exists"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.volatility_is(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."volatility_is"(name, _name, text);
CREATE FUNCTION "public"."volatility_is"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT volatility_is(
        $1, $2, $3,
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should be ' || _refine_vol($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."volatility_is"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._op_exists(name, name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_op_exists"(name, name, name, name, name);
CREATE FUNCTION "public"."_op_exists"(IN name, IN name, IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
       SELECT TRUE
         FROM pg_catalog.pg_operator o
         JOIN pg_catalog.pg_namespace n ON o.oprnamespace = n.oid
        WHERE n.nspname = $2
          AND o.oprname = $3
          AND CASE o.oprkind WHEN 'l' THEN $1 IS NULL
              ELSE _cmp_types(o.oprleft, $1) END
          AND CASE o.oprkind WHEN 'r' THEN $4 IS NULL
              ELSE _cmp_types(o.oprright, $4) END
          AND _cmp_types(o.oprresult, $5)
   );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_op_exists"(IN name, IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._opc_exists(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_opc_exists"(name);
CREATE FUNCTION "public"."_opc_exists"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
        SELECT TRUE
          FROM pg_catalog.pg_opclass oc
         WHERE oc.opcname = $1
           AND pg_opclass_is_visible(oid)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_opc_exists"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._opc_exists(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_opc_exists"(name, name);
CREATE FUNCTION "public"."_opc_exists"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS (
        SELECT TRUE
          FROM pg_catalog.pg_opclass oc
          JOIN pg_catalog.pg_namespace n ON oc.opcnamespace = n.oid
         WHERE n.nspname  = $1
           AND oc.opcname = $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_opc_exists"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._pg_sv_column_array(oid, _int2)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_pg_sv_column_array"(oid, _int2);
CREATE FUNCTION "public"."_pg_sv_column_array"(IN oid, IN _int2) RETURNS "_name" 
	AS $BODY$
    SELECT ARRAY(
        SELECT a.attname
          FROM pg_catalog.pg_attribute a
          JOIN generate_series(1, array_upper($2, 1)) s(i) ON a.attnum = $2[i]
         WHERE attrelid = $1
         ORDER BY i
    )
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_pg_sv_column_array"(IN oid, IN _int2) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._pg_sv_table_accessible(oid, oid)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_pg_sv_table_accessible"(oid, oid);
CREATE FUNCTION "public"."_pg_sv_table_accessible"(IN oid, IN oid) RETURNS "bool" 
	AS $BODY$
    SELECT CASE WHEN has_schema_privilege($1, 'USAGE') THEN (
                  has_table_privilege($2, 'SELECT')
               OR has_table_privilege($2, 'INSERT')
               or has_table_privilege($2, 'UPDATE')
               OR has_table_privilege($2, 'DELETE')
               OR has_table_privilege($2, 'RULE')
               OR has_table_privilege($2, 'REFERENCES')
               OR has_table_privilege($2, 'TRIGGER')
           ) ELSE FALSE
    END;
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_pg_sv_table_accessible"(IN oid, IN oid) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._pg_sv_type_array(_oid)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_pg_sv_type_array"(_oid);
CREATE FUNCTION "public"."_pg_sv_type_array"(IN _oid) RETURNS "_name" 
	AS $BODY$
    SELECT ARRAY(
        SELECT t.typname
          FROM pg_catalog.pg_type t
          JOIN generate_series(1, array_upper($1, 1)) s(i) ON t.oid = $1[i]
         ORDER BY i
    )
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."_pg_sv_type_array"(IN _oid) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._query(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_query"(text);
CREATE FUNCTION "public"."_query"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT CASE
        WHEN $1 LIKE '"%' OR $1 !~ '[[:space:]]' THEN 'EXECUTE ' || $1
        ELSE $1
    END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_query"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._quote_ident_like(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_quote_ident_like"(text, text);
CREATE FUNCTION "public"."_quote_ident_like"(IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have    TEXT;
    pcision TEXT;
BEGIN
    -- Just return it if rhs isn't quoted.
    IF $2 !~ '"' THEN RETURN $1; END IF;

    -- If it's quoted ident without precision, return it quoted.
    IF $2 ~ '"$' THEN RETURN quote_ident($1); END IF;

    pcision := substring($1 FROM '[(][^")]+[)]$');

    -- Just quote it if thre is no precision.
    if pcision IS NULL THEN RETURN quote_ident($1); END IF;

    -- Quote the non-precision part and concatenate with precision.
    RETURN quote_ident(substring($1 FOR char_length($1) - char_length(pcision)))
        || pcision;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_quote_ident_like"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._refine_vol(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_refine_vol"(text);
CREATE FUNCTION "public"."_refine_vol"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT _expand_vol(substring(LOWER($1) FROM 1 FOR 1)::char);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."_refine_vol"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._relcomp(text, anyarray, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_relcomp"(text, anyarray, text, text);
CREATE FUNCTION "public"."_relcomp"(IN text, IN anyarray, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _docomp(
        _temptable( $1, '__taphave__' ),
        _temptable( $2, '__tapwant__' ),
        $3, $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_relcomp"(IN text, IN anyarray, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._relcomp(text, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_relcomp"(text, text, text, text);
CREATE FUNCTION "public"."_relcomp"(IN text, IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _docomp(
        _temptable( $1, '__taphave__' ),
        _temptable( $2, '__tapwant__' ),
        $3, $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_relcomp"(IN text, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._relcomp(text, text, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_relcomp"(text, text, text, text, text);
CREATE FUNCTION "public"."_relcomp"(IN text, IN text, IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have    TEXT    := _temptable( $1, '__taphave__' );
    want    TEXT    := _temptable( $2, '__tapwant__' );
    results TEXT[]  := '{}';
    res     BOOLEAN := TRUE;
    msg     TEXT    := '';
    rec     RECORD;
BEGIN
    BEGIN
        -- Find relevant records.
        FOR rec in EXECUTE 'SELECT * FROM ' || want || ' ' || $4
                       || ' SELECT * FROM ' || have LOOP
            results := results || rec::text;
        END LOOP;

        -- Drop the temporary tables.
        EXECUTE 'DROP TABLE ' || have;
        EXECUTE 'DROP TABLE ' || want;
    EXCEPTION WHEN syntax_error OR datatype_mismatch THEN
        msg := E'\n' || diag(
            E'    Columns differ between queries:\n'
            || '        have: (' || _temptypes(have) || E')\n'
            || '        want: (' || _temptypes(want) || ')'
        );
        EXECUTE 'DROP TABLE ' || have;
        EXECUTE 'DROP TABLE ' || want;
        RETURN ok(FALSE, $3) || msg;
    END;

    -- What records do we have?
    IF results[1] IS NOT NULL THEN
        res := FALSE;
        msg := msg || E'\n' || diag(
            '    ' || $5 || E' records:\n        '
            ||  array_to_string( results, E'\n        ' )
        );
    END IF;

    RETURN ok(res, $3) || msg;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_relcomp"(IN text, IN text, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._relexists(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_relexists"(name);
CREATE FUNCTION "public"."_relexists"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_class c
         WHERE pg_catalog.pg_table_is_visible(c.oid)
           AND c.relname = $1
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_relexists"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._relexists(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_relexists"(name, name);
CREATE FUNCTION "public"."_relexists"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_namespace n
          JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
         WHERE n.nspname = $1
           AND c.relname = $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_relexists"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._relne(text, anyarray, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_relne"(text, anyarray, text, text);
CREATE FUNCTION "public"."_relne"(IN text, IN anyarray, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _do_ne(
        _temptable( $1, '__taphave__' ),
        _temptable( $2, '__tapwant__' ),
        $3, $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_relne"(IN text, IN anyarray, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._relne(text, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_relne"(text, text, text, text);
CREATE FUNCTION "public"."_relne"(IN text, IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _do_ne(
        _temptable( $1, '__taphave__' ),
        _temptable( $2, '__tapwant__' ),
        $3, $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_relne"(IN text, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._returns(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_returns"(name);
CREATE FUNCTION "public"."_returns"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT returns FROM tap_funky WHERE name = $1 AND is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_returns"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._returns(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_returns"(name, name);
CREATE FUNCTION "public"."_returns"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT returns FROM tap_funky WHERE schema = $1 AND name = $2
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_returns"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._returns(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_returns"(name, _name);
CREATE FUNCTION "public"."_returns"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT returns
      FROM tap_funky
     WHERE name = $1
       AND args = array_to_string($2, ',')
       AND is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_returns"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._returns(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_returns"(name, name, _name);
CREATE FUNCTION "public"."_returns"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT returns
      FROM tap_funky
     WHERE schema = $1
       AND name   = $2
       AND args   = array_to_string($3, ',')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_returns"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._rexists(bpchar, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_rexists"(bpchar, name);
CREATE FUNCTION "public"."_rexists"(IN bpchar, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_class c
         WHERE c.relkind = $1
           AND pg_catalog.pg_table_is_visible(c.oid)
           AND c.relname = $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_rexists"(IN bpchar, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._rexists(bpchar, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_rexists"(bpchar, name, name);
CREATE FUNCTION "public"."_rexists"(IN bpchar, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_namespace n
          JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
         WHERE c.relkind = $1
           AND n.nspname = $2
           AND c.relname = $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_rexists"(IN bpchar, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._rule_on(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_rule_on"(name, name);
CREATE FUNCTION "public"."_rule_on"(IN name, IN name) RETURNS "char" 
	AS $BODY$
    SELECT r.ev_type
      FROM pg_catalog.pg_rewrite r
      JOIN pg_catalog.pg_class c     ON c.oid = r.ev_class
     WHERE r.rulename = $2
       AND c.relname  = $1
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_rule_on"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._rule_on(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_rule_on"(name, name, name);
CREATE FUNCTION "public"."_rule_on"(IN name, IN name, IN name) RETURNS "char" 
	AS $BODY$
    SELECT r.ev_type
      FROM pg_catalog.pg_rewrite r
      JOIN pg_catalog.pg_class c     ON c.oid = r.ev_class
      JOIN pg_catalog.pg_namespace n ON c.relnamespace = n.oid
     WHERE r.rulename = $3
       AND c.relname  = $2
       AND n.nspname  = $1
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_rule_on"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._runem(_text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_runem"(_text, bool);
CREATE FUNCTION "public"."_runem"(IN _text, IN bool) RETURNS SETOF "text" 
	AS $BODY$
DECLARE
    tap    text;
    lbound int := array_lower($1, 1);
BEGIN
    IF lbound IS NULL THEN RETURN; END IF;
    FOR i IN lbound..array_upper($1, 1) LOOP
        -- Send the name of the function to diag if warranted.
        IF $2 THEN RETURN NEXT diag( $1[i] || '()' ); END IF;
        -- Execute the tap function and return its results.
        FOR tap IN EXECUTE 'SELECT * FROM ' || $1[i] || '()' LOOP
            RETURN NEXT tap;
        END LOOP;
    END LOOP;
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_runem"(IN _text, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._runner(_text, _text, _text, _text, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_runner"(_text, _text, _text, _text, _text);
CREATE FUNCTION "public"."_runner"(IN _text, IN _text, IN _text, IN _text, IN _text) RETURNS SETOF "text" 
	AS $BODY$
DECLARE
    startup  ALIAS FOR $1;
    shutdown ALIAS FOR $2;
    setup    ALIAS FOR $3;
    teardown ALIAS FOR $4;
    tests    ALIAS FOR $5;
    tap      text;
    verbos   boolean := _is_verbose(); -- verbose is a reserved word in 8.5.
    num_faild INTEGER := 0;
BEGIN
    BEGIN
        -- No plan support.
        PERFORM * FROM no_plan();
        FOR tap IN SELECT * FROM _runem(startup, false) LOOP RETURN NEXT tap; END LOOP;
    EXCEPTION
        -- Catch all exceptions and simply rethrow custom exceptions. This
        -- will roll back everything in the above block.
        WHEN raise_exception THEN
            RAISE EXCEPTION '%', SQLERRM;
    END;

    BEGIN
        FOR i IN 1..array_upper(tests, 1) LOOP
            BEGIN
                -- What test are we running?
                IF verbos THEN RETURN NEXT diag_test_name(tests[i]); END IF;

                -- Run the setup functions.
                FOR tap IN SELECT * FROM _runem(setup, false) LOOP RETURN NEXT tap; END LOOP;

                -- Run the actual test function.
                FOR tap IN EXECUTE 'SELECT * FROM ' || tests[i] || '()' LOOP
                    RETURN NEXT tap;
                END LOOP;

                -- Run the teardown functions.
                FOR tap IN SELECT * FROM _runem(teardown, false) LOOP RETURN NEXT tap; END LOOP;

                -- Remember how many failed and then roll back.
                num_faild := num_faild + num_failed();
                RAISE EXCEPTION '__TAP_ROLLBACK__';

            EXCEPTION WHEN raise_exception THEN
                IF SQLERRM <> '__TAP_ROLLBACK__' THEN
                    -- We didn't raise it, so propagate it.
                    RAISE EXCEPTION '%', SQLERRM;
                END IF;
            END;
        END LOOP;

        -- Run the shutdown functions.
        FOR tap IN SELECT * FROM _runem(shutdown, false) LOOP RETURN NEXT tap; END LOOP;

        -- Raise an exception to rollback any changes.
        RAISE EXCEPTION '__TAP_ROLLBACK__';
    EXCEPTION WHEN raise_exception THEN
        IF SQLERRM <> '__TAP_ROLLBACK__' THEN
            -- We didn't raise it, so propagate it.
            RAISE EXCEPTION '%', SQLERRM;
        END IF;
    END;
    -- Finish up.
    FOR tap IN SELECT * FROM _finish( currval('__tresults___numb_seq')::integer, 0, num_faild ) LOOP
        RETURN NEXT tap;
    END LOOP;

    -- Clean up and return.
    PERFORM _cleanup();
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_runner"(IN _text, IN _text, IN _text, IN _text, IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._set(int4, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_set"(int4, int4);
CREATE FUNCTION "public"."_set"(IN int4, IN int4) RETURNS "int4" 
	AS $BODY$
BEGIN
    EXECUTE 'UPDATE __tcache__ SET value = ' || $2
        || ' WHERE id = ' || $1;
    RETURN $2;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_set"(IN int4, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._set(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_set"(text, int4);
CREATE FUNCTION "public"."_set"(IN text, IN int4) RETURNS "int4" 
	AS $BODY$
    SELECT _set($1, $2, '')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_set"(IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._set(text, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_set"(text, int4, text);
CREATE FUNCTION "public"."_set"(IN text, IN int4, IN text) RETURNS "int4" 
	AS $BODY$
DECLARE
    rcount integer;
BEGIN
    EXECUTE 'UPDATE __tcache__ SET value = ' || $2
        || CASE WHEN $3 IS NULL THEN '' ELSE ', note = ' || quote_literal($3) END
        || ' WHERE label = ' || quote_literal($1);
    GET DIAGNOSTICS rcount = ROW_COUNT;
    IF rcount = 0 THEN
       RETURN _add( $1, $2, $3 );
    END IF;
    RETURN $2;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_set"(IN text, IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._strict(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_strict"(name);
CREATE FUNCTION "public"."_strict"(IN name) RETURNS "bool" 
	AS $BODY$
    SELECT is_strict FROM tap_funky WHERE name = $1 AND is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_strict"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._strict(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_strict"(name, name);
CREATE FUNCTION "public"."_strict"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT is_strict FROM tap_funky WHERE schema = $1 AND name = $2
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_strict"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._strict(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_strict"(name, _name);
CREATE FUNCTION "public"."_strict"(IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT is_strict
      FROM tap_funky
     WHERE name = $1
       AND args = array_to_string($2, ',')
       AND is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_strict"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._strict(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_strict"(name, name, _name);
CREATE FUNCTION "public"."_strict"(IN name, IN name, IN _name) RETURNS "bool" 
	AS $BODY$
    SELECT is_strict
      FROM tap_funky
     WHERE schema = $1
       AND name   = $2
       AND args   = array_to_string($3, ',')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_strict"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._table_privs()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_table_privs"();
CREATE FUNCTION "public"."_table_privs"() RETURNS "_name" 
	AS $BODY$
DECLARE
    pgversion INTEGER := pg_version_num();
BEGIN
    IF pgversion < 80200 THEN RETURN ARRAY[
        'DELETE', 'INSERT', 'REFERENCES', 'RULE', 'SELECT', 'TRIGGER', 'UPDATE'
    ];
    ELSIF pgversion < 80400 THEN RETURN ARRAY[
        'DELETE', 'INSERT', 'REFERENCES', 'SELECT', 'TRIGGER', 'UPDATE'
    ];
    ELSE RETURN ARRAY[
        'DELETE', 'INSERT', 'REFERENCES', 'SELECT', 'TRIGGER', 'TRUNCATE', 'UPDATE'
    ];
    END IF;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_table_privs"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._temptable(anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_temptable"(anyarray, text);
CREATE FUNCTION "public"."_temptable"(IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    CREATE TEMP TABLE _____coltmp___ AS
    SELECT $1[i]
    FROM generate_series(array_lower($1, 1), array_upper($1, 1)) s(i);
    EXECUTE 'ALTER TABLE _____coltmp___ RENAME TO ' || $2;
    return $2;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_temptable"(IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._temptable(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_temptable"(text, text);
CREATE FUNCTION "public"."_temptable"(IN text, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    EXECUTE 'CREATE TEMP TABLE ' || $2 || ' AS ' || _query($1);
    return $2;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_temptable"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._temptypes(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_temptypes"(text);
CREATE FUNCTION "public"."_temptypes"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT array_to_string(ARRAY(
        SELECT pg_catalog.format_type(a.atttypid, a.atttypmod)
          FROM pg_catalog.pg_attribute a
          JOIN pg_catalog.pg_class c ON a.attrelid = c.oid
         WHERE c.oid = ('pg_temp.' || $1)::pg_catalog.regclass
           AND attnum > 0
           AND NOT attisdropped
         ORDER BY attnum
    ), ',');
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_temptypes"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._tlike(bool, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_tlike"(bool, text, text, text);
CREATE FUNCTION "public"."_tlike"(IN bool, IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( $1, $4 ) || CASE WHEN $1 THEN '' ELSE E'\n' || diag(
           '   error message: ' || COALESCE( quote_literal($2), 'NULL' ) ||
       E'\n   doesn''t match: ' || COALESCE( quote_literal($3), 'NULL' )
    ) END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_tlike"(IN bool, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._todo()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_todo"();
CREATE FUNCTION "public"."_todo"() RETURNS "text" 
	AS $BODY$
DECLARE
    todos INT[];
    note text;
BEGIN
    -- Get the latest id and value, because todo() might have been called
    -- again before the todos ran out for the first call to todo(). This
    -- allows them to nest.
    todos := _get_latest('todo');
    IF todos IS NULL THEN
        -- No todos.
        RETURN NULL;
    END IF;
    IF todos[2] = 0 THEN
        -- Todos depleted. Clean up.
        EXECUTE 'DELETE FROM __tcache__ WHERE id = ' || todos[1];
        RETURN NULL;
    END IF;
    -- Decrement the count of counted todos and return the reason.
    IF todos[2] <> -1 THEN
        PERFORM _set(todos[1], todos[2] - 1);
    END IF;
    note := _get_note(todos[1]);

    IF todos[2] = 1 THEN
        -- This was the last todo, so delete the record.
        EXECUTE 'DELETE FROM __tcache__ WHERE id = ' || todos[1];
    END IF;

    RETURN note;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_todo"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._trig(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_trig"(name, name);
CREATE FUNCTION "public"."_trig"(IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_trigger t
          JOIN pg_catalog.pg_class c     ON c.oid = t.tgrelid
         WHERE c.relname = $1
           AND t.tgname  = $2
           AND pg_catalog.pg_table_is_visible(c.oid)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_trig"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._trig(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_trig"(name, name, name);
CREATE FUNCTION "public"."_trig"(IN name, IN name, IN name) RETURNS "bool" 
	AS $BODY$
    SELECT EXISTS(
        SELECT true
          FROM pg_catalog.pg_trigger t
          JOIN pg_catalog.pg_class c     ON c.oid = t.tgrelid
          JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
         WHERE n.nspname = $1
           AND c.relname = $2
           AND t.tgname  = $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_trig"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._types_are(_name, text, _bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_types_are"(_name, text, _bpchar);
CREATE FUNCTION "public"."_types_are"(IN _name, IN text, IN _bpchar) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'types',
        ARRAY(
            SELECT t.typname
              FROM pg_catalog.pg_type t
              LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
             WHERE (
                     t.typrelid = 0
                 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)
             )
               AND NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type el WHERE el.oid = t.typelem AND el.typarray = t.oid)
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND pg_catalog.pg_type_is_visible(t.oid)
               AND t.typtype = ANY( COALESCE($3, ARRAY['b', 'c', 'd', 'p', 'e']) )
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
               FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT t.typname
              FROM pg_catalog.pg_type t
              LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
             WHERE (
                     t.typrelid = 0
                 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)
             )
               AND NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type el WHERE el.oid = t.typelem AND el.typarray = t.oid)
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND pg_catalog.pg_type_is_visible(t.oid)
               AND t.typtype = ANY( COALESCE($3, ARRAY['b', 'c', 'd', 'p', 'e']) )
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_types_are"(IN _name, IN text, IN _bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._types_are(name, _name, text, _bpchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_types_are"(name, _name, text, _bpchar);
CREATE FUNCTION "public"."_types_are"(IN name, IN _name, IN text, IN _bpchar) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'types',
        ARRAY(
            SELECT t.typname
              FROM pg_catalog.pg_type t
              LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
             WHERE (
                     t.typrelid = 0
                 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)
             )
               AND NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type el WHERE el.oid = t.typelem AND el.typarray = t.oid)
               AND n.nspname = $1
               AND t.typtype = ANY( COALESCE($4, ARRAY['b', 'c', 'd', 'p', 'e']) )
            EXCEPT
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
        ),
        ARRAY(
            SELECT $2[i]
               FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT t.typname
              FROM pg_catalog.pg_type t
              LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
             WHERE (
                     t.typrelid = 0
                 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)
             )
               AND NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type el WHERE el.oid = t.typelem AND el.typarray = t.oid)
               AND n.nspname = $1
               AND t.typtype = ANY( COALESCE($4, ARRAY['b', 'c', 'd', 'p', 'e']) )
        ),
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_types_are"(IN name, IN _name, IN text, IN _bpchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._unalike(bool, anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_unalike"(bool, anyelement, text, text);
CREATE FUNCTION "public"."_unalike"(IN bool, IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    result ALIAS FOR $1;
    got    ALIAS FOR $2;
    rx     ALIAS FOR $3;
    descr  ALIAS FOR $4;
    output TEXT;
BEGIN
    output := ok( result, descr );
    RETURN output || CASE result WHEN TRUE THEN '' ELSE E'\n' || diag(
           '                  ' || COALESCE( quote_literal(got), 'NULL' ) ||
        E'\n         matches: ' || COALESCE( quote_literal(rx), 'NULL' )
    ) END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_unalike"(IN bool, IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._vol(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_vol"(name);
CREATE FUNCTION "public"."_vol"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT _expand_vol(volatility) FROM tap_funky f
     WHERE f.name = $1 AND f.is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_vol"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._vol(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_vol"(name, name);
CREATE FUNCTION "public"."_vol"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT _expand_vol(volatility) FROM tap_funky f
     WHERE f.schema = $1 and f.name = $2
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_vol"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._vol(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_vol"(name, _name);
CREATE FUNCTION "public"."_vol"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _expand_vol(volatility)
      FROM tap_funky f
     WHERE f.name = $1
       AND f.args = array_to_string($2, ',')
       AND f.is_visible;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_vol"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public._vol(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."_vol"(name, name, _name);
CREATE FUNCTION "public"."_vol"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _expand_vol(volatility)
      FROM tap_funky f
     WHERE f.schema = $1
       and f.name   = $2
       AND f.args   = array_to_string($3, ',')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."_vol"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.add_result(bool, bool, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."add_result"(bool, bool, text, text, text);
CREATE FUNCTION "public"."add_result"(IN bool, IN bool, IN text, IN text, IN text) RETURNS "int4" 
	AS $BODY$
BEGIN
    EXECUTE 'INSERT INTO __tresults__ ( ok, aok, descr, type, reason )
    VALUES( ' || $1 || ', '
              || $2 || ', '
              || quote_literal(COALESCE($3, '')) || ', '
              || quote_literal($4) || ', '
              || quote_literal($5) || ' )';
    RETURN currval('__tresults___numb_seq');
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."add_result"(IN bool, IN bool, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.alike(anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."alike"(anyelement, text);
CREATE FUNCTION "public"."alike"(IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _alike( $1 ~~ $2, $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."alike"(IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.alike(anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."alike"(anyelement, text, text);
CREATE FUNCTION "public"."alike"(IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _alike( $1 ~~ $2, $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."alike"(IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.any_column_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."any_column_privs_are"(name, name, _name);
CREATE FUNCTION "public"."any_column_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT any_column_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on any column in ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."any_column_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.any_column_privs_are(name, name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."any_column_privs_are"(name, name, name, _name);
CREATE FUNCTION "public"."any_column_privs_are"(IN name, IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT any_column_privs_are(
        $1, $2, $3, $4,
        'Role ' || quote_ident($3) || ' should be granted '
            || CASE WHEN $4[1] IS NULL THEN 'no privileges' ELSE array_to_string($4, ', ') END
            || ' on any column in '|| quote_ident($1) || '.' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."any_column_privs_are"(IN name, IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.any_column_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."any_column_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."any_column_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_ac_privs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'undefined_table' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Table ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."any_column_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.any_column_privs_are(name, name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."any_column_privs_are"(name, name, name, _name, text);
CREATE FUNCTION "public"."any_column_privs_are"(IN name, IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_ac_privs( $3, quote_ident($1) || '.' || quote_ident($2) );
BEGIN
    IF grants[1] = 'undefined_table' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Table ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Role ' || quote_ident($3) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $4, $5);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."any_column_privs_are"(IN name, IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_eq(text, anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_eq"(text, anyarray);
CREATE FUNCTION "public"."bag_eq"(IN text, IN anyarray) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, NULL::text, 'ALL ' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_eq"(IN text, IN anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_eq(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_eq"(text, text);
CREATE FUNCTION "public"."bag_eq"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, NULL::text, 'ALL ' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_eq"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_eq(text, anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_eq"(text, anyarray, text);
CREATE FUNCTION "public"."bag_eq"(IN text, IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, $3, 'ALL ' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_eq"(IN text, IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_eq(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_eq"(text, text, text);
CREATE FUNCTION "public"."bag_eq"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, $3, 'ALL ' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_eq"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_has(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_has"(text, text);
CREATE FUNCTION "public"."bag_has"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, NULL::TEXT, 'EXCEPT ALL', 'Missing' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_has"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_has(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_has"(text, text, text);
CREATE FUNCTION "public"."bag_has"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, $3, 'EXCEPT ALL', 'Missing' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_has"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_hasnt(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_hasnt"(text, text);
CREATE FUNCTION "public"."bag_hasnt"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, NULL::TEXT, 'INTERSECT ALL', 'Extra' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_hasnt"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_hasnt(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_hasnt"(text, text, text);
CREATE FUNCTION "public"."bag_hasnt"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, $3, 'INTERSECT ALL', 'Extra' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_hasnt"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_ne(text, anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_ne"(text, anyarray);
CREATE FUNCTION "public"."bag_ne"(IN text, IN anyarray) RETURNS "text" 
	AS $BODY$
    SELECT _relne( $1, $2, NULL::text, 'ALL ' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_ne"(IN text, IN anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_ne(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_ne"(text, text);
CREATE FUNCTION "public"."bag_ne"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relne( $1, $2, NULL::text, 'ALL ' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_ne"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_ne(text, anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_ne"(text, anyarray, text);
CREATE FUNCTION "public"."bag_ne"(IN text, IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relne( $1, $2, $3, 'ALL ' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_ne"(IN text, IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.bag_ne(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."bag_ne"(text, text, text);
CREATE FUNCTION "public"."bag_ne"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relne( $1, $2, $3, 'ALL ' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."bag_ne"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.can(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."can"(_name);
CREATE FUNCTION "public"."can"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT can( $1, 'Schema ' || _ident_array_to_string(current_schemas(true), ' or ') || ' can' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."can"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.can(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."can"(name, _name);
CREATE FUNCTION "public"."can"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT can( $1, $2, 'Schema ' || quote_ident($1) || ' can' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."can"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.can(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."can"(_name, text);
CREATE FUNCTION "public"."can"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    missing text[];
BEGIN
    SELECT ARRAY(
        SELECT quote_ident($1[i])
          FROM generate_series(1, array_upper($1, 1)) s(i)
          LEFT JOIN pg_catalog.pg_proc p
            ON $1[i] = p.proname
           AND pg_catalog.pg_function_is_visible(p.oid)
         WHERE p.oid IS NULL
         ORDER BY s.i
    ) INTO missing;
    IF missing[1] IS NULL THEN
        RETURN ok( true, $2 );
    END IF;
    RETURN ok( false, $2 ) || E'\n' || diag(
        '    ' ||
        array_to_string( missing, E'() missing\n    ') ||
        '() missing'
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."can"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.can(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."can"(name, _name, text);
CREATE FUNCTION "public"."can"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    missing text[];
BEGIN
    SELECT ARRAY(
        SELECT quote_ident($2[i])
          FROM generate_series(1, array_upper($2, 1)) s(i)
          LEFT JOIN tap_funky ON name = $2[i] AND schema = $1
         WHERE oid IS NULL
         GROUP BY $2[i], s.i
         ORDER BY MIN(s.i)
    ) INTO missing;
    IF missing[1] IS NULL THEN
        RETURN ok( true, $3 );
    END IF;
    RETURN ok( false, $3 ) || E'\n' || diag(
        '    ' || quote_ident($1) || '.' ||
        array_to_string( missing, E'() missing\n    ' || quote_ident($1) || '.') ||
        '() missing'
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."can"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.cast_context_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."cast_context_is"(name, name, text);
CREATE FUNCTION "public"."cast_context_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT cast_context_is(
        $1, $2, $3,
        'Cast (' || quote_ident($1) || ' AS ' || quote_ident($2)
        || ') context should be ' || _expand_context(substring(LOWER($3) FROM 1 FOR 1))
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."cast_context_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.cast_context_is(name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."cast_context_is"(name, name, text, text);
CREATE FUNCTION "public"."cast_context_is"(IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    want char = substring(LOWER($3) FROM 1 FOR 1);
    have char := _get_context($1, $2);
BEGIN
    IF have IS NOT NULL THEN
        RETURN is( _expand_context(have), _expand_context(want), $4 );
    END IF;

    RETURN ok( false, $4 ) || E'\n' || diag(
       '    Cast (' || quote_ident($1) || ' AS ' || quote_ident($2)
      || ') does not exist'
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."cast_context_is"(IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.casts_are(_text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."casts_are"(_text);
CREATE FUNCTION "public"."casts_are"(IN _text) RETURNS "text" 
	AS $BODY$
    SELECT casts_are( $1, 'There should be the correct casts');
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."casts_are"(IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.casts_are(_text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."casts_are"(_text, text);
CREATE FUNCTION "public"."casts_are"(IN _text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _areni(
        'casts',
        ARRAY(
            SELECT pg_catalog.format_type(castsource, NULL)
                   || ' AS ' || pg_catalog.format_type(casttarget, NULL)
              FROM pg_catalog.pg_cast c
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT pg_catalog.format_type(castsource, NULL)
                   || ' AS ' || pg_catalog.format_type(casttarget, NULL)
              FROM pg_catalog.pg_cast c
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."casts_are"(IN _text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.check_test(text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."check_test"(text, bool);
CREATE FUNCTION "public"."check_test"(IN text, IN bool) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM check_test( $1, $2, NULL, NULL, NULL, FALSE );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."check_test"(IN text, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.check_test(text, bool, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."check_test"(text, bool, text);
CREATE FUNCTION "public"."check_test"(IN text, IN bool, IN text) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM check_test( $1, $2, $3, NULL, NULL, FALSE );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."check_test"(IN text, IN bool, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.check_test(text, bool, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."check_test"(text, bool, text, text);
CREATE FUNCTION "public"."check_test"(IN text, IN bool, IN text, IN text) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM check_test( $1, $2, $3, $4, NULL, FALSE );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."check_test"(IN text, IN bool, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.check_test(text, bool, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."check_test"(text, bool, text, text, text);
CREATE FUNCTION "public"."check_test"(IN text, IN bool, IN text, IN text, IN text) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM check_test( $1, $2, $3, $4, $5, FALSE );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."check_test"(IN text, IN bool, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.check_test(text, bool, text, text, text, bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."check_test"(text, bool, text, text, text, bool);
CREATE FUNCTION "public"."check_test"(IN text, IN bool, IN text, IN text, IN text, IN bool) RETURNS SETOF "text" 
	AS $BODY$
DECLARE
    tnumb   INTEGER;
    aok     BOOLEAN;
    adescr  TEXT;
    res     BOOLEAN;
    descr   TEXT;
    adiag   TEXT;
    have    ALIAS FOR $1;
    eok     ALIAS FOR $2;
    name    ALIAS FOR $3;
    edescr  ALIAS FOR $4;
    ediag   ALIAS FOR $5;
    matchit ALIAS FOR $6;
BEGIN
    -- What test was it that just ran?
    tnumb := currval('__tresults___numb_seq');

    -- Fetch the results.
    EXECUTE 'SELECT aok, descr FROM __tresults__ WHERE numb = ' || tnumb
       INTO aok, adescr;

    -- Now delete those results.
    EXECUTE 'DELETE FROM __tresults__ WHERE numb = ' || tnumb;
    EXECUTE 'ALTER SEQUENCE __tresults___numb_seq RESTART WITH ' || tnumb;

    -- Set up the description.
    descr := coalesce( name || ' ', 'Test ' ) || 'should ';

    -- So, did the test pass?
    RETURN NEXT is(
        aok,
        eok,
        descr || CASE eok WHEN true then 'pass' ELSE 'fail' END
    );

    -- Was the description as expected?
    IF edescr IS NOT NULL THEN
        RETURN NEXT is(
            adescr,
            edescr,
            descr || 'have the proper description'
        );
    END IF;

    -- Were the diagnostics as expected?
    IF ediag IS NOT NULL THEN
        -- Remove ok and the test number.
        adiag := substring(
            have
            FROM CASE WHEN aok THEN 4 ELSE 9 END + char_length(tnumb::text)
        );

        -- Remove the description, if there is one.
        IF adescr <> '' THEN
            adiag := substring( adiag FROM 3 + char_length( diag( adescr ) ) );
        END IF;

        -- Remove failure message from ok().
        IF NOT aok THEN
           adiag := substring(
               adiag
               FROM 14 + char_length(tnumb::text)
                       + CASE adescr WHEN '' THEN 3 ELSE 3 + char_length( diag( adescr ) ) END
           );
        END IF;

        -- Remove the #s.
        adiag := replace( substring(adiag from 3), E'\n# ', E'\n' );

        -- Now compare the diagnostics.
        IF matchit THEN
            RETURN NEXT matches(
                adiag,
                ediag,
                descr || 'have the proper diagnostics'
            );
        ELSE
            RETURN NEXT is(
                adiag,
                ediag,
                descr || 'have the proper diagnostics'
            );
        END IF;
    END IF;

    -- And we're done
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."check_test"(IN text, IN bool, IN text, IN text, IN text, IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.cmp_ok(anyelement, text, anyelement)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."cmp_ok"(anyelement, text, anyelement);
CREATE FUNCTION "public"."cmp_ok"(IN anyelement, IN text, IN anyelement) RETURNS "text" 
	AS $BODY$
    SELECT cmp_ok( $1, $2, $3, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."cmp_ok"(IN anyelement, IN text, IN anyelement) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.cmp_ok(anyelement, text, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."cmp_ok"(anyelement, text, anyelement, text);
CREATE FUNCTION "public"."cmp_ok"(IN anyelement, IN text, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have   ALIAS FOR $1;
    op     ALIAS FOR $2;
    want   ALIAS FOR $3;
    descr  ALIAS FOR $4;
    result BOOLEAN;
    output TEXT;
BEGIN
    EXECUTE 'SELECT ' ||
            COALESCE(quote_literal( have ), 'NULL') || '::' || pg_typeof(have) || ' '
            || op || ' ' ||
            COALESCE(quote_literal( want ), 'NULL') || '::' || pg_typeof(want)
       INTO result;
    output := ok( COALESCE(result, FALSE), descr );
    RETURN output || CASE result WHEN TRUE THEN '' ELSE E'\n' || diag(
           '    ' || COALESCE( quote_literal(have), 'NULL' ) ||
           E'\n        ' || op ||
           E'\n    ' || COALESCE( quote_literal(want), 'NULL' )
    ) END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."cmp_ok"(IN anyelement, IN text, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_default_is(name, name, anyelement)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_default_is"(name, name, anyelement);
CREATE FUNCTION "public"."col_default_is"(IN name, IN name, IN anyelement) RETURNS "text" 
	AS $BODY$
    SELECT _cdi( $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_default_is"(IN name, IN name, IN anyelement) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_default_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_default_is"(name, name, text);
CREATE FUNCTION "public"."col_default_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _cdi( $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_default_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_default_is(name, name, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_default_is"(name, name, anyelement, text);
CREATE FUNCTION "public"."col_default_is"(IN name, IN name, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _cdi( $1, $2, $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_default_is"(IN name, IN name, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_default_is(name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_default_is"(name, name, text, text);
CREATE FUNCTION "public"."col_default_is"(IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _cdi( $1, $2, $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_default_is"(IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_default_is(name, name, name, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_default_is"(name, name, name, anyelement, text);
CREATE FUNCTION "public"."col_default_is"(IN name, IN name, IN name, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _cdi( $1, $2, $3, $4, $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_default_is"(IN name, IN name, IN name, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_default_is(name, name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_default_is"(name, name, name, text, text);
CREATE FUNCTION "public"."col_default_is"(IN name, IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _cdi( $1, $2, $3, $4, $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_default_is"(IN name, IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_check(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_check"(name, name);
CREATE FUNCTION "public"."col_has_check"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT col_has_check( $1, $2, 'Column ' || quote_ident($1) || '(' || quote_ident($2) || ') should have a check constraint' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_check"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_check(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_check"(name, _name);
CREATE FUNCTION "public"."col_has_check"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT col_has_check( $1, $2, 'Columns ' || quote_ident($1) || '(' || _ident_array_to_string($2, ', ') || ') should have a check constraint' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_check"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_check(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_check"(name, name, text);
CREATE FUNCTION "public"."col_has_check"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_has_check( $1, ARRAY[$2], $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_check"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_check(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_check"(name, _name, text);
CREATE FUNCTION "public"."col_has_check"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _constraint( $1, 'c', $2, $3, 'check' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_check"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_check(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_check"(name, name, name, text);
CREATE FUNCTION "public"."col_has_check"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_has_check( $1, $2, ARRAY[$3], $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_check"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_check(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_check"(name, name, _name, text);
CREATE FUNCTION "public"."col_has_check"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _constraint( $1, $2, 'c', $3, $4, 'check' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_check"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_default(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_default"(name, name);
CREATE FUNCTION "public"."col_has_default"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT col_has_default( $1, $2, 'Column ' || quote_ident($1) || '.' || quote_ident($2) || ' should have a default' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_default"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_default(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_default"(name, name, text);
CREATE FUNCTION "public"."col_has_default"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF NOT _cexists( $1, $2 ) THEN
        RETURN fail( $3 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist' );
    END IF;
    RETURN ok( _has_def( $1, $2 ), $3 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_default"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_has_default(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_has_default"(name, name, name, text);
CREATE FUNCTION "public"."col_has_default"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF NOT _cexists( $1, $2, $3 ) THEN
        RETURN fail( $4 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || '.' || quote_ident($3) || ' does not exist' );
    END IF;
    RETURN ok( _has_def( $1, $2, $3 ), $4 );
END
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_has_default"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_hasnt_default(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_hasnt_default"(name, name);
CREATE FUNCTION "public"."col_hasnt_default"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT col_hasnt_default( $1, $2, 'Column ' || quote_ident($1) || '.' || quote_ident($2) || ' should not have a default' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_hasnt_default"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_hasnt_default(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_hasnt_default"(name, name, text);
CREATE FUNCTION "public"."col_hasnt_default"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF NOT _cexists( $1, $2 ) THEN
        RETURN fail( $3 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist' );
    END IF;
    RETURN ok( NOT _has_def( $1, $2 ), $3 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_hasnt_default"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_hasnt_default(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_hasnt_default"(name, name, name, text);
CREATE FUNCTION "public"."col_hasnt_default"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF NOT _cexists( $1, $2, $3 ) THEN
        RETURN fail( $4 ) || E'\n'
            || diag ('    Column ' || quote_ident($1) || '.' || quote_ident($2) || '.' || quote_ident($3) || ' does not exist' );
    END IF;
    RETURN ok( NOT _has_def( $1, $2, $3 ), $4 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_hasnt_default"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_fk(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_fk"(name, name);
CREATE FUNCTION "public"."col_is_fk"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT col_is_fk( $1, $2, 'Column ' || quote_ident($1) || '(' || quote_ident($2) || ') should be a foreign key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_fk"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_fk(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_fk"(name, _name);
CREATE FUNCTION "public"."col_is_fk"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT col_is_fk( $1, $2, 'Columns ' || quote_ident($1) || '(' || _ident_array_to_string($2, ', ') || ') should be a foreign key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_fk"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_fk(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_fk"(name, name, text);
CREATE FUNCTION "public"."col_is_fk"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_is_fk( $1, ARRAY[$2], $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_fk"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_fk(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_fk"(name, _name, text);
CREATE FUNCTION "public"."col_is_fk"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    names text[];
BEGIN
    IF _fkexists($1, $2) THEN
        RETURN pass( $3 );
    END IF;

    -- Try to show the columns.
    SELECT ARRAY(
        SELECT _ident_array_to_string(fk_columns, ', ')
          FROM pg_all_foreign_keys
         WHERE fk_table_name  = $1
         ORDER BY fk_columns
    ) INTO names;

    IF NAMES[1] IS NOT NULL THEN
        RETURN fail($3) || E'\n' || diag(
            '    Table ' || quote_ident($1) || E' has foreign key constraints on these columns:\n        '
            || array_to_string( names, E'\n        ' )
        );
    END IF;

    -- No FKs in this table.
    RETURN fail($3) || E'\n' || diag(
        '    Table ' || quote_ident($1) || ' has no foreign key columns'
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_fk"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_fk(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_fk"(name, name, name, text);
CREATE FUNCTION "public"."col_is_fk"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_is_fk( $1, $2, ARRAY[$3], $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_fk"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_fk(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_fk"(name, name, _name, text);
CREATE FUNCTION "public"."col_is_fk"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    names text[];
BEGIN
    IF _fkexists($1, $2, $3) THEN
        RETURN pass( $4 );
    END IF;

    -- Try to show the columns.
    SELECT ARRAY(
        SELECT _ident_array_to_string(fk_columns, ', ')
          FROM pg_all_foreign_keys
         WHERE fk_schema_name = $1
           AND fk_table_name  = $2
         ORDER BY fk_columns
    ) INTO names;

    IF names[1] IS NOT NULL THEN
        RETURN fail($4) || E'\n' || diag(
            '    Table ' || quote_ident($1) || '.' || quote_ident($2) || E' has foreign key constraints on these columns:\n        '
            ||  array_to_string( names, E'\n        ' )
        );
    END IF;

    -- No FKs in this table.
    RETURN fail($4) || E'\n' || diag(
        '    Table ' || quote_ident($1) || '.' || quote_ident($2) || ' has no foreign key columns'
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_fk"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_null(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_null"(name, name);
CREATE FUNCTION "public"."col_is_null"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT _col_is_null( $1, $2, 'Column ' || quote_ident($1) || '.' || quote_ident($2) || ' should allow NULL', false );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_null"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_null(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_null"(name, name, name);
CREATE FUNCTION "public"."col_is_null"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT _col_is_null( $1, $2, $3, false );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_null"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_null(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_null"(name, name, name, text);
CREATE FUNCTION "public"."col_is_null"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _col_is_null( $1, $2, $3, $4, false );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_null"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_pk(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_pk"(name, name);
CREATE FUNCTION "public"."col_is_pk"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT col_is_pk( $1, $2, 'Column ' || quote_ident($1) || '(' || quote_ident($2) || ') should be a primary key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_pk"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_pk(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_pk"(name, _name);
CREATE FUNCTION "public"."col_is_pk"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT col_is_pk( $1, $2, 'Columns ' || quote_ident($1) || '(' || _ident_array_to_string($2, ', ') || ') should be a primary key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_pk"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_pk(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_pk"(name, name, text);
CREATE FUNCTION "public"."col_is_pk"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_is_pk( $1, ARRAY[$2], $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_pk"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_pk(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_pk"(name, _name, text);
CREATE FUNCTION "public"."col_is_pk"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT is( _ckeys( $1, 'p' ), $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_pk"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_pk(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_pk"(name, name, name, text);
CREATE FUNCTION "public"."col_is_pk"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_is_pk( $1, $2, ARRAY[$3], $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_pk"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_pk(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_pk"(name, name, _name, text);
CREATE FUNCTION "public"."col_is_pk"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT is( _ckeys( $1, $2, 'p' ), $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_pk"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_unique(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_unique"(name, name);
CREATE FUNCTION "public"."col_is_unique"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT col_is_unique( $1, $2, 'Column ' || quote_ident($1) || '(' || quote_ident($2) || ') should have a unique constraint' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_unique"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_unique(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_unique"(name, _name);
CREATE FUNCTION "public"."col_is_unique"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT col_is_unique( $1, $2, 'Columns ' || quote_ident($1) || '(' || _ident_array_to_string($2, ', ') || ') should have a unique constraint' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_unique"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_unique(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_unique"(name, name, text);
CREATE FUNCTION "public"."col_is_unique"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_is_unique( $1, ARRAY[$2], $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_unique"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_unique(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_unique"(name, _name, text);
CREATE FUNCTION "public"."col_is_unique"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _constraint( $1, 'u', $2, $3, 'unique' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_unique"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_unique(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_unique"(name, name, name, text);
CREATE FUNCTION "public"."col_is_unique"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_is_unique( $1, $2, ARRAY[$3], $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_unique"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_is_unique(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_is_unique"(name, name, _name, text);
CREATE FUNCTION "public"."col_is_unique"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _constraint( $1, $2, 'u', $3, $4, 'unique' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_is_unique"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_fk(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_fk"(name, name);
CREATE FUNCTION "public"."col_isnt_fk"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT col_isnt_fk( $1, $2, 'Column ' || quote_ident($1) || '(' || quote_ident($2) || ') should not be a foreign key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_fk"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_fk(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_fk"(name, _name);
CREATE FUNCTION "public"."col_isnt_fk"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT col_isnt_fk( $1, $2, 'Columns ' || quote_ident($1) || '(' || _ident_array_to_string($2, ', ') || ') should not be a foreign key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_fk"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_fk(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_fk"(name, name, text);
CREATE FUNCTION "public"."col_isnt_fk"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_isnt_fk( $1, ARRAY[$2], $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_fk"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_fk(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_fk"(name, _name, text);
CREATE FUNCTION "public"."col_isnt_fk"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _fkexists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_fk"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_fk(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_fk"(name, name, name, text);
CREATE FUNCTION "public"."col_isnt_fk"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_isnt_fk( $1, $2, ARRAY[$3], $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_fk"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_fk(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_fk"(name, name, _name, text);
CREATE FUNCTION "public"."col_isnt_fk"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _fkexists( $1, $2, $3 ), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_fk"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_pk(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_pk"(name, name);
CREATE FUNCTION "public"."col_isnt_pk"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT col_isnt_pk( $1, $2, 'Column ' || quote_ident($1) || '(' || quote_ident($2) || ') should not be a primary key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_pk"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_pk(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_pk"(name, _name);
CREATE FUNCTION "public"."col_isnt_pk"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT col_isnt_pk( $1, $2, 'Columns ' || quote_ident($1) || '(' || _ident_array_to_string($2, ', ') || ') should not be a primary key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_pk"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_pk(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_pk"(name, name, text);
CREATE FUNCTION "public"."col_isnt_pk"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_isnt_pk( $1, ARRAY[$2], $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_pk"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_pk(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_pk"(name, _name, text);
CREATE FUNCTION "public"."col_isnt_pk"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT isnt( _ckeys( $1, 'p' ), $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_pk"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_pk(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_pk"(name, name, name, text);
CREATE FUNCTION "public"."col_isnt_pk"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_isnt_pk( $1, $2, ARRAY[$3], $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_pk"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_isnt_pk(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_isnt_pk"(name, name, _name, text);
CREATE FUNCTION "public"."col_isnt_pk"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT isnt( _ckeys( $1, $2, 'p' ), $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_isnt_pk"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_not_null(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_not_null"(name, name);
CREATE FUNCTION "public"."col_not_null"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT _col_is_null( $1, $2, 'Column ' || quote_ident($1) || '.' || quote_ident($2) || ' should be NOT NULL', true );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_not_null"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_not_null(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_not_null"(name, name, text);
CREATE FUNCTION "public"."col_not_null"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _col_is_null( $1, $2, $3, true );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_not_null"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_not_null(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_not_null"(name, name, name, text);
CREATE FUNCTION "public"."col_not_null"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _col_is_null( $1, $2, $3, $4, true );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_not_null"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_type_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_type_is"(name, name, text);
CREATE FUNCTION "public"."col_type_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_type_is( $1, $2, $3, 'Column ' || quote_ident($1) || '.' || quote_ident($2) || ' should be type ' || $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_type_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_type_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_type_is"(name, name, name, text);
CREATE FUNCTION "public"."col_type_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_type_is( $1, $2, $3, $4, 'Column ' || quote_ident($1) || '.' || quote_ident($2) || '.' || quote_ident($3) || ' should be type ' || $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_type_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_type_is(name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_type_is"(name, name, text, text);
CREATE FUNCTION "public"."col_type_is"(IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_type_is( NULL, $1, $2, $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_type_is"(IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_type_is(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_type_is"(name, name, name, name, text);
CREATE FUNCTION "public"."col_type_is"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT col_type_is( $1, $2, $3, $4, $5, 'Column ' || quote_ident($1) || '.' || quote_ident($2)
        || '.' || quote_ident($3) || ' should be type ' || quote_ident($4) || '.' || $5);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_type_is"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_type_is(name, name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_type_is"(name, name, name, text, text);
CREATE FUNCTION "public"."col_type_is"(IN name, IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have_type TEXT;
    want_type TEXT;
BEGIN
    -- Get the data type.
    IF $1 IS NULL THEN
        have_type := _get_col_type($2, $3);
    ELSE
        have_type := _get_col_type($1, $2, $3);
    END IF;

    IF have_type IS NULL THEN
        RETURN fail( $5 ) || E'\n' || diag (
            '   Column ' || COALESCE(quote_ident($1) || '.', '')
            || quote_ident($2) || '.' || quote_ident($3) || ' does not exist'
        );
    END IF;

    want_type := _quote_ident_like($4, have_type);
    IF have_type = want_type THEN
        -- We're good to go.
        RETURN ok( true, $5 );
    END IF;

    -- Wrong data type. tell 'em what we really got.
    RETURN ok( false, $5 ) || E'\n' || diag(
           '        have: ' || have_type ||
        E'\n        want: ' || want_type
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_type_is"(IN name, IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.volatility_is(name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."volatility_is"(name, text, text);
CREATE FUNCTION "public"."volatility_is"(IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, _vol($1), _refine_vol($2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."volatility_is"(IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.volatility_is(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."volatility_is"(name, name, _name, text);
CREATE FUNCTION "public"."volatility_is"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT volatility_is(
        $1, $2, $3, $4,
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should be ' || _refine_vol($4)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."volatility_is"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.col_type_is(name, name, name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."col_type_is"(name, name, name, name, text, text);
CREATE FUNCTION "public"."col_type_is"(IN name, IN name, IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have_type TEXT := _get_col_ns_type($1, $2, $3);
    want_type TEXT;
BEGIN
    IF have_type IS NULL THEN
        RETURN fail( $6 ) || E'\n' || diag (
            '   Column ' || COALESCE(quote_ident($1) || '.', '')
            || quote_ident($2) || '.' || quote_ident($3) || ' does not exist'
        );
    END IF;

    want_type := quote_ident($4) || '.' || _quote_ident_like($5, have_type);
    IF have_type = want_type THEN
        -- We're good to go.
        RETURN ok( true, $6 );
    END IF;

    -- Wrong data type. tell 'em what we really got.
    RETURN ok( false, $6 ) || E'\n' || diag(
           '        have: ' || have_type ||
        E'\n        want: ' || want_type
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."col_type_is"(IN name, IN name, IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.collect_tap(_text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."collect_tap"(_text);
CREATE FUNCTION "public"."collect_tap"(INOUT _text) RETURNS "text" 
	AS $BODY$
    SELECT array_to_string($1, E'\n');
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."collect_tap"(INOUT _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.collect_tap(_varchar)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."collect_tap"(_varchar);
CREATE FUNCTION "public"."collect_tap"(IN _varchar) RETURNS "text" 
	AS $BODY$
    SELECT array_to_string($1, E'\n');
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."collect_tap"(IN _varchar) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.column_privs_are(name, name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."column_privs_are"(name, name, name, _name);
CREATE FUNCTION "public"."column_privs_are"(IN name, IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT column_privs_are(
        $1, $2, $3, $4,
        'Role ' || quote_ident($3) || ' should be granted '
            || CASE WHEN $4[1] IS NULL THEN 'no privileges' ELSE array_to_string($4, ', ') END
            || ' on column ' || quote_ident($1) || '.' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."column_privs_are"(IN name, IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.column_privs_are(name, name, name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."column_privs_are"(name, name, name, name, _name);
CREATE FUNCTION "public"."column_privs_are"(IN name, IN name, IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT column_privs_are(
        $1, $2, $3, $4, $5,
        'Role ' || quote_ident($4) || ' should be granted '
            || CASE WHEN $5[1] IS NULL THEN 'no privileges' ELSE array_to_string($5, ', ') END
            || ' on column ' || quote_ident($1) || '.' || quote_ident($2) || '.' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."column_privs_are"(IN name, IN name, IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.column_privs_are(name, name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."column_privs_are"(name, name, name, _name, text);
CREATE FUNCTION "public"."column_privs_are"(IN name, IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_col_privs( $3, quote_ident($1), $2 );
BEGIN
    IF grants[1] = 'undefined_column' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Column ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_table' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Table ' || quote_ident($1) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Role ' || quote_ident($3) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $4, $5);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."column_privs_are"(IN name, IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.column_privs_are(name, name, name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."column_privs_are"(name, name, name, name, _name, text);
CREATE FUNCTION "public"."column_privs_are"(IN name, IN name, IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_col_privs( $4, quote_ident($1) || '.' || quote_ident($2), $3 );
BEGIN
    IF grants[1] = 'undefined_column' THEN
        RETURN ok(FALSE, $6) || E'\n' || diag(
            '    Column ' || quote_ident($1) || '.' || quote_ident($2) || '.' || quote_ident($3)
            || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_table' THEN
        RETURN ok(FALSE, $6) || E'\n' || diag(
            '    Table ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $6) || E'\n' || diag(
            '    Role ' || quote_ident($4) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $5, $6);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."column_privs_are"(IN name, IN name, IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.columns_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."columns_are"(name, _name);
CREATE FUNCTION "public"."columns_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT columns_are( $1, $2, 'Table ' || quote_ident($1) || ' should have the correct columns' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."columns_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.columns_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."columns_are"(name, name, _name);
CREATE FUNCTION "public"."columns_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT columns_are( $1, $2, $3, 'Table ' || quote_ident($1) || '.' || quote_ident($2) || ' should have the correct columns' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."columns_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.columns_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."columns_are"(name, _name, text);
CREATE FUNCTION "public"."columns_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'columns',
        ARRAY(
            SELECT a.attname
              FROM pg_catalog.pg_namespace n
              JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
              JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
             WHERE n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND pg_catalog.pg_table_is_visible(c.oid)
               AND c.relname = $1
               AND a.attnum > 0
               AND NOT a.attisdropped
            EXCEPT
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
        ),
        ARRAY(
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT a.attname
              FROM pg_catalog.pg_namespace n
              JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
              JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
             WHERE n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND pg_catalog.pg_table_is_visible(c.oid)
               AND c.relname = $1
               AND a.attnum > 0
               AND NOT a.attisdropped
        ),
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."columns_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.columns_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."columns_are"(name, name, _name, text);
CREATE FUNCTION "public"."columns_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'columns',
        ARRAY(
            SELECT a.attname
              FROM pg_catalog.pg_namespace n
              JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
              JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
             WHERE n.nspname = $1
               AND c.relname = $2
               AND a.attnum > 0
               AND NOT a.attisdropped
            EXCEPT
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
        ),
        ARRAY(
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
            EXCEPT
            SELECT a.attname
              FROM pg_catalog.pg_namespace n
              JOIN pg_catalog.pg_class c ON n.oid = c.relnamespace
              JOIN pg_catalog.pg_attribute a ON c.oid = a.attrelid
             WHERE n.nspname = $1
               AND c.relname = $2
               AND a.attnum > 0
               AND NOT a.attisdropped
        ),
        $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."columns_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.composite_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."composite_owner_is"(name, name);
CREATE FUNCTION "public"."composite_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT composite_owner_is(
        $1, $2,
        'Composite type ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."composite_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.volatility_is(name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."volatility_is"(name, name, text, text);
CREATE FUNCTION "public"."volatility_is"(IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, _vol($1, $2), _refine_vol($3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."volatility_is"(IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.composite_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."composite_owner_is"(name, name, name);
CREATE FUNCTION "public"."composite_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT composite_owner_is(
        $1, $2, $3,
        'Composite type ' || quote_ident($1) || '.' || quote_ident($2) || ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."composite_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.composite_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."composite_owner_is"(name, name, text);
CREATE FUNCTION "public"."composite_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('c'::char, $1);
BEGIN
    -- Make sure the composite exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Composite type ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."composite_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.composite_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."composite_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."composite_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('c'::char, $1, $2);
BEGIN
    -- Make sure the composite exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Composite type ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."composite_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.correct_web()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."correct_web"();
CREATE FUNCTION "public"."correct_web"() RETURNS SETOF "text" 
	AS $BODY$
	declare
		error_holder		text;
	begin
		if failed_test('test_web_schema') then
			create schema web;
			return next 'Created a schema';
		end if;
		if failed_test('test_web_session_table') then
			create table web.session();
			return next 'Created the session table.';
		end if;
		if failed_test('test_web_session_id_exists') then
			alter table web.session 
				add column sess_id text;
			return next 'Added sess_id column.';
		end if;
		if failed_test('test_web_session_id_type') then 
			alter table web.session
				alter column sess_id type text;
			return next 'Changed sess_id to type text.';
		end if;
		if failed_test('test_web_session_id_is_pk') then 
			alter table web.session
				add primary key (sess_id);
			return next 'Made sess_id the primary key.';
		end if;
		if failed_test('test_web_session_data_exists') then
			alter table web.session 
				add column sess_data text;
			return next 'Added sess_data column.';
		end if;
		if failed_test('test_web_session_data_type') then 
			alter table web.session
				alter column sess_data type text;
			return next 'Changed sess_data to type text.';
		end if;
		if failed_test('test_web_session_expiration_exists') then
			alter table web.session 
				add column expiration timestamp with time zone;
			return next 'Added expiration column.';
		end if;
		if failed_test('test_web_session_data_type') then 
			alter table web.session
				alter column expiration type timestamp with time zone;
			return next 'Changed expiration to type timestamp.';
		end if;
		if failed_test('test_web_session_expiration_default') then
			alter table web.session
				alter column expiration set default now() + interval '1 day';
			return next 'Added expiration default.';
		end if;
		if failed_test('test_web_session_expiration_has_index') then
			create index expire_idx on web.session (expiration);
			return next 'Created expiration index.';
		end if;
		
		if failed_test('test_web_function_allids_is_removed') then
			drop function web.all_session_ids();
			return next 'Removed all ids for security reasons.';
		end if;
		
		create or replace function web.valid_sessions()
		returns setof web.session as $$
			begin
				return query select * from web.session
					where expiration > now() 
						or expiration is null;
			end;
		$$ language plpgsql security definer
		set search_path = web, pg_temp;
		
		create or replace function web.set_session_data(
			sessid text, 
			sessdata text, 
			expire timestamp with time zone) 
		returns void as $$
			begin
				loop
					update web.session 
						set sess_data = sessdata, 
							expiration = expire 
						where sess_id = sessid;
					if found then
						return;
					end if;
					begin
						insert into web.session (sess_id, sess_data, expiration) 
							values (sessid, sessdata, expire);
						return;
					exception
						when unique_violation then
							-- do nothing.
					end;
				end loop;
			end;
		$$ language plpgsql security definer
		set search_path = web, pg_temp;
		return next 'Created function web.set_session_data';
		
		create or replace function web.destroy_session(sessid text)
		returns void as $$
			begin
				delete from web.session where sess_id = sessid;
			end;
		$$ language plpgsql security definer
		set search_path = web, pg_temp;
		return next 'Created function web.destroy_session.';
		
		create or replace function web.get_session_data(sessid text)
		returns setof text as $$
			begin
				return query select sess_data 
					from web.valid_sessions()
					where sess_id = sessid;
			end;
		$$ language plpgsql security definer
		set search_path = web, pg_temp;
		return next 'Created function web.get_session.';
		
		create or replace function web.clear_sessions()
		returns void as $$
			begin 
				delete from web.session;
			end;
		$$ language plpgsql security definer
		set search_path = web, pg_temp;		
		return next 'Created function web.clear_sessions.';

		create or replace function web.count_sessions()
		returns int as $$
			declare
				thecount int := 0;
			begin
				select count(*) into thecount
					from web.valid_sessions();
				return thecount;
			end;
		$$ language plpgsql security definer
		set search_path = web, pg_temp;
		return next 'Created function web.count_sessions.';

		drop trigger if exists delete_expired_trig on web.session;

		create or replace function web.remove_expired()
		returns trigger as $$
			begin
				delete from web.session where expiration < now();
				return null;
			end;
		$$ language plpgsql security definer
		set search_path = web, pg_temp;
		return next 'Created trigger function web.delete_expired.';
		
		create trigger delete_expired_trig
			after insert or update
			on web.session
			execute procedure web.remove_expired();
		return next 'Created trigger delete_expired on web.session.';
		
		if failed_test('test_web_user_exists') then 
			create user nodepg with password 'password';
			return next 'Created user nodepg';
		end if;
		
		revoke all on function 
			web.valid_sessions(),
			web.set_session_data(
				sessid text, 
				sessdata text, 
				expire timestamp with time zone),
			web.destroy_session(sessid text),
			web.get_session_data(sessid text),
			web.clear_sessions(),
			web.count_sessions(),
			web.remove_expired()
		from public;
		
		grant execute on function 
			web.set_session_data(
				sessid text, 
				sessdata text, 
				expire timestamp with time zone),
			web.destroy_session(sessid text),
			web.get_session_data(sessid text),
			web.clear_sessions(),
			web.count_sessions()
		to nodepg;
		
		grant usage on schema web to nodepg;
		
		return next 'Permissions set.';
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."correct_web"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.create_test_session()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."create_test_session"();
CREATE FUNCTION "public"."create_test_session"() RETURNS "text" 
	AS $BODY$
	declare
		sessionid		text;
	begin
		select into sessionid new_session_id();
		perform web.set_session_data(sessionid, md5(random()::text),
			now() + interval '1 day');
		return sessionid;
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."create_test_session"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.database_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."database_privs_are"(name, name, _name);
CREATE FUNCTION "public"."database_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT database_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on database ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."database_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.database_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."database_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."database_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_db_privs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'invalid_catalog_name' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Database ' || quote_ident($1) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."database_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.db_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."db_owner_is"(name, name);
CREATE FUNCTION "public"."db_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT db_owner_is(
        $1, $2,
        'Database ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."db_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.db_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."db_owner_is"(name, name, text);
CREATE FUNCTION "public"."db_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    dbowner NAME := _get_db_owner($1);
BEGIN
    -- Make sure the database exists.
    IF dbowner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Database ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(dbowner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."db_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.diag(anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."diag"(anyarray);
CREATE FUNCTION "public"."diag"(INOUT anyarray) RETURNS "text" 
	AS $BODY$
    SELECT diag(array_to_string($1, ''));
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."diag"(INOUT anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.diag(_text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."diag"(_text);
CREATE FUNCTION "public"."diag"(INOUT _text) RETURNS "text" 
	AS $BODY$
    SELECT diag(array_to_string($1, ''));
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."diag"(INOUT _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.diag(anyelement)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."diag"(anyelement);
CREATE FUNCTION "public"."diag"(IN msg anyelement) RETURNS "text" 
	AS $BODY$
    SELECT diag($1::text);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."diag"(IN msg anyelement) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.diag(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."diag"(text);
CREATE FUNCTION "public"."diag"(IN msg text) RETURNS "text" 
	AS $BODY$
    SELECT '# ' || replace(
       replace(
            replace( $1, E'\r\n', E'\n# ' ),
            E'\n',
            E'\n# '
        ),
        E'\r',
        E'\n# '
    );
$BODY$
	LANGUAGE sql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."diag"(IN msg text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.diag_test_name(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."diag_test_name"(text);
CREATE FUNCTION "public"."diag_test_name"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT diag($1 || '()');
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."diag_test_name"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.display_oper(name, oid)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."display_oper"(name, oid);
CREATE FUNCTION "public"."display_oper"(IN name, IN oid) RETURNS "text" 
	AS $BODY$
    SELECT $1 || substring($2::regoperator::text, '[(][^)]+[)]$')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."display_oper"(IN name, IN oid) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.do_tap()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."do_tap"();
CREATE FUNCTION "public"."do_tap"() RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM _runem( findfuncs('^test'), _is_verbose());
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."do_tap"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.do_tap(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."do_tap"(name);
CREATE FUNCTION "public"."do_tap"(IN name) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM _runem( findfuncs($1, '^test'), _is_verbose() );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."do_tap"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.do_tap(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."do_tap"(text);
CREATE FUNCTION "public"."do_tap"(IN text) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM _runem( findfuncs($1), _is_verbose() );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."do_tap"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.do_tap(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."do_tap"(name, text);
CREATE FUNCTION "public"."do_tap"(IN name, IN text) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM _runem( findfuncs($1, $2), _is_verbose() );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."do_tap"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.doesnt_imatch(anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."doesnt_imatch"(anyelement, text);
CREATE FUNCTION "public"."doesnt_imatch"(IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _unalike( $1 !~* $2, $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."doesnt_imatch"(IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.doesnt_imatch(anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."doesnt_imatch"(anyelement, text, text);
CREATE FUNCTION "public"."doesnt_imatch"(IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _unalike( $1 !~* $2, $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."doesnt_imatch"(IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.doesnt_match(anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."doesnt_match"(anyelement, text);
CREATE FUNCTION "public"."doesnt_match"(IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _unalike( $1 !~ $2, $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."doesnt_match"(IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.doesnt_match(anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."doesnt_match"(anyelement, text, text);
CREATE FUNCTION "public"."doesnt_match"(IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _unalike( $1 !~ $2, $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."doesnt_match"(IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_is(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_is"(text, text);
CREATE FUNCTION "public"."domain_type_is"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT domain_type_is(
        $1, $2,
        'Domain ' || $1 || ' should extend type ' || $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_is"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_is(name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_is"(name, text, text);
CREATE FUNCTION "public"."domain_type_is"(IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT domain_type_is(
        $1, $2, $3,
        'Domain ' || quote_ident($1) || '.' || $2
        || ' should extend type ' || $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_is"(IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_is(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_is"(text, text, text);
CREATE FUNCTION "public"."domain_type_is"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    actual_type TEXT := _get_dtype($1);
BEGIN
    IF actual_type IS NULL THEN
        RETURN fail( $3 ) || E'\n' || diag (
            '   Domain ' ||  $1 || ' does not exist'
        );
    END IF;

    RETURN is( actual_type, _quote_ident_like($2, actual_type), $3 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_is"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_is(name, text, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_is"(name, text, name, text);
CREATE FUNCTION "public"."domain_type_is"(IN name, IN text, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT domain_type_is(
        $1, $2, $3, $4,
        'Domain ' || quote_ident($1) || '.' || $2
        || ' should extend type ' || quote_ident($3) || '.' || $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_is"(IN name, IN text, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_is(name, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_is"(name, text, text, text);
CREATE FUNCTION "public"."domain_type_is"(IN name, IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    actual_type TEXT := _get_dtype($1, $2, false);
BEGIN
    IF actual_type IS NULL THEN
        RETURN fail( $4 ) || E'\n' || diag (
            '   Domain ' || quote_ident($1) || '.' || $2
            || ' does not exist'
        );
    END IF;

    RETURN is( actual_type, _quote_ident_like($3, actual_type), $4 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_is"(IN name, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_is(name, text, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_is"(name, text, name, text, text);
CREATE FUNCTION "public"."domain_type_is"(IN name, IN text, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    actual_type TEXT := _get_dtype($1, $2, true);
BEGIN
    IF actual_type IS NULL THEN
        RETURN fail( $5 ) || E'\n' || diag (
            '   Domain ' || quote_ident($1) || '.' || $2
            || ' does not exist'
        );
    END IF;

    RETURN is( actual_type, quote_ident($3) || '.' || _quote_ident_like($4, actual_type), $5 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_is"(IN name, IN text, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_isnt(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_isnt"(text, text);
CREATE FUNCTION "public"."domain_type_isnt"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT domain_type_isnt(
        $1, $2,
        'Domain ' || $1 || ' should not extend type ' || $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_isnt"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_isnt(name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_isnt"(name, text, text);
CREATE FUNCTION "public"."domain_type_isnt"(IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT domain_type_isnt(
        $1, $2, $3,
        'Domain ' || quote_ident($1) || '.' || $2
        || ' should not extend type ' || $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_isnt"(IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_isnt(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_isnt"(text, text, text);
CREATE FUNCTION "public"."domain_type_isnt"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    actual_type TEXT := _get_dtype($1);
BEGIN
    IF actual_type IS NULL THEN
        RETURN fail( $3 ) || E'\n' || diag (
            '   Domain ' ||  $1 || ' does not exist'
        );
    END IF;

    RETURN isnt( actual_type, _quote_ident_like($2, actual_type), $3 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_isnt"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_isnt(name, text, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_isnt"(name, text, name, text);
CREATE FUNCTION "public"."domain_type_isnt"(IN name, IN text, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT domain_type_isnt(
        $1, $2, $3, $4,
        'Domain ' || quote_ident($1) || '.' || $2
        || ' should not extend type ' || quote_ident($3) || '.' || $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_isnt"(IN name, IN text, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_isnt(name, text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_isnt"(name, text, text, text);
CREATE FUNCTION "public"."domain_type_isnt"(IN name, IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    actual_type TEXT := _get_dtype($1, $2, false);
BEGIN
    IF actual_type IS NULL THEN
        RETURN fail( $4 ) || E'\n' || diag (
            '   Domain ' || quote_ident($1) || '.' || $2
            || ' does not exist'
        );
    END IF;

    RETURN isnt( actual_type, _quote_ident_like($3, actual_type), $4 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_isnt"(IN name, IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domain_type_isnt(name, text, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domain_type_isnt"(name, text, name, text, text);
CREATE FUNCTION "public"."domain_type_isnt"(IN name, IN text, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    actual_type TEXT := _get_dtype($1, $2, true);
BEGIN
    IF actual_type IS NULL THEN
        RETURN fail( $5 ) || E'\n' || diag (
            '   Domain ' || quote_ident($1) || '.' || $2
            || ' does not exist'
        );
    END IF;

    RETURN isnt( actual_type, quote_ident($3) || '.' || _quote_ident_like($4, actual_type), $5 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domain_type_isnt"(IN name, IN text, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domains_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domains_are"(_name);
CREATE FUNCTION "public"."domains_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, 'Search path ' || pg_catalog.current_setting('search_path') || ' should have the correct domains', ARRAY['d'] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domains_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domains_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domains_are"(name, _name);
CREATE FUNCTION "public"."domains_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, 'Schema ' || quote_ident($1) || ' should have the correct domains', ARRAY['d'] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domains_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domains_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domains_are"(_name, text);
CREATE FUNCTION "public"."domains_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, ARRAY['d'] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domains_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.domains_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."domains_are"(name, _name, text);
CREATE FUNCTION "public"."domains_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, $3, ARRAY['d'] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."domains_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enum_has_labels(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enum_has_labels"(name, _name);
CREATE FUNCTION "public"."enum_has_labels"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT enum_has_labels(
        $1, $2,
        'Enum ' || quote_ident($1) || ' should have labels (' || array_to_string( $2, ', ' ) || ')'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enum_has_labels"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enum_has_labels(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enum_has_labels"(name, name, _name);
CREATE FUNCTION "public"."enum_has_labels"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT enum_has_labels(
        $1, $2, $3,
        'Enum ' || quote_ident($1) || '.' || quote_ident($2) || ' should have labels (' || array_to_string( $3, ', ' ) || ')'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enum_has_labels"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.volatility_is(name, _name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."volatility_is"(name, _name, text, text);
CREATE FUNCTION "public"."volatility_is"(IN name, IN _name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, $2, _vol($1, $2), _refine_vol($3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."volatility_is"(IN name, IN _name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enum_has_labels(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enum_has_labels"(name, _name, text);
CREATE FUNCTION "public"."enum_has_labels"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT is(
        ARRAY(
            SELECT e.enumlabel
              FROM pg_catalog.pg_type t
              JOIN pg_catalog.pg_enum e ON t.oid = e.enumtypid
              WHERE t.typisdefined
               AND pg_catalog.pg_type_is_visible(t.oid)
               AND t.typname = $1
               AND t.typtype = 'e'
             ORDER BY e.oid
        ),
        $2,
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enum_has_labels"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enum_has_labels(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enum_has_labels"(name, name, _name, text);
CREATE FUNCTION "public"."enum_has_labels"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT is(
        ARRAY(
            SELECT e.enumlabel
              FROM pg_catalog.pg_type t
              JOIN pg_catalog.pg_enum e      ON t.oid = e.enumtypid
              JOIN pg_catalog.pg_namespace n ON t.typnamespace = n.oid
              WHERE t.typisdefined
               AND n.nspname = $1
               AND t.typname = $2
               AND t.typtype = 'e'
             ORDER BY e.oid
        ),
        $3,
        $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enum_has_labels"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enums_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enums_are"(_name);
CREATE FUNCTION "public"."enums_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, 'Search path ' || pg_catalog.current_setting('search_path') || ' should have the correct enums', ARRAY['e'] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enums_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enums_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enums_are"(name, _name);
CREATE FUNCTION "public"."enums_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, 'Schema ' || quote_ident($1) || ' should have the correct enums', ARRAY['e'] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enums_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enums_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enums_are"(_name, text);
CREATE FUNCTION "public"."enums_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, ARRAY['e'] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enums_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.enums_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."enums_are"(name, _name, text);
CREATE FUNCTION "public"."enums_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _types_are( $1, $2, $3, ARRAY['e'] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."enums_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fail()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fail"();
CREATE FUNCTION "public"."fail"() RETURNS "text" 
	AS $BODY$
    SELECT ok( FALSE, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fail"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fail(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fail"(text);
CREATE FUNCTION "public"."fail"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( FALSE, $1 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fail"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.failed_test(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."failed_test"(text);
CREATE FUNCTION "public"."failed_test"(IN thetest text) RETURNS "bool" 
	AS $BODY$
	declare 
		error_holder		text;
	begin
		select 
			runtests into error_holder
		from
			runtests(thetest)
		where
			runtests ~* '^not ok';
		return found;
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."failed_test"(IN thetest text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fdw_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fdw_privs_are"(name, name, _name);
CREATE FUNCTION "public"."fdw_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT fdw_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on FDW ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fdw_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fdw_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fdw_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."fdw_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_fdw_privs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'undefined_fdw' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    FDW ' || quote_ident($1) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fdw_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.findfuncs(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."findfuncs"(text);
CREATE FUNCTION "public"."findfuncs"(IN text) RETURNS "_text" 
	AS $BODY$
    SELECT ARRAY(
        SELECT DISTINCT quote_ident(n.nspname) || '.' || quote_ident(p.proname) AS pname
          FROM pg_catalog.pg_proc p
          JOIN pg_catalog.pg_namespace n ON p.pronamespace = n.oid
         WHERE pg_catalog.pg_function_is_visible(p.oid)
           AND p.proname ~ $1
         ORDER BY pname
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."findfuncs"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.findfuncs(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."findfuncs"(name, text);
CREATE FUNCTION "public"."findfuncs"(IN name, IN text) RETURNS "_text" 
	AS $BODY$
    SELECT ARRAY(
        SELECT DISTINCT quote_ident(n.nspname) || '.' || quote_ident(p.proname) AS pname
          FROM pg_catalog.pg_proc p
          JOIN pg_catalog.pg_namespace n ON p.pronamespace = n.oid
         WHERE n.nspname = $1
           AND p.proname ~ $2
         ORDER BY pname
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."findfuncs"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.finish()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."finish"();
CREATE FUNCTION "public"."finish"() RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM _finish(
        _get('curr_test'),
        _get('plan'),
        num_failed()
    );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."finish"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.first_agg(anyelement, anyelement)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."first_agg"(anyelement, anyelement);
CREATE FUNCTION "public"."first_agg"(IN anyelement, IN anyelement) RETURNS "anyelement" 
	AS $BODY$
        SELECT CASE WHEN $1 IS NULL THEN $2 ELSE $1 END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	STABLE;
ALTER FUNCTION "public"."first_agg"(IN anyelement, IN anyelement) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fk_ok(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fk_ok"(name, name, name, name);
CREATE FUNCTION "public"."fk_ok"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT fk_ok( $1, ARRAY[$2], $3, ARRAY[$4] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fk_ok"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fk_ok(name, _name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fk_ok"(name, _name, name, _name);
CREATE FUNCTION "public"."fk_ok"(IN name, IN _name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT fk_ok( $1, $2, $3, $4,
        $1 || '(' || _ident_array_to_string( $2, ', ' )
        || ') should reference ' ||
        $3 || '(' || _ident_array_to_string( $4, ', ' ) || ')'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fk_ok"(IN name, IN _name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fk_ok(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fk_ok"(name, name, name, name, text);
CREATE FUNCTION "public"."fk_ok"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT fk_ok( $1, ARRAY[$2], $3, ARRAY[$4], $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fk_ok"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fk_ok(name, _name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fk_ok"(name, _name, name, _name, text);
CREATE FUNCTION "public"."fk_ok"(IN name, IN _name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    tab  name;
    cols name[];
BEGIN
    SELECT pk_table_name, pk_columns
      FROM pg_all_foreign_keys
     WHERE fk_table_name = $1
       AND fk_columns    = $2
       AND pg_catalog.pg_table_is_visible(fk_table_oid)
      INTO tab, cols;

    RETURN is(
        -- have
        $1 || '(' || _ident_array_to_string( $2, ', ' )
        || ') REFERENCES ' || COALESCE( tab || '(' || _ident_array_to_string( cols, ', ' ) || ')', 'NOTHING'),
        -- want
        $1 || '(' || _ident_array_to_string( $2, ', ' )
        || ') REFERENCES ' ||
        $3 || '(' || _ident_array_to_string( $4, ', ' ) || ')',
        $5
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fk_ok"(IN name, IN _name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fk_ok(name, name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fk_ok"(name, name, name, name, name, text);
CREATE FUNCTION "public"."fk_ok"(IN name, IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT fk_ok( $1, $2, ARRAY[$3], $4, $5, ARRAY[$6] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fk_ok"(IN name, IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fk_ok(name, name, _name, name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fk_ok"(name, name, _name, name, name, _name);
CREATE FUNCTION "public"."fk_ok"(IN name, IN name, IN _name, IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT fk_ok( $1, $2, $3, $4, $5, $6,
        quote_ident($1) || '.' || quote_ident($2) || '(' || _ident_array_to_string( $3, ', ' )
        || ') should reference ' ||
        $4 || '.' || $5 || '(' || _ident_array_to_string( $6, ', ' ) || ')'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fk_ok"(IN name, IN name, IN _name, IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fk_ok(name, name, name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fk_ok"(name, name, name, name, name, name, text);
CREATE FUNCTION "public"."fk_ok"(IN name, IN name, IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT fk_ok( $1, $2, ARRAY[$3], $4, $5, ARRAY[$6], $7 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fk_ok"(IN name, IN name, IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.fk_ok(name, name, _name, name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."fk_ok"(name, name, _name, name, name, _name, text);
CREATE FUNCTION "public"."fk_ok"(IN name, IN name, IN _name, IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    sch  name;
    tab  name;
    cols name[];
BEGIN
    SELECT pk_schema_name, pk_table_name, pk_columns
      FROM pg_all_foreign_keys
      WHERE fk_schema_name = $1
        AND fk_table_name  = $2
        AND fk_columns     = $3
      INTO sch, tab, cols;

    RETURN is(
        -- have
        quote_ident($1) || '.' || quote_ident($2) || '(' || _ident_array_to_string( $3, ', ' )
        || ') REFERENCES ' || COALESCE ( sch || '.' || tab || '(' || _ident_array_to_string( cols, ', ' ) || ')', 'NOTHING' ),
        -- want
        quote_ident($1) || '.' || quote_ident($2) || '(' || _ident_array_to_string( $3, ', ' )
        || ') REFERENCES ' ||
        $4 || '.' || $5 || '(' || _ident_array_to_string( $6, ', ' ) || ')',
        $7
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."fk_ok"(IN name, IN name, IN _name, IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.foreign_table_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."foreign_table_owner_is"(name, name);
CREATE FUNCTION "public"."foreign_table_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT foreign_table_owner_is(
        $1, $2,
        'Foreign table ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."foreign_table_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.foreign_table_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."foreign_table_owner_is"(name, name, name);
CREATE FUNCTION "public"."foreign_table_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT foreign_table_owner_is(
        $1, $2, $3,
        'Foreign table ' || quote_ident($1) || '.' || quote_ident($2) || ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."foreign_table_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.foreign_table_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."foreign_table_owner_is"(name, name, text);
CREATE FUNCTION "public"."foreign_table_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('f'::char, $1);
BEGIN
    -- Make sure the table exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Foreign table ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."foreign_table_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.foreign_table_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."foreign_table_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."foreign_table_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('f'::char, $1, $2);
BEGIN
    -- Make sure the table exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Foreign table ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."foreign_table_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_lang_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_lang_is"(name, name);
CREATE FUNCTION "public"."function_lang_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT function_lang_is(
        $1, $2,
        'Function ' || quote_ident($1)
        || '() should be written in ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_lang_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_lang_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_lang_is"(name, name, name);
CREATE FUNCTION "public"."function_lang_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT function_lang_is(
        $1, $2, $3,
        'Function ' || quote_ident($1) || '.' || quote_ident($2)
        || '() should be written in ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_lang_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_lang_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_lang_is"(name, name, text);
CREATE FUNCTION "public"."function_lang_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, _lang($1), $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_lang_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_lang_is(name, _name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_lang_is"(name, _name, name);
CREATE FUNCTION "public"."function_lang_is"(IN name, IN _name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT function_lang_is(
        $1, $2, $3,
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should be written in ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_lang_is"(IN name, IN _name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_lang_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_lang_is"(name, name, name, text);
CREATE FUNCTION "public"."function_lang_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, _lang($1, $2), $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_lang_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_lang_is(name, name, _name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_lang_is"(name, name, _name, name);
CREATE FUNCTION "public"."function_lang_is"(IN name, IN name, IN _name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT function_lang_is(
        $1, $2, $3, $4,
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should be written in ' || quote_ident($4)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_lang_is"(IN name, IN name, IN _name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_lang_is(name, _name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_lang_is"(name, _name, name, text);
CREATE FUNCTION "public"."function_lang_is"(IN name, IN _name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, $2, _lang($1, $2), $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_lang_is"(IN name, IN _name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_lang_is(name, name, _name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_lang_is"(name, name, _name, name, text);
CREATE FUNCTION "public"."function_lang_is"(IN name, IN name, IN _name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, $3, _lang($1, $2, $3), $4, $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_lang_is"(IN name, IN name, IN _name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_owner_is(name, _name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_owner_is"(name, _name, name);
CREATE FUNCTION "public"."function_owner_is"(IN name, IN _name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT function_owner_is(
        $1, $2, $3,
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_owner_is"(IN name, IN _name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_owner_is(name, name, _name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_owner_is"(name, name, _name, name);
CREATE FUNCTION "public"."function_owner_is"(IN name, IN name, IN _name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT function_owner_is(
        $1, $2, $3, $4,
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should be owned by ' || quote_ident($4)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_owner_is"(IN name, IN name, IN _name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_owner_is(name, _name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_owner_is"(name, _name, name, text);
CREATE FUNCTION "public"."function_owner_is"(IN name, IN _name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_func_owner($1, $2);
BEGIN
    -- Make sure the function exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Function ' || quote_ident($1) || '(' ||
                    array_to_string($2, ', ') || ') does not exist'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_owner_is"(IN name, IN _name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_owner_is(name, name, _name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_owner_is"(name, name, _name, name, text);
CREATE FUNCTION "public"."function_owner_is"(IN name, IN name, IN _name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_func_owner($1, $2, $3);
BEGIN
    -- Make sure the function exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            E'    Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
                    array_to_string($3, ', ') || ') does not exist'
        );
    END IF;

    RETURN is(owner, $4, $5);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_owner_is"(IN name, IN name, IN _name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_privs_are(name, _name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_privs_are"(name, _name, name, _name);
CREATE FUNCTION "public"."function_privs_are"(IN name, IN _name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT function_privs_are(
        $1, $2, $3, $4,
        'Role ' || quote_ident($3) || ' should be granted '
            || CASE WHEN $4[1] IS NULL THEN 'no privileges' ELSE array_to_string($4, ', ') END
            || ' on function ' || quote_ident($1) || '(' || array_to_string($2, ', ') || ')'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_privs_are"(IN name, IN _name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.volatility_is(name, name, _name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."volatility_is"(name, name, _name, text, text);
CREATE FUNCTION "public"."volatility_is"(IN name, IN name, IN _name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, $3, _vol($1, $2, $3), _refine_vol($4), $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."volatility_is"(IN name, IN name, IN _name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_privs_are(name, name, _name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_privs_are"(name, name, _name, name, _name);
CREATE FUNCTION "public"."function_privs_are"(IN name, IN name, IN _name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT function_privs_are(
        $1, $2, $3, $4, $5,
        'Role ' || quote_ident($4) || ' should be granted '
            || CASE WHEN $5[1] IS NULL THEN 'no privileges' ELSE array_to_string($5, ', ') END
            || ' on function ' || quote_ident($1) || '.' || quote_ident($2)
            || '(' || array_to_string($3, ', ') || ')'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_privs_are"(IN name, IN name, IN _name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_privs_are(name, _name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_privs_are"(name, _name, name, _name, text);
CREATE FUNCTION "public"."function_privs_are"(IN name, IN _name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _fprivs_are(
        quote_ident($1) || '(' || array_to_string($2, ', ') || ')',
        $3, $4, $5
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_privs_are"(IN name, IN _name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_privs_are(name, name, _name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_privs_are"(name, name, _name, name, _name, text);
CREATE FUNCTION "public"."function_privs_are"(IN name, IN name, IN _name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _fprivs_are(
        quote_ident($1) || '.' || quote_ident($2) || '(' || array_to_string($3, ', ') || ')',
        $4, $5, $6
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_privs_are"(IN name, IN name, IN _name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_returns(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_returns"(name, text);
CREATE FUNCTION "public"."function_returns"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT function_returns(
        $1, $2,
        'Function ' || quote_ident($1) || '() should return ' || $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_returns"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_returns(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_returns"(name, name, text);
CREATE FUNCTION "public"."function_returns"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT function_returns(
        $1, $2, $3,
        'Function ' || quote_ident($1) || '.' || quote_ident($2)
        || '() should return ' || $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_returns"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_returns(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_returns"(name, _name, text);
CREATE FUNCTION "public"."function_returns"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT function_returns(
        $1, $2, $3,
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should return ' || $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_returns"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_returns(name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_returns"(name, text, text);
CREATE FUNCTION "public"."function_returns"(IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, _returns($1), $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_returns"(IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_returns(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_returns"(name, name, _name, text);
CREATE FUNCTION "public"."function_returns"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT function_returns(
        $1, $2, $3, $4,
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should return ' || $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_returns"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_returns(name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_returns"(name, name, text, text);
CREATE FUNCTION "public"."function_returns"(IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, _returns($1, $2), $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_returns"(IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_returns(name, _name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_returns"(name, _name, text, text);
CREATE FUNCTION "public"."function_returns"(IN name, IN _name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, $2, _returns($1, $2), $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_returns"(IN name, IN _name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.function_returns(name, name, _name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."function_returns"(name, name, _name, text, text);
CREATE FUNCTION "public"."function_returns"(IN name, IN name, IN _name, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, $3, _returns($1, $2, $3), $4, $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."function_returns"(IN name, IN name, IN _name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.functions_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."functions_are"(_name);
CREATE FUNCTION "public"."functions_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT functions_are( $1, 'Search path ' || pg_catalog.current_setting('search_path') || ' should have the correct functions' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."functions_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.functions_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."functions_are"(name, _name);
CREATE FUNCTION "public"."functions_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT functions_are( $1, $2, 'Schema ' || quote_ident($1) || ' should have the correct functions' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."functions_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.functions_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."functions_are"(_name, text);
CREATE FUNCTION "public"."functions_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'functions',
        ARRAY(
            SELECT name FROM tap_funky WHERE is_visible
            AND schema NOT IN ('pg_catalog', 'information_schema')
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
               FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT name FROM tap_funky WHERE is_visible
            AND schema NOT IN ('pg_catalog', 'information_schema')
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."functions_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.functions_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."functions_are"(name, _name, text);
CREATE FUNCTION "public"."functions_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'functions',
        ARRAY(
            SELECT name FROM tap_funky WHERE schema = $1
            EXCEPT
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
        ),
        ARRAY(
            SELECT $2[i]
               FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT name FROM tap_funky WHERE schema = $1
        ),
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."functions_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.groups_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."groups_are"(_name);
CREATE FUNCTION "public"."groups_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT groups_are( $1, 'There should be the correct groups' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."groups_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.groups_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."groups_are"(_name, text);
CREATE FUNCTION "public"."groups_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'groups',
        ARRAY(
            SELECT groname
              FROM pg_catalog.pg_group
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT groname
              FROM pg_catalog.pg_group
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."groups_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_cast(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_cast"(name, name);
CREATE FUNCTION "public"."has_cast"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _cast_exists( $1, $2 ),
        'Cast (' || quote_ident($1) || ' AS ' || quote_ident($2)
        || ') should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_cast"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_cast(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_cast"(name, name, name);
CREATE FUNCTION "public"."has_cast"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
   SELECT ok(
        _cast_exists( $1, $2, $3 ),
        'Cast (' || quote_ident($1) || ' AS ' || quote_ident($2)
        || ') WITH FUNCTION ' || quote_ident($3) || '() should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_cast"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_cast(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_cast"(name, name, text);
CREATE FUNCTION "public"."has_cast"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _cast_exists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_cast"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_cast(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_cast"(name, name, name, name);
CREATE FUNCTION "public"."has_cast"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
   SELECT ok(
       _cast_exists( $1, $2, $3, $4 ),
        'Cast (' || quote_ident($1) || ' AS ' || quote_ident($2)
        || ') WITH FUNCTION ' || quote_ident($3)
        || '.' || quote_ident($4) || '() should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_cast"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_cast(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_cast"(name, name, name, text);
CREATE FUNCTION "public"."has_cast"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
   SELECT ok( _cast_exists( $1, $2, $3 ), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_cast"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_cast(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_cast"(name, name, name, name, text);
CREATE FUNCTION "public"."has_cast"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
   SELECT ok( _cast_exists( $1, $2, $3, $4 ), $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_cast"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_check(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_check"(name);
CREATE FUNCTION "public"."has_check"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_check( $1, 'Table ' || quote_ident($1) || ' should have a check constraint' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_check"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_check(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_check"(name, text);
CREATE FUNCTION "public"."has_check"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _hasc( $1, 'c' ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_check"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_check(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_check"(name, name, text);
CREATE FUNCTION "public"."has_check"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _hasc( $1, $2, 'c' ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_check"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_column(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_column"(name, name);
CREATE FUNCTION "public"."has_column"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_column( $1, $2, 'Column ' || quote_ident($1) || '.' || quote_ident($2) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_column"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_column(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_column"(name, name, text);
CREATE FUNCTION "public"."has_column"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _cexists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_column"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_column(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_column"(name, name, name, text);
CREATE FUNCTION "public"."has_column"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _cexists( $1, $2, $3 ), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_column"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_composite(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_composite"(name);
CREATE FUNCTION "public"."has_composite"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_composite( $1, 'Composite type ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_composite"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_composite(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_composite"(name, text);
CREATE FUNCTION "public"."has_composite"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'c', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_composite"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_composite(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_composite"(name, name, text);
CREATE FUNCTION "public"."has_composite"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'c', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_composite"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_domain(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_domain"(name);
CREATE FUNCTION "public"."has_domain"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, ARRAY['d'] ), ('Domain ' || quote_ident($1) || ' should exist')::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_domain"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_domain(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_domain"(name, name);
CREATE FUNCTION "public"."has_domain"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_domain( $1, $2, 'Domain ' || quote_ident($1) || '.' || quote_ident($2) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_domain"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_domain(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_domain"(name, text);
CREATE FUNCTION "public"."has_domain"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, ARRAY['d'] ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_domain"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_domain(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_domain"(name, name, text);
CREATE FUNCTION "public"."has_domain"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, $2, ARRAY['d'] ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_domain"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_enum(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_enum"(name);
CREATE FUNCTION "public"."has_enum"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, ARRAY['e'] ), ('Enum ' || quote_ident($1) || ' should exist')::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_enum"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_enum(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_enum"(name, name);
CREATE FUNCTION "public"."has_enum"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_enum( $1, $2, 'Enum ' || quote_ident($1) || '.' || quote_ident($2) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_enum"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_enum(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_enum"(name, text);
CREATE FUNCTION "public"."has_enum"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, ARRAY['e'] ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_enum"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_enum(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_enum"(name, name, text);
CREATE FUNCTION "public"."has_enum"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, $2, ARRAY['e'] ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_enum"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_fk(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_fk"(name);
CREATE FUNCTION "public"."has_fk"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_fk( $1, 'Table ' || quote_ident($1) || ' should have a foreign key constraint' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_fk"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_fk(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_fk"(name, text);
CREATE FUNCTION "public"."has_fk"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _hasc( $1, 'f' ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_fk"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_fk(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_fk"(name, name, text);
CREATE FUNCTION "public"."has_fk"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _hasc( $1, $2, 'f' ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_fk"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_foreign_table(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_foreign_table"(name);
CREATE FUNCTION "public"."has_foreign_table"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_foreign_table( $1, 'Foreign table ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_foreign_table"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_foreign_table(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_foreign_table"(name, text);
CREATE FUNCTION "public"."has_foreign_table"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'f', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_foreign_table"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_foreign_table(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_foreign_table"(name, name, text);
CREATE FUNCTION "public"."has_foreign_table"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'f', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_foreign_table"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_function(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_function"(name);
CREATE FUNCTION "public"."has_function"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _got_func($1), 'Function ' || quote_ident($1) || '() should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_function"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_function(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_function"(name, name);
CREATE FUNCTION "public"."has_function"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _got_func($1, $2),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '() should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_function"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_function(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_function"(name, _name);
CREATE FUNCTION "public"."has_function"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _got_func($1, $2),
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_function"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_function(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_function"(name, text);
CREATE FUNCTION "public"."has_function"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _got_func($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_function"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_function(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_function"(name, name, _name);
CREATE FUNCTION "public"."has_function"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _got_func($1, $2, $3),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_function"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_function(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_function"(name, name, text);
CREATE FUNCTION "public"."has_function"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _got_func($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_function"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_function(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_function"(name, _name, text);
CREATE FUNCTION "public"."has_function"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _got_func($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_function"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_function(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_function"(name, name, _name, text);
CREATE FUNCTION "public"."has_function"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _got_func($1, $2, $3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_function"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_group(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_group"(name);
CREATE FUNCTION "public"."has_group"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_group($1), 'Group ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_group"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_group(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_group"(name, text);
CREATE FUNCTION "public"."has_group"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_group($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_group"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name);
CREATE FUNCTION "public"."has_index"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _have_index( $1, $2 ), 'Index ' || quote_ident($2) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, name);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
BEGIN
   IF _is_schema($1) THEN
       -- ( schema, table, index )
       RETURN ok( _have_index( $1, $2, $3 ), 'Index ' || quote_ident($3) || ' should exist' );
   ELSE
       -- ( table, index, column/expression )
       RETURN has_index( $1, $2, $3, 'Index ' || quote_ident($2) || ' should exist' );
   END IF;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, _name);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
   SELECT has_index( $1, $2, $3, 'Index ' || quote_ident($2) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, text);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT CASE WHEN $3 LIKE '%(%'
           THEN has_index( $1, $2, $3::name )
           ELSE ok( _have_index( $1, $2 ), $3 )
           END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, name, name);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
   SELECT has_index( $1, $2, $3, $4, 'Index ' || quote_ident($3) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, name, _name);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
   SELECT has_index( $1, $2, $3, $4, 'Index ' || quote_ident($3) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, name, text);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT CASE WHEN _is_schema( $1 ) THEN
        -- Looking for schema.table index.
            ok ( _have_index( $1, $2, $3 ), $4)
        ELSE
        -- Looking for particular columns.
            has_index( $1, $2, ARRAY[$3], $4 )
      END;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, _name, text);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
     index_cols name[];
BEGIN
    index_cols := _ikeys($1, $2 );

    IF index_cols IS NULL OR index_cols = '{}'::name[] THEN
        RETURN ok( false, $4 ) || E'\n'
            || diag( 'Index ' || quote_ident($2) || ' ON ' || quote_ident($1) || ' not found');
    END IF;

    RETURN is(
        quote_ident($2) || ' ON ' || quote_ident($1) || '(' || array_to_string( index_cols, ', ' ) || ')',
        quote_ident($2) || ' ON ' || quote_ident($1) || '(' || array_to_string( $3, ', ' ) || ')',
        $4
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, name, name, text);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT has_index( $1, $2, $3, ARRAY[$4], $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_index(name, name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_index"(name, name, name, _name, text);
CREATE FUNCTION "public"."has_index"(IN name, IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
     index_cols name[];
BEGIN
    index_cols := _ikeys($1, $2, $3 );

    IF index_cols IS NULL OR index_cols = '{}'::name[] THEN
        RETURN ok( false, $5 ) || E'\n'
            || diag( 'Index ' || quote_ident($3) || ' ON ' || quote_ident($1) || '.' || quote_ident($2) || ' not found');
    END IF;

    RETURN is(
        quote_ident($3) || ' ON ' || quote_ident($1) || '.' || quote_ident($2) || '(' || array_to_string( index_cols, ', ' ) || ')',
        quote_ident($3) || ' ON ' || quote_ident($1) || '.' || quote_ident($2) || '(' || array_to_string( $4, ', ' ) || ')',
        $5
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_index"(IN name, IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_language(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_language"(name);
CREATE FUNCTION "public"."has_language"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_trusted($1) IS NOT NULL, 'Procedural language ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_language"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_language(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_language"(name, text);
CREATE FUNCTION "public"."has_language"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_trusted($1) IS NOT NULL, $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_language"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_leftop(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_leftop"(name, name);
CREATE FUNCTION "public"."has_leftop"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists(NULL, $1, $2 ),
        'Left operator ' || $1 || '(NONE,' || $2 || ') should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_leftop"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_leftop(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_leftop"(name, name, name);
CREATE FUNCTION "public"."has_leftop"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists(NULL, $1, $2, $3 ),
        'Left operator ' || $1 || '(NONE,' || $2 || ') RETURNS ' || $3 || ' should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_leftop"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_leftop(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_leftop"(name, name, text);
CREATE FUNCTION "public"."has_leftop"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists(NULL, $1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_leftop"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_leftop(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_leftop"(name, name, name, name);
CREATE FUNCTION "public"."has_leftop"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists(NULL, $1, $2, $3, $4 ),
        'Left operator ' || quote_ident($1) || '.' || $2 || '(NONE,'
        || $3 || ') RETURNS ' || $4 || ' should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_leftop"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_leftop(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_leftop"(name, name, name, text);
CREATE FUNCTION "public"."has_leftop"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists(NULL, $1, $2, $3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_leftop"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_leftop(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_leftop"(name, name, name, name, text);
CREATE FUNCTION "public"."has_leftop"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists(NULL, $1, $2, $3, $4), $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_leftop"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_opclass(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_opclass"(name);
CREATE FUNCTION "public"."has_opclass"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _opc_exists( $1 ), 'Operator class ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_opclass"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_opclass(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_opclass"(name, name);
CREATE FUNCTION "public"."has_opclass"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _opc_exists( $1, $2 ), 'Operator class ' || quote_ident($1) || '.' || quote_ident($2) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_opclass"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_opclass(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_opclass"(name, text);
CREATE FUNCTION "public"."has_opclass"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _opc_exists( $1 ), $2)
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_opclass"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_opclass(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_opclass"(name, name, text);
CREATE FUNCTION "public"."has_opclass"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _opc_exists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_opclass"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_operator(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_operator"(name, name, name);
CREATE FUNCTION "public"."has_operator"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists($1, $2, $3 ),
        'Operator ' ||  $2 || '(' || $1 || ',' || $3
        || ') should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_operator"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_operator(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_operator"(name, name, name, name);
CREATE FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists($1, $2, $3, $4 ),
        'Operator ' ||  $2 || '(' || $1 || ',' || $3
        || ') RETURNS ' || $4 || ' should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_operator(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_operator"(name, name, name, text);
CREATE FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists($1, $2, $3 ), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_operator(name, name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_operator"(name, name, name, name, name);
CREATE FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists($1, $2, $3, $4, $5 ),
        'Operator ' || quote_ident($2) || '.' || $3 || '(' || $1 || ',' || $4
        || ') RETURNS ' || $5 || ' should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_operator(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_operator"(name, name, name, name, text);
CREATE FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists($1, $2, $3, $4 ), $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_operator(name, name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_operator"(name, name, name, name, name, text);
CREATE FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists($1, $2, $3, $4, $5 ), $6 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_operator"(IN name, IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_pk(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_pk"(name);
CREATE FUNCTION "public"."has_pk"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_pk( $1, 'Table ' || quote_ident($1) || ' should have a primary key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_pk"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_pk(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_pk"(name, text);
CREATE FUNCTION "public"."has_pk"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _hasc( $1, 'p' ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_pk"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_pk(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_pk"(name, name, text);
CREATE FUNCTION "public"."has_pk"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _hasc( $1, $2, 'p' ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_pk"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_relation(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_relation"(name);
CREATE FUNCTION "public"."has_relation"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_relation( $1, 'Relation ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_relation"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_relation(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_relation"(name, text);
CREATE FUNCTION "public"."has_relation"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _relexists( $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_relation"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_relation(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_relation"(name, name, text);
CREATE FUNCTION "public"."has_relation"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _relexists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_relation"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rightop(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rightop"(name, name);
CREATE FUNCTION "public"."has_rightop"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists($1, $2, NULL ),
        'Right operator ' || $2 || '(' || $1 || ',NONE) should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rightop"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rightop(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rightop"(name, name, name);
CREATE FUNCTION "public"."has_rightop"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists($1, $2, NULL, $3 ),
        'Right operator ' || $2 || '('
        || $1 || ',NONE) RETURNS ' || $3 || ' should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rightop"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rightop(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rightop"(name, name, text);
CREATE FUNCTION "public"."has_rightop"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists( $1, $2, NULL), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rightop"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rightop(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rightop"(name, name, name, name);
CREATE FUNCTION "public"."has_rightop"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
         _op_exists($1, $2, $3, NULL, $4 ),
        'Right operator ' || quote_ident($2) || '.' || $3 || '('
        || $1 || ',NONE) RETURNS ' || $4 || ' should exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rightop"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rightop(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rightop"(name, name, name, text);
CREATE FUNCTION "public"."has_rightop"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists( $1, $2, NULL, $3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rightop"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rightop(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rightop"(name, name, name, name, text);
CREATE FUNCTION "public"."has_rightop"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _op_exists( $1, $2, $3, NULL, $4), $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rightop"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_role(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_role"(name);
CREATE FUNCTION "public"."has_role"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_role($1), 'Role ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_role"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_role(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_role"(name, text);
CREATE FUNCTION "public"."has_role"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_role($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_role"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rule(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rule"(name, name);
CREATE FUNCTION "public"."has_rule"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_instead($1, $2) IS NOT NULL, 'Relation ' || quote_ident($1) || ' should have rule ' || quote_ident($2) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rule"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rule(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rule"(name, name, name);
CREATE FUNCTION "public"."has_rule"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_instead($1, $2, $3) IS NOT NULL, 'Relation ' || quote_ident($1) || '.' || quote_ident($2) || ' should have rule ' || quote_ident($3) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rule"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rule(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rule"(name, name, text);
CREATE FUNCTION "public"."has_rule"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_instead($1, $2) IS NOT NULL, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rule"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_rule(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_rule"(name, name, name, text);
CREATE FUNCTION "public"."has_rule"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_instead($1, $2, $3) IS NOT NULL, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_rule"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_schema(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_schema"(name);
CREATE FUNCTION "public"."has_schema"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_schema( $1, 'Schema ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_schema"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_schema(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_schema"(name, text);
CREATE FUNCTION "public"."has_schema"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        EXISTS(
            SELECT true
              FROM pg_catalog.pg_namespace
             WHERE nspname = $1
        ), $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_schema"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_sequence(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_sequence"(name);
CREATE FUNCTION "public"."has_sequence"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_sequence( $1, 'Sequence ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_sequence"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_sequence(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_sequence"(name, text);
CREATE FUNCTION "public"."has_sequence"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'S', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_sequence"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_sequence(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_sequence"(name, name, text);
CREATE FUNCTION "public"."has_sequence"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'S', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_sequence"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_table(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_table"(name);
CREATE FUNCTION "public"."has_table"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_table( $1, 'Table ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_table"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_table(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_table"(name, text);
CREATE FUNCTION "public"."has_table"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'r', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_table"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_table(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_table"(name, name, text);
CREATE FUNCTION "public"."has_table"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'r', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_table"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_tablespace(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_tablespace"(name);
CREATE FUNCTION "public"."has_tablespace"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_tablespace( $1, 'Tablespace ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_tablespace"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_tablespace(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_tablespace"(name, text);
CREATE FUNCTION "public"."has_tablespace"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        EXISTS(
            SELECT true
              FROM pg_catalog.pg_tablespace
             WHERE spcname = $1
        ), $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_tablespace"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_tablespace(name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_tablespace"(name, text, text);
CREATE FUNCTION "public"."has_tablespace"(IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF pg_version_num() >= 90200 THEN
        RETURN ok(
            EXISTS(
                SELECT true
                  FROM pg_catalog.pg_tablespace
                 WHERE spcname = $1
                   AND pg_tablespace_location(oid) = $2
            ), $3
        );
    ELSE
        RETURN ok(
            EXISTS(
                SELECT true
                  FROM pg_catalog.pg_tablespace
                 WHERE spcname = $1
                   AND spclocation = $2
            ), $3
        );
    END IF;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_tablespace"(IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_trigger(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_trigger"(name, name);
CREATE FUNCTION "public"."has_trigger"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _trig($1, $2), 'Table ' || quote_ident($1) || ' should have trigger ' || quote_ident($2));
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_trigger"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_trigger(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_trigger"(name, name, name);
CREATE FUNCTION "public"."has_trigger"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_trigger(
        $1, $2, $3,
        'Table ' || quote_ident($1) || '.' || quote_ident($2) || ' should have trigger ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_trigger"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_trigger(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_trigger"(name, name, text);
CREATE FUNCTION "public"."has_trigger"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _trig($1, $2), $3);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_trigger"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_trigger(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_trigger"(name, name, name, text);
CREATE FUNCTION "public"."has_trigger"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _trig($1, $2, $3), $4);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_trigger"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_type(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_type"(name);
CREATE FUNCTION "public"."has_type"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, NULL ), ('Type ' || quote_ident($1) || ' should exist')::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_type"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_type(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_type"(name, name);
CREATE FUNCTION "public"."has_type"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_type( $1, $2, 'Type ' || quote_ident($1) || '.' || quote_ident($2) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_type"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_type(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_type"(name, text);
CREATE FUNCTION "public"."has_type"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, NULL ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_type"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_type(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_type"(name, name, text);
CREATE FUNCTION "public"."has_type"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_type( $1, $2, NULL ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_type"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_unique(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_unique"(text);
CREATE FUNCTION "public"."has_unique"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT has_unique( $1, 'Table ' || quote_ident($1) || ' should have a unique constraint' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_unique"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_unique(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_unique"(text, text);
CREATE FUNCTION "public"."has_unique"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _hasc( $1, 'u' ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_unique"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_unique(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_unique"(text, text, text);
CREATE FUNCTION "public"."has_unique"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _hasc( $1, $2, 'u' ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_unique"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_user(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_user"(name);
CREATE FUNCTION "public"."has_user"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_user( $1 ), 'User ' || quote_ident($1) || ' should exist');
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_user"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_user(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_user"(name, text);
CREATE FUNCTION "public"."has_user"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _has_user($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_user"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_view(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_view"(name);
CREATE FUNCTION "public"."has_view"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT has_view( $1, 'View ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_view"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_view(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_view"(name, text);
CREATE FUNCTION "public"."has_view"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'v', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_view"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.has_view(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."has_view"(name, name, text);
CREATE FUNCTION "public"."has_view"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _rexists( 'v', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."has_view"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_cast(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_cast"(name, name);
CREATE FUNCTION "public"."hasnt_cast"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT _cast_exists( $1, $2 ),
        'Cast (' || quote_ident($1) || ' AS ' || quote_ident($2)
        || ') should not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_cast"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_cast(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_cast"(name, name, name);
CREATE FUNCTION "public"."hasnt_cast"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
   SELECT ok(
        NOT _cast_exists( $1, $2, $3 ),
        'Cast (' || quote_ident($1) || ' AS ' || quote_ident($2)
        || ') WITH FUNCTION ' || quote_ident($3) || '() should not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_cast"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_cast(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_cast"(name, name, text);
CREATE FUNCTION "public"."hasnt_cast"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _cast_exists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_cast"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_cast(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_cast"(name, name, name, name);
CREATE FUNCTION "public"."hasnt_cast"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
   SELECT ok(
       NOT _cast_exists( $1, $2, $3, $4 ),
        'Cast (' || quote_ident($1) || ' AS ' || quote_ident($2)
        || ') WITH FUNCTION ' || quote_ident($3)
        || '.' || quote_ident($4) || '() should not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_cast"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_cast(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_cast"(name, name, name, text);
CREATE FUNCTION "public"."hasnt_cast"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
   SELECT ok( NOT _cast_exists( $1, $2, $3 ), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_cast"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_cast(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_cast"(name, name, name, name, text);
CREATE FUNCTION "public"."hasnt_cast"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
   SELECT ok( NOT _cast_exists( $1, $2, $3, $4 ), $5 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_cast"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_column(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_column"(name, name);
CREATE FUNCTION "public"."hasnt_column"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_column( $1, $2, 'Column ' || quote_ident($1) || '.' || quote_ident($2) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_column"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_column(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_column"(name, name, text);
CREATE FUNCTION "public"."hasnt_column"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _cexists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_column"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_column(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_column"(name, name, name, text);
CREATE FUNCTION "public"."hasnt_column"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _cexists( $1, $2, $3 ), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_column"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_composite(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_composite"(name);
CREATE FUNCTION "public"."hasnt_composite"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_composite( $1, 'Composite type ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_composite"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_composite(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_composite"(name, text);
CREATE FUNCTION "public"."hasnt_composite"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'c', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_composite"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_composite(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_composite"(name, name, text);
CREATE FUNCTION "public"."hasnt_composite"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'c', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_composite"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_domain(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_domain"(name);
CREATE FUNCTION "public"."hasnt_domain"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, ARRAY['d'] ), ('Domain ' || quote_ident($1) || ' should not exist')::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_domain"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_domain(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_domain"(name, name);
CREATE FUNCTION "public"."hasnt_domain"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_domain( $1, $2, 'Domain ' || quote_ident($1) || '.' || quote_ident($2) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_domain"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_domain(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_domain"(name, text);
CREATE FUNCTION "public"."hasnt_domain"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, ARRAY['d'] ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_domain"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_domain(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_domain"(name, name, text);
CREATE FUNCTION "public"."hasnt_domain"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, $2, ARRAY['d'] ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_domain"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_enum(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_enum"(name);
CREATE FUNCTION "public"."hasnt_enum"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, ARRAY['e'] ), ('Enum ' || quote_ident($1) || ' should not exist')::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_enum"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_enum(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_enum"(name, name);
CREATE FUNCTION "public"."hasnt_enum"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_enum( $1, $2, 'Enum ' || quote_ident($1) || '.' || quote_ident($2) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_enum"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_enum(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_enum"(name, text);
CREATE FUNCTION "public"."hasnt_enum"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, ARRAY['e'] ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_enum"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_enum(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_enum"(name, name, text);
CREATE FUNCTION "public"."hasnt_enum"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, $2, ARRAY['e'] ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_enum"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_fk(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_fk"(name);
CREATE FUNCTION "public"."hasnt_fk"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_fk( $1, 'Table ' || quote_ident($1) || ' should not have a foreign key constraint' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_fk"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_fk(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_fk"(name, text);
CREATE FUNCTION "public"."hasnt_fk"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _hasc( $1, 'f' ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_fk"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_fk(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_fk"(name, name, text);
CREATE FUNCTION "public"."hasnt_fk"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _hasc( $1, $2, 'f' ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_fk"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_foreign_table(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_foreign_table"(name);
CREATE FUNCTION "public"."hasnt_foreign_table"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_foreign_table( $1, 'Foreign table ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_foreign_table"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_foreign_table(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_foreign_table"(name, text);
CREATE FUNCTION "public"."hasnt_foreign_table"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'f', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_foreign_table"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_foreign_table(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_foreign_table"(name, name, text);
CREATE FUNCTION "public"."hasnt_foreign_table"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'f', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_foreign_table"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_function(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_function"(name);
CREATE FUNCTION "public"."hasnt_function"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _got_func($1), 'Function ' || quote_ident($1) || '() should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_function"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_function(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_function"(name, name);
CREATE FUNCTION "public"."hasnt_function"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT _got_func($1, $2),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '() should not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_function"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_function(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_function"(name, _name);
CREATE FUNCTION "public"."hasnt_function"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT _got_func($1, $2),
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_function"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_function(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_function"(name, text);
CREATE FUNCTION "public"."hasnt_function"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _got_func($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_function"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_function(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_function"(name, name, _name);
CREATE FUNCTION "public"."hasnt_function"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT _got_func($1, $2, $3),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_function"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_function(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_function"(name, name, text);
CREATE FUNCTION "public"."hasnt_function"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _got_func($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_function"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_function(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_function"(name, _name, text);
CREATE FUNCTION "public"."hasnt_function"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _got_func($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_function"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_function(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_function"(name, name, _name, text);
CREATE FUNCTION "public"."hasnt_function"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _got_func($1, $2, $3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_function"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_group(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_group"(name);
CREATE FUNCTION "public"."hasnt_group"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_group($1), 'Group ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_group"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_group(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_group"(name, text);
CREATE FUNCTION "public"."hasnt_group"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_group($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_group"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_index(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_index"(name, name);
CREATE FUNCTION "public"."hasnt_index"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT _have_index( $1, $2 ),
        'Index ' || quote_ident($2) || ' should not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_index"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_index(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_index"(name, name, name);
CREATE FUNCTION "public"."hasnt_index"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT _have_index( $1, $2, $3 ),
        'Index ' || quote_ident($3) || ' should not exist'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_index"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_index(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_index"(name, name, text);
CREATE FUNCTION "public"."hasnt_index"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _have_index( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_index"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_index(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_index"(name, name, name, text);
CREATE FUNCTION "public"."hasnt_index"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    RETURN ok( NOT _have_index( $1, $2, $3 ), $4 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_index"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_language(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_language"(name);
CREATE FUNCTION "public"."hasnt_language"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_trusted($1) IS NULL, 'Procedural language ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_language"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_language(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_language"(name, text);
CREATE FUNCTION "public"."hasnt_language"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_trusted($1) IS NULL, $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_language"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_opclass(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_opclass"(name);
CREATE FUNCTION "public"."hasnt_opclass"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _opc_exists( $1 ), 'Operator class ' || quote_ident($1) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_opclass"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_opclass(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_opclass"(name, name);
CREATE FUNCTION "public"."hasnt_opclass"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _opc_exists( $1, $2 ), 'Operator class ' || quote_ident($1) || '.' || quote_ident($2) || ' should exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_opclass"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_opclass(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_opclass"(name, text);
CREATE FUNCTION "public"."hasnt_opclass"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _opc_exists( $1 ), $2)
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_opclass"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_opclass(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_opclass"(name, name, text);
CREATE FUNCTION "public"."hasnt_opclass"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _opc_exists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_opclass"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_pk(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_pk"(name);
CREATE FUNCTION "public"."hasnt_pk"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_pk( $1, 'Table ' || quote_ident($1) || ' should not have a primary key' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_pk"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_pk(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_pk"(name, text);
CREATE FUNCTION "public"."hasnt_pk"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _hasc( $1, 'p' ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_pk"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_pk(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_pk"(name, name, text);
CREATE FUNCTION "public"."hasnt_pk"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _hasc( $1, $2, 'p' ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_pk"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_relation(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_relation"(name);
CREATE FUNCTION "public"."hasnt_relation"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_relation( $1, 'Relation ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_relation"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_relation(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_relation"(name, text);
CREATE FUNCTION "public"."hasnt_relation"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _relexists( $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_relation"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_relation(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_relation"(name, name, text);
CREATE FUNCTION "public"."hasnt_relation"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _relexists( $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_relation"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_role(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_role"(name);
CREATE FUNCTION "public"."hasnt_role"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_role($1), 'Role ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_role"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_role(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_role"(name, text);
CREATE FUNCTION "public"."hasnt_role"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_role($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_role"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_rule(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_rule"(name, name);
CREATE FUNCTION "public"."hasnt_rule"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_instead($1, $2) IS NULL, 'Relation ' || quote_ident($1) || ' should not have rule ' || quote_ident($2) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_rule"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_rule(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_rule"(name, name, name);
CREATE FUNCTION "public"."hasnt_rule"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_instead($1, $2, $3) IS NULL, 'Relation ' || quote_ident($1) || '.' || quote_ident($2) || ' should not have rule ' || quote_ident($3) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_rule"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_rule(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_rule"(name, name, text);
CREATE FUNCTION "public"."hasnt_rule"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_instead($1, $2) IS NULL, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_rule"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_rule(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_rule"(name, name, name, text);
CREATE FUNCTION "public"."hasnt_rule"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( _is_instead($1, $2, $3) IS NULL, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_rule"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_schema(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_schema"(name);
CREATE FUNCTION "public"."hasnt_schema"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_schema( $1, 'Schema ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_schema"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_schema(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_schema"(name, text);
CREATE FUNCTION "public"."hasnt_schema"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT EXISTS(
            SELECT true
              FROM pg_catalog.pg_namespace
             WHERE nspname = $1
        ), $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_schema"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_sequence(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_sequence"(name);
CREATE FUNCTION "public"."hasnt_sequence"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_sequence( $1, 'Sequence ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_sequence"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_sequence(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_sequence"(name, text);
CREATE FUNCTION "public"."hasnt_sequence"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'S', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_sequence"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_sequence(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_sequence"(name, name, text);
CREATE FUNCTION "public"."hasnt_sequence"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'S', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_sequence"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_table(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_table"(name);
CREATE FUNCTION "public"."hasnt_table"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_table( $1, 'Table ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_table"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_table(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_table"(name, text);
CREATE FUNCTION "public"."hasnt_table"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'r', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_table"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_table(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_table"(name, name, text);
CREATE FUNCTION "public"."hasnt_table"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'r', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_table"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_tablespace(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_tablespace"(name);
CREATE FUNCTION "public"."hasnt_tablespace"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_tablespace( $1, 'Tablespace ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_tablespace"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_tablespace(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_tablespace"(name, text);
CREATE FUNCTION "public"."hasnt_tablespace"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT EXISTS(
            SELECT true
              FROM pg_catalog.pg_tablespace
             WHERE spcname = $1
        ), $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_tablespace"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_trigger(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_trigger"(name, name);
CREATE FUNCTION "public"."hasnt_trigger"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _trig($1, $2), 'Table ' || quote_ident($1) || ' should not have trigger ' || quote_ident($2));
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_trigger"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_trigger(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_trigger"(name, name, name);
CREATE FUNCTION "public"."hasnt_trigger"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        NOT _trig($1, $2, $3),
        'Table ' || quote_ident($1) || '.' || quote_ident($2) || ' should not have trigger ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_trigger"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_trigger(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_trigger"(name, name, text);
CREATE FUNCTION "public"."hasnt_trigger"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _trig($1, $2), $3);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_trigger"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_trigger(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_trigger"(name, name, name, text);
CREATE FUNCTION "public"."hasnt_trigger"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _trig($1, $2, $3), $4);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_trigger"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_type(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_type"(name);
CREATE FUNCTION "public"."hasnt_type"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, NULL ), ('Type ' || quote_ident($1) || ' should not exist')::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_type"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_type(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_type"(name, name);
CREATE FUNCTION "public"."hasnt_type"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_type( $1, $2, 'Type ' || quote_ident($1) || '.' || quote_ident($2) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_type"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_type(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_type"(name, text);
CREATE FUNCTION "public"."hasnt_type"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, NULL ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_type"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_type(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_type"(name, name, text);
CREATE FUNCTION "public"."hasnt_type"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_type( $1, $2, NULL ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_type"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_user(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_user"(name);
CREATE FUNCTION "public"."hasnt_user"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_user( $1 ), 'User ' || quote_ident($1) || ' should not exist');
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_user"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_user(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_user"(name, text);
CREATE FUNCTION "public"."hasnt_user"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _has_user($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_user"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_view(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_view"(name);
CREATE FUNCTION "public"."hasnt_view"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT hasnt_view( $1, 'View ' || quote_ident($1) || ' should not exist' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_view"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_view(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_view"(name, text);
CREATE FUNCTION "public"."hasnt_view"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'v', $1 ), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_view"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.hasnt_view(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."hasnt_view"(name, name, text);
CREATE FUNCTION "public"."hasnt_view"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( NOT _rexists( 'v', $1, $2 ), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."hasnt_view"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ialike(anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ialike"(anyelement, text);
CREATE FUNCTION "public"."ialike"(IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _alike( $1 ~~* $2, $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."ialike"(IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ialike(anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ialike"(anyelement, text, text);
CREATE FUNCTION "public"."ialike"(IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _alike( $1 ~~* $2, $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."ialike"(IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.imatches(anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."imatches"(anyelement, text);
CREATE FUNCTION "public"."imatches"(IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _alike( $1 ~* $2, $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."imatches"(IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.imatches(anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."imatches"(anyelement, text, text);
CREATE FUNCTION "public"."imatches"(IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _alike( $1 ~* $2, $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."imatches"(IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.in_todo()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."in_todo"();
CREATE FUNCTION "public"."in_todo"() RETURNS "bool" 
	AS $BODY$
DECLARE
    todos integer;
BEGIN
    todos := _get('todo');
    RETURN CASE WHEN todos IS NULL THEN FALSE ELSE TRUE END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."in_todo"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_primary(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_primary"(name);
CREATE FUNCTION "public"."index_is_primary"(IN name) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisprimary
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_class ct ON ct.oid = x.indrelid
     WHERE ci.relname = $1
       AND pg_catalog.pg_table_is_visible(ct.oid)
      INTO res;

      RETURN ok(
          COALESCE(res, false),
          'Index ' || quote_ident($1) || ' should be on a primary key'
      );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_primary"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_primary(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_primary"(name, name);
CREATE FUNCTION "public"."index_is_primary"(IN name, IN name) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisprimary
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
     WHERE ct.relname = $1
       AND ci.relname = $2
       AND pg_catalog.pg_table_is_visible(ct.oid)
     INTO res;

      RETURN ok(
          COALESCE(res, false),
          'Index ' || quote_ident($2) || ' should be on a primary key'
      );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_primary"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_primary(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_primary"(name, name, name);
CREATE FUNCTION "public"."index_is_primary"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT index_is_primary(
        $1, $2, $3,
        'Index ' || quote_ident($3) || ' should be on a primary key'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_primary"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_primary(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_primary"(name, name, name, text);
CREATE FUNCTION "public"."index_is_primary"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisprimary
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
     WHERE ct.relname = $2
       AND ci.relname = $3
       AND n.nspname  = $1
      INTO res;

      RETURN ok( COALESCE(res, false), $4 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_primary"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_type(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_type"(name, name);
CREATE FUNCTION "public"."index_is_type"(IN name, IN name) RETURNS "text" 
	AS $BODY$
DECLARE
    aname name;
BEGIN
    SELECT am.amname
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_am am    ON ci.relam = am.oid
     WHERE ci.relname = $1
      INTO aname;

      return is(
          aname, $2,
          'Index ' || quote_ident($1) || ' should be a ' || quote_ident($2) || ' index'
      );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_type"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_type(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_type"(name, name, name);
CREATE FUNCTION "public"."index_is_type"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
DECLARE
    aname name;
BEGIN
    SELECT am.amname
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_am am    ON ci.relam = am.oid
     WHERE ct.relname = $1
       AND ci.relname = $2
      INTO aname;

      return is(
          aname, $3,
          'Index ' || quote_ident($2) || ' should be a ' || quote_ident($3) || ' index'
      );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_type"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_type(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_type"(name, name, name, name);
CREATE FUNCTION "public"."index_is_type"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT index_is_type(
        $1, $2, $3, $4,
        'Index ' || quote_ident($3) || ' should be a ' || quote_ident($4) || ' index'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_type"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_type(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_type"(name, name, name, name, text);
CREATE FUNCTION "public"."index_is_type"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    aname name;
BEGIN
    SELECT am.amname
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
      JOIN pg_catalog.pg_am am       ON ci.relam = am.oid
     WHERE ct.relname = $2
       AND ci.relname = $3
       AND n.nspname  = $1
      INTO aname;

      return is( aname, $4, $5 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_type"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_unique(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_unique"(name);
CREATE FUNCTION "public"."index_is_unique"(IN name) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisunique
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_class ct ON ct.oid = x.indrelid
     WHERE ci.relname = $1
       AND pg_catalog.pg_table_is_visible(ct.oid)
      INTO res;

      RETURN ok(
          COALESCE(res, false),
          'Index ' || quote_ident($1) || ' should be unique'
      );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_unique"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_unique(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_unique"(name, name);
CREATE FUNCTION "public"."index_is_unique"(IN name, IN name) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisunique
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
     WHERE ct.relname = $1
       AND ci.relname = $2
       AND pg_catalog.pg_table_is_visible(ct.oid)
      INTO res;

      RETURN ok(
          COALESCE(res, false),
          'Index ' || quote_ident($2) || ' should be unique'
      );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_unique"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_unique(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_unique"(name, name, name);
CREATE FUNCTION "public"."index_is_unique"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT index_is_unique(
        $1, $2, $3,
        'Index ' || quote_ident($3) || ' should be unique'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_unique"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_is_unique(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_is_unique"(name, name, name, text);
CREATE FUNCTION "public"."index_is_unique"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisunique
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
     WHERE ct.relname = $2
       AND ci.relname = $3
       AND n.nspname  = $1
      INTO res;

      RETURN ok( COALESCE(res, false), $4 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_is_unique"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_owner_is"(name, name, name);
CREATE FUNCTION "public"."index_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT index_owner_is(
        $1, $2, $3,
        'Index ' || quote_ident($2) || ' ON '
        || quote_ident($1) || ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_owner_is(name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_owner_is"(name, name, name, name);
CREATE FUNCTION "public"."index_owner_is"(IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT index_owner_is(
        $1, $2, $3, $4,
        'Index ' || quote_ident($3) || ' ON '
        || quote_ident($1) || '.' || quote_ident($2)
        || ' should be owned by ' || quote_ident($4)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_owner_is"(IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."index_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_index_owner($1, $2);
BEGIN
    -- Make sure the index exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Index ' || quote_ident($2) || ' ON ' || quote_ident($1) || ' not found'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.index_owner_is(name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."index_owner_is"(name, name, name, name, text);
CREATE FUNCTION "public"."index_owner_is"(IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_index_owner($1, $2, $3);
BEGIN
    -- Make sure the index exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            E'    Index ' || quote_ident($3) || ' ON '
            || quote_ident($1) || '.' || quote_ident($2) || ' not found'
        );
    END IF;

    RETURN is(owner, $4, $5);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."index_owner_is"(IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.indexes_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."indexes_are"(name, _name);
CREATE FUNCTION "public"."indexes_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT indexes_are( $1, $2, 'Table ' || quote_ident($1) || ' should have the correct indexes' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."indexes_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.indexes_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."indexes_are"(name, name, _name);
CREATE FUNCTION "public"."indexes_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT indexes_are( $1, $2, $3, 'Table ' || quote_ident($1) || '.' || quote_ident($2) || ' should have the correct indexes' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."indexes_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.indexes_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."indexes_are"(name, _name, text);
CREATE FUNCTION "public"."indexes_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'indexes',
        ARRAY(
            SELECT ci.relname
              FROM pg_catalog.pg_index x
              JOIN pg_catalog.pg_class ct ON ct.oid = x.indrelid
              JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
              JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
             WHERE ct.relname = $1
               AND pg_catalog.pg_table_is_visible(ct.oid)
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
            EXCEPT
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
        ),
        ARRAY(
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT ci.relname
              FROM pg_catalog.pg_index x
              JOIN pg_catalog.pg_class ct ON ct.oid = x.indrelid
              JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
              JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
             WHERE ct.relname = $1
               AND pg_catalog.pg_table_is_visible(ct.oid)
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
        ),
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."indexes_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.indexes_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."indexes_are"(name, name, _name, text);
CREATE FUNCTION "public"."indexes_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'indexes',
        ARRAY(
            SELECT ci.relname
              FROM pg_catalog.pg_index x
              JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
              JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
              JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
             WHERE ct.relname = $2
               AND n.nspname  = $1
            EXCEPT
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
        ),
        ARRAY(
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
            EXCEPT
            SELECT ci.relname
              FROM pg_catalog.pg_index x
              JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
              JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
              JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
             WHERE ct.relname = $2
               AND n.nspname  = $1
        ),
        $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."indexes_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is(anyelement, anyelement)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is"(anyelement, anyelement);
CREATE FUNCTION "public"."is"(IN anyelement, IN anyelement) RETURNS "text" 
	AS $BODY$
    SELECT is( $1, $2, NULL);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is"(IN anyelement, IN anyelement) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is(anyelement, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is"(anyelement, anyelement, text);
CREATE FUNCTION "public"."is"(IN anyelement, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    result BOOLEAN;
    output TEXT;
BEGIN
    -- Would prefer $1 IS NOT DISTINCT FROM, but that's not supported by 8.1.
    result := NOT $1 IS DISTINCT FROM $2;
    output := ok( result, $3 );
    RETURN output || CASE result WHEN TRUE THEN '' ELSE E'\n' || diag(
           '        have: ' || CASE WHEN $1 IS NULL THEN 'NULL' ELSE $1::text END ||
        E'\n        want: ' || CASE WHEN $2 IS NULL THEN 'NULL' ELSE $2::text END
    ) END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is"(IN anyelement, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_aggregate(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_aggregate"(name);
CREATE FUNCTION "public"."is_aggregate"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _agg($1), 'Function ' || quote_ident($1) || '() should be an aggregate function' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_aggregate"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_aggregate(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_aggregate"(name, name);
CREATE FUNCTION "public"."is_aggregate"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _agg($1, $2),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '() should be an aggregate function'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_aggregate"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_aggregate(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_aggregate"(name, _name);
CREATE FUNCTION "public"."is_aggregate"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _agg($1, $2),
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should be an aggregate function'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_aggregate"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_aggregate(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_aggregate"(name, text);
CREATE FUNCTION "public"."is_aggregate"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, _agg($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_aggregate"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_aggregate(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_aggregate"(name, name, _name);
CREATE FUNCTION "public"."is_aggregate"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _agg($1, $2, $3),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should be an aggregate function'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_aggregate"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_aggregate(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_aggregate"(name, name, text);
CREATE FUNCTION "public"."is_aggregate"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, _agg($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_aggregate"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_aggregate(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_aggregate"(name, _name, text);
CREATE FUNCTION "public"."is_aggregate"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, $2, _agg($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_aggregate"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_aggregate(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_aggregate"(name, name, _name, text);
CREATE FUNCTION "public"."is_aggregate"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, $3, _agg($1, $2, $3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_aggregate"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_clustered(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_clustered"(name);
CREATE FUNCTION "public"."is_clustered"(IN name) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisclustered
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
     WHERE ci.relname = $1
      INTO res;

      RETURN ok(
          COALESCE(res, false),
          'Table should be clustered on index ' || quote_ident($1)
      );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_clustered"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_clustered(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_clustered"(name, name);
CREATE FUNCTION "public"."is_clustered"(IN name, IN name) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisclustered
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci ON ci.oid = x.indexrelid
     WHERE ct.relname = $1
       AND ci.relname = $2
      INTO res;

      RETURN ok(
          COALESCE(res, false),
          'Table ' || quote_ident($1) || ' should be clustered on index ' || quote_ident($2)
      );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_clustered"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_clustered(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_clustered"(name, name, name);
CREATE FUNCTION "public"."is_clustered"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT is_clustered(
        $1, $2, $3,
        'Table ' || quote_ident($1) || '.' || quote_ident($2) ||
        ' should be clustered on index ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_clustered"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_clustered(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_clustered"(name, name, name, text);
CREATE FUNCTION "public"."is_clustered"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    res boolean;
BEGIN
    SELECT x.indisclustered
      FROM pg_catalog.pg_index x
      JOIN pg_catalog.pg_class ct    ON ct.oid = x.indrelid
      JOIN pg_catalog.pg_class ci    ON ci.oid = x.indexrelid
      JOIN pg_catalog.pg_namespace n ON n.oid = ct.relnamespace
     WHERE ct.relname = $2
       AND ci.relname = $3
       AND n.nspname  = $1
      INTO res;

      RETURN ok( COALESCE(res, false), $4 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_clustered"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_definer(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_definer"(name);
CREATE FUNCTION "public"."is_definer"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _definer($1), 'Function ' || quote_ident($1) || '() should be security definer' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_definer"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_definer(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_definer"(name, name);
CREATE FUNCTION "public"."is_definer"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _definer($1, $2),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '() should be security definer'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_definer"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_definer(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_definer"(name, _name);
CREATE FUNCTION "public"."is_definer"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _definer($1, $2),
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should be security definer'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_definer"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_definer(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_definer"(name, text);
CREATE FUNCTION "public"."is_definer"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, _definer($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_definer"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_definer(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_definer"(name, name, _name);
CREATE FUNCTION "public"."is_definer"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _definer($1, $2, $3),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should be security definer'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_definer"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_definer(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_definer"(name, name, text);
CREATE FUNCTION "public"."is_definer"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, _definer($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_definer"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_definer(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_definer"(name, _name, text);
CREATE FUNCTION "public"."is_definer"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, $2, _definer($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_definer"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_definer(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_definer"(name, name, _name, text);
CREATE FUNCTION "public"."is_definer"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, $3, _definer($1, $2, $3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_definer"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_empty(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_empty"(text);
CREATE FUNCTION "public"."is_empty"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT is_empty( $1, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_empty"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_empty(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_empty"(text, text);
CREATE FUNCTION "public"."is_empty"(IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    extras  TEXT[]  := '{}';
    res     BOOLEAN := TRUE;
    msg     TEXT    := '';
    rec     RECORD;
BEGIN
    -- Find extra records.
    FOR rec in EXECUTE _query($1) LOOP
        extras := extras || rec::text;
    END LOOP;

    -- What extra records do we have?
    IF extras[1] IS NOT NULL THEN
        res := FALSE;
        msg := E'\n' || diag(
            E'    Unexpected records:\n        '
            ||  array_to_string( extras, E'\n        ' )
        );
    END IF;

    RETURN ok(res, $2) || msg;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_empty"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_member_of(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_member_of"(name, name);
CREATE FUNCTION "public"."is_member_of"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT is_member_of( $1, ARRAY[$2] );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_member_of"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_member_of(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_member_of"(name, _name);
CREATE FUNCTION "public"."is_member_of"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT is_member_of( $1, $2, 'Should have members of group ' || quote_ident($1) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_member_of"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_member_of(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_member_of"(name, name, text);
CREATE FUNCTION "public"."is_member_of"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT is_member_of( $1, ARRAY[$2], $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_member_of"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_member_of(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_member_of"(name, _name, text);
CREATE FUNCTION "public"."is_member_of"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    missing text[];
BEGIN
    IF NOT _has_role($1) THEN
        RETURN fail( $3 ) || E'\n' || diag (
            '    Role ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    SELECT ARRAY(
        SELECT quote_ident($2[i])
          FROM generate_series(1, array_upper($2, 1)) s(i)
          LEFT JOIN pg_catalog.pg_user ON usename = $2[i]
         WHERE usesysid IS NULL
            OR NOT usesysid = ANY ( _grolist($1) )
         ORDER BY s.i
    ) INTO missing;
    IF missing[1] IS NULL THEN
        RETURN ok( true, $3 );
    END IF;
    RETURN ok( false, $3 ) || E'\n' || diag(
        '    Users missing from the ' || quote_ident($1) || E' group:\n        ' ||
        array_to_string( missing, E'\n        ')
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_member_of"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_strict(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_strict"(name);
CREATE FUNCTION "public"."is_strict"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok( _strict($1), 'Function ' || quote_ident($1) || '() should be strict' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_strict"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_strict(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_strict"(name, name);
CREATE FUNCTION "public"."is_strict"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _strict($1, $2),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '() should be strict'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_strict"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_strict(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_strict"(name, _name);
CREATE FUNCTION "public"."is_strict"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _strict($1, $2),
        'Function ' || quote_ident($1) || '(' ||
        array_to_string($2, ', ') || ') should be strict'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_strict"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_strict(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_strict"(name, text);
CREATE FUNCTION "public"."is_strict"(IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, _strict($1), $2 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_strict"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_strict(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_strict"(name, name, _name);
CREATE FUNCTION "public"."is_strict"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT ok(
        _strict($1, $2, $3),
        'Function ' || quote_ident($1) || '.' || quote_ident($2) || '(' ||
        array_to_string($3, ', ') || ') should be strict'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_strict"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_strict(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_strict"(name, name, text);
CREATE FUNCTION "public"."is_strict"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, _strict($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_strict"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_strict(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_strict"(name, _name, text);
CREATE FUNCTION "public"."is_strict"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare(NULL, $1, $2, _strict($1, $2), $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_strict"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_strict(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_strict"(name, name, _name, text);
CREATE FUNCTION "public"."is_strict"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _func_compare($1, $2, $3, _strict($1, $2, $3), $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_strict"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_superuser(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_superuser"(name);
CREATE FUNCTION "public"."is_superuser"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT is_superuser( $1, 'User ' || quote_ident($1) || ' should be a super user' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_superuser"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.is_superuser(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."is_superuser"(name, text);
CREATE FUNCTION "public"."is_superuser"(IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    is_super boolean := _is_super($1);
BEGIN
    IF is_super IS NULL THEN
        RETURN fail( $2 ) || E'\n' || diag( '    User ' || quote_ident($1) || ' does not exist') ;
    END IF;
    RETURN ok( is_super, $2 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."is_superuser"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isa_ok(anyelement, regtype)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isa_ok"(anyelement, regtype);
CREATE FUNCTION "public"."isa_ok"(IN anyelement, IN regtype) RETURNS "text" 
	AS $BODY$
    SELECT isa_ok($1, $2, 'the value');
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."isa_ok"(IN anyelement, IN regtype) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isa_ok(anyelement, regtype, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isa_ok"(anyelement, regtype, text);
CREATE FUNCTION "public"."isa_ok"(IN anyelement, IN regtype, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    typeof regtype := pg_typeof($1);
BEGIN
    IF typeof = $2 THEN RETURN ok(true, $3 || ' isa ' || $2 ); END IF;
    RETURN ok(false, $3 || ' isa ' || $2 ) || E'\n' ||
        diag('    ' || $3 || ' isn''t a "' || $2 || '" it''s a "' || typeof || '"');
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."isa_ok"(IN anyelement, IN regtype, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isnt(anyelement, anyelement)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isnt"(anyelement, anyelement);
CREATE FUNCTION "public"."isnt"(IN anyelement, IN anyelement) RETURNS "text" 
	AS $BODY$
    SELECT isnt( $1, $2, NULL);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."isnt"(IN anyelement, IN anyelement) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isnt(anyelement, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isnt"(anyelement, anyelement, text);
CREATE FUNCTION "public"."isnt"(IN anyelement, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    result BOOLEAN;
    output TEXT;
BEGIN
    result := $1 IS DISTINCT FROM $2;
    output := ok( result, $3 );
    RETURN output || CASE result WHEN TRUE THEN '' ELSE E'\n' || diag(
           '        have: ' || COALESCE( $1::text, 'NULL' ) ||
        E'\n        want: anything else'
    ) END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."isnt"(IN anyelement, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isnt_empty(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isnt_empty"(text);
CREATE FUNCTION "public"."isnt_empty"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT isnt_empty( $1, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."isnt_empty"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isnt_empty(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isnt_empty"(text, text);
CREATE FUNCTION "public"."isnt_empty"(IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    res  BOOLEAN := FALSE;
    rec  RECORD;
BEGIN
    -- Find extra records.
    FOR rec in EXECUTE _query($1) LOOP
        res := TRUE;
        EXIT;
    END LOOP;

    RETURN ok(res, $2);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."isnt_empty"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isnt_superuser(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isnt_superuser"(name);
CREATE FUNCTION "public"."isnt_superuser"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT isnt_superuser( $1, 'User ' || quote_ident($1) || ' should not be a super user' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."isnt_superuser"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.isnt_superuser(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."isnt_superuser"(name, text);
CREATE FUNCTION "public"."isnt_superuser"(IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    is_super boolean := _is_super($1);
BEGIN
    IF is_super IS NULL THEN
        RETURN fail( $2 ) || E'\n' || diag( '    User ' || quote_ident($1) || ' does not exist') ;
    END IF;
    RETURN ok( NOT is_super, $2 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."isnt_superuser"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.language_is_trusted(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."language_is_trusted"(name);
CREATE FUNCTION "public"."language_is_trusted"(IN name) RETURNS "text" 
	AS $BODY$
    SELECT language_is_trusted($1, 'Procedural language ' || quote_ident($1) || ' should be trusted' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."language_is_trusted"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.language_is_trusted(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."language_is_trusted"(name, text);
CREATE FUNCTION "public"."language_is_trusted"(IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    is_trusted boolean := _is_trusted($1);
BEGIN
    IF is_trusted IS NULL THEN
        RETURN fail( $2 ) || E'\n' || diag( '    Procedural language ' || quote_ident($1) || ' does not exist') ;
    END IF;
    RETURN ok( is_trusted, $2 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."language_is_trusted"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.language_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."language_owner_is"(name, name);
CREATE FUNCTION "public"."language_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT language_owner_is(
        $1, $2,
        'Language ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."language_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.language_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."language_owner_is"(name, name, text);
CREATE FUNCTION "public"."language_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_language_owner($1);
BEGIN
    -- Make sure the language exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Language ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."language_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.language_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."language_privs_are"(name, name, _name);
CREATE FUNCTION "public"."language_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT language_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on language ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."language_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.language_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."language_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."language_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_lang_privs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'undefined_language' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Language ' || quote_ident($1) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."language_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.languages_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."languages_are"(_name);
CREATE FUNCTION "public"."languages_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT languages_are( $1, 'There should be the correct procedural languages' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."languages_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.languages_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."languages_are"(_name, text);
CREATE FUNCTION "public"."languages_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'languages',
        ARRAY(
            SELECT lanname
              FROM pg_catalog.pg_language
             WHERE lanispl
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT lanname
              FROM pg_catalog.pg_language
             WHERE lanispl
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."languages_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.lives_ok(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lives_ok"(text);
CREATE FUNCTION "public"."lives_ok"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT lives_ok( $1, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lives_ok"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.lives_ok(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."lives_ok"(text, text);
CREATE FUNCTION "public"."lives_ok"(IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    code  TEXT := _query($1);
    descr ALIAS FOR $2;
BEGIN
    EXECUTE code;
    RETURN ok( TRUE, descr );
EXCEPTION WHEN OTHERS THEN
    -- There should have been no exception.
    RETURN ok( FALSE, descr ) || E'\n' || diag(
           '        died: ' || SQLSTATE || ': ' || SQLERRM
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."lives_ok"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.matches(anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."matches"(anyelement, text);
CREATE FUNCTION "public"."matches"(IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _alike( $1 ~ $2, $1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."matches"(IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.matches(anyelement, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."matches"(anyelement, text, text);
CREATE FUNCTION "public"."matches"(IN anyelement, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _alike( $1 ~ $2, $1, $2, $3 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."matches"(IN anyelement, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.new_session_id()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."new_session_id"();
CREATE FUNCTION "public"."new_session_id"() RETURNS "text" 
	AS $BODY$
	declare
		sessionid		text;
		holder			text;
	begin
		loop
			select md5(random()::text) into sessionid;
			select sess_id into holder from web.session
				where sess_id = sessionid;
			if found then
				continue;
			else
				return sessionid;
			end if;
		end loop;
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."new_session_id"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.no_plan()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."no_plan"();
CREATE FUNCTION "public"."no_plan"() RETURNS SETOF "bool" 
	AS $BODY$
BEGIN
    PERFORM plan(0);
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."no_plan"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.num_failed()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."num_failed"();
CREATE FUNCTION "public"."num_failed"() RETURNS "int4" 
	AS $BODY$
DECLARE
    ret integer;
BEGIN
    EXECUTE 'SELECT COUNT(*)::INTEGER FROM __tresults__ WHERE ok = FALSE' INTO ret;
    RETURN ret;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."num_failed"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ok(bool)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ok"(bool);
CREATE FUNCTION "public"."ok"(IN bool) RETURNS "text" 
	AS $BODY$
    SELECT ok( $1, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."ok"(IN bool) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.ok(bool, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."ok"(bool, text);
CREATE FUNCTION "public"."ok"(IN bool, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
   aok      ALIAS FOR $1;
   descr    text := $2;
   test_num INTEGER;
   todo_why TEXT;
   ok       BOOL;
BEGIN
   todo_why := _todo();
   ok       := CASE
       WHEN aok = TRUE THEN aok
       WHEN todo_why IS NULL THEN COALESCE(aok, false)
       ELSE TRUE
    END;
    IF _get('plan') IS NULL THEN
        RAISE EXCEPTION 'You tried to run a test without a plan! Gotta have a plan';
    END IF;

    test_num := add_result(
        ok,
        COALESCE(aok, false),
        descr,
        CASE WHEN todo_why IS NULL THEN '' ELSE 'todo' END,
        COALESCE(todo_why, '')
    );

    RETURN (CASE aok WHEN TRUE THEN '' ELSE 'not ' END)
           || 'ok ' || _set( 'curr_test', test_num )
           || CASE descr WHEN '' THEN '' ELSE COALESCE( ' - ' || substr(diag( descr ), 3), '' ) END
           || COALESCE( ' ' || diag( 'TODO ' || todo_why ), '')
           || CASE aok WHEN TRUE THEN '' ELSE E'\n' ||
                diag('Failed ' ||
                CASE WHEN todo_why IS NULL THEN '' ELSE '(TODO) ' END ||
                'test ' || test_num ||
                CASE descr WHEN '' THEN '' ELSE COALESCE(': "' || descr || '"', '') END ) ||
                CASE WHEN aok IS NULL THEN E'\n' || diag('    (test result was NULL)') ELSE '' END
           END;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."ok"(IN bool, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.opclass_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."opclass_owner_is"(name, name);
CREATE FUNCTION "public"."opclass_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT opclass_owner_is(
        $1, $2,
        'Operator class ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."opclass_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.opclass_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."opclass_owner_is"(name, name, name);
CREATE FUNCTION "public"."opclass_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT opclass_owner_is(
        $1, $2, $3,
        'Operator class ' || quote_ident($1) || '.' || quote_ident($2) ||
        ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."opclass_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.opclass_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."opclass_owner_is"(name, name, text);
CREATE FUNCTION "public"."opclass_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_opclass_owner($1);
BEGIN
    -- Make sure the opclass exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Operator class ' || quote_ident($1) || ' not found'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."opclass_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.opclass_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."opclass_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."opclass_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_opclass_owner($1, $2);
BEGIN
    -- Make sure the opclass exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Operator class ' || quote_ident($1) || '.' || quote_ident($2)
            || ' not found'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."opclass_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.opclasses_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."opclasses_are"(_name);
CREATE FUNCTION "public"."opclasses_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT opclasses_are( $1, 'Search path ' || pg_catalog.current_setting('search_path') || ' should have the correct operator classes' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."opclasses_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.opclasses_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."opclasses_are"(name, _name);
CREATE FUNCTION "public"."opclasses_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT opclasses_are( $1, $2, 'Schema ' || quote_ident($1) || ' should have the correct operator classes' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."opclasses_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.opclasses_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."opclasses_are"(_name, text);
CREATE FUNCTION "public"."opclasses_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'operator classes',
        ARRAY(
            SELECT oc.opcname
              FROM pg_catalog.pg_opclass oc
              JOIN pg_catalog.pg_namespace n ON oc.opcnamespace = n.oid
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND pg_catalog.pg_opclass_is_visible(oc.oid)
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
               FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT oc.opcname
              FROM pg_catalog.pg_opclass oc
              JOIN pg_catalog.pg_namespace n ON oc.opcnamespace = n.oid
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND pg_catalog.pg_opclass_is_visible(oc.oid)
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."opclasses_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.opclasses_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."opclasses_are"(name, _name, text);
CREATE FUNCTION "public"."opclasses_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'operator classes',
        ARRAY(
            SELECT oc.opcname
              FROM pg_catalog.pg_opclass oc
              JOIN pg_catalog.pg_namespace n ON oc.opcnamespace = n.oid
             WHERE n.nspname  = $1
            EXCEPT
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
        ),
        ARRAY(
            SELECT $2[i]
               FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT oc.opcname
              FROM pg_catalog.pg_opclass oc
              JOIN pg_catalog.pg_namespace n ON oc.opcnamespace = n.oid
             WHERE n.nspname  = $1
        ),
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."opclasses_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.operators_are(_text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."operators_are"(_text);
CREATE FUNCTION "public"."operators_are"(IN _text) RETURNS "text" 
	AS $BODY$
    SELECT operators_are($1, 'There should be the correct operators')
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."operators_are"(IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.operators_are(name, _text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."operators_are"(name, _text);
CREATE FUNCTION "public"."operators_are"(IN name, IN _text) RETURNS "text" 
	AS $BODY$
    SELECT operators_are($1, $2, 'Schema ' || quote_ident($1) || ' should have the correct operators' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."operators_are"(IN name, IN _text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.operators_are(_text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."operators_are"(_text, text);
CREATE FUNCTION "public"."operators_are"(IN _text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _areni(
        'operators',
        ARRAY(
            SELECT display_oper(o.oprname, o.oid) || ' RETURNS ' || o.oprresult::regtype
              FROM pg_catalog.pg_operator o
              JOIN pg_catalog.pg_namespace n ON o.oprnamespace = n.oid
             WHERE pg_catalog.pg_operator_is_visible(o.oid)
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT display_oper(o.oprname, o.oid) || ' RETURNS ' || o.oprresult::regtype
              FROM pg_catalog.pg_operator o
              JOIN pg_catalog.pg_namespace n ON o.oprnamespace = n.oid
             WHERE pg_catalog.pg_operator_is_visible(o.oid)
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."operators_are"(IN _text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.operators_are(name, _text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."operators_are"(name, _text, text);
CREATE FUNCTION "public"."operators_are"(IN name, IN _text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _areni(
        'operators',
        ARRAY(
            SELECT display_oper(o.oprname, o.oid) || ' RETURNS ' || o.oprresult::regtype
              FROM pg_catalog.pg_operator o
              JOIN pg_catalog.pg_namespace n ON o.oprnamespace = n.oid
             WHERE n.nspname = $1
            EXCEPT
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
        ),
        ARRAY(
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT display_oper(o.oprname, o.oid) || ' RETURNS ' || o.oprresult::regtype
              FROM pg_catalog.pg_operator o
              JOIN pg_catalog.pg_namespace n ON o.oprnamespace = n.oid
             WHERE n.nspname = $1
        ),
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."operators_are"(IN name, IN _text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.os_name()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."os_name"();
CREATE FUNCTION "public"."os_name"() RETURNS "text" 
	AS $BODY$SELECT 'darwin'::text;$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."os_name"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.osmosisupdate()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."osmosisupdate"();
CREATE FUNCTION "public"."osmosisupdate"() RETURNS "void" 
	AS $BODY$
DECLARE
BEGIN
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."osmosisupdate"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pass()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pass"();
CREATE FUNCTION "public"."pass"() RETURNS "text" 
	AS $BODY$
    SELECT ok( TRUE, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pass"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pass(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pass"(text);
CREATE FUNCTION "public"."pass"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( TRUE, $1 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pass"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.performs_ok(text, numeric)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."performs_ok"(text, numeric);
CREATE FUNCTION "public"."performs_ok"(IN text, IN numeric) RETURNS "text" 
	AS $BODY$
    SELECT performs_ok(
        $1, $2, 'Should run in less than ' || $2 || ' ms'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."performs_ok"(IN text, IN numeric) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.performs_ok(text, numeric, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."performs_ok"(text, numeric, text);
CREATE FUNCTION "public"."performs_ok"(IN text, IN numeric, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    query     TEXT := _query($1);
    max_time  ALIAS FOR $2;
    descr     ALIAS FOR $3;
    starts_at TEXT;
    act_time  NUMERIC;
BEGIN
    starts_at := timeofday();
    EXECUTE query;
    act_time := extract( millisecond from timeofday()::timestamptz - starts_at::timestamptz);
    IF act_time < max_time THEN RETURN ok(TRUE, descr); END IF;
    RETURN ok( FALSE, descr ) || E'\n' || diag(
           '      runtime: ' || act_time || ' ms' ||
        E'\n      exceeds: ' || max_time || ' ms'
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."performs_ok"(IN text, IN numeric, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pg_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pg_version"();
CREATE FUNCTION "public"."pg_version"() RETURNS "text" 
	AS $BODY$SELECT current_setting('server_version')$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."pg_version"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pg_version_num()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pg_version_num"();
CREATE FUNCTION "public"."pg_version_num"() RETURNS "int4" 
	AS $BODY$
    SELECT s.a[1]::int * 10000
           + COALESCE(substring(s.a[2] FROM '[[:digit:]]+')::int, 0) * 100
           + COALESCE(substring(s.a[3] FROM '[[:digit:]]+')::int, 0)
      FROM (
          SELECT string_to_array(current_setting('server_version'), '.') AS a
      ) AS s;
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."pg_version_num"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pgtap_version()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pgtap_version"();
CREATE FUNCTION "public"."pgtap_version"() RETURNS "numeric" 
	AS $BODY$SELECT 0.93;$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	IMMUTABLE;
ALTER FUNCTION "public"."pgtap_version"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.plan(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."plan"(int4);
CREATE FUNCTION "public"."plan"(IN int4) RETURNS "text" 
	AS $BODY$
DECLARE
    rcount INTEGER;
BEGIN
    BEGIN
        EXECUTE '
            CREATE TEMP SEQUENCE __tcache___id_seq;
            CREATE TEMP TABLE __tcache__ (
                id    INTEGER NOT NULL DEFAULT nextval(''__tcache___id_seq''),
                label TEXT    NOT NULL,
                value INTEGER NOT NULL,
                note  TEXT    NOT NULL DEFAULT ''''
            );
            CREATE UNIQUE INDEX __tcache___key ON __tcache__(id);
            GRANT ALL ON TABLE __tcache__ TO PUBLIC;
            GRANT ALL ON TABLE __tcache___id_seq TO PUBLIC;

            CREATE TEMP SEQUENCE __tresults___numb_seq;
            CREATE TEMP TABLE __tresults__ (
                numb   INTEGER NOT NULL DEFAULT nextval(''__tresults___numb_seq''),
                ok     BOOLEAN NOT NULL DEFAULT TRUE,
                aok    BOOLEAN NOT NULL DEFAULT TRUE,
                descr  TEXT    NOT NULL DEFAULT '''',
                type   TEXT    NOT NULL DEFAULT '''',
                reason TEXT    NOT NULL DEFAULT ''''
            );
            CREATE UNIQUE INDEX __tresults___key ON __tresults__(numb);
            GRANT ALL ON TABLE __tresults__ TO PUBLIC;
            GRANT ALL ON TABLE __tresults___numb_seq TO PUBLIC;
        ';

    EXCEPTION WHEN duplicate_table THEN
        -- Raise an exception if there's already a plan.
        EXECUTE 'SELECT TRUE FROM __tcache__ WHERE label = ''plan''';
      GET DIAGNOSTICS rcount = ROW_COUNT;
        IF rcount > 0 THEN
           RAISE EXCEPTION 'You tried to plan twice!';
        END IF;
    END;

    -- Save the plan and return.
    PERFORM _set('plan', $1 );
    RETURN '1..' || $1;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	STRICT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."plan"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.relation_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."relation_owner_is"(name, name);
CREATE FUNCTION "public"."relation_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT relation_owner_is(
        $1, $2,
        'Relation ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."relation_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.relation_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."relation_owner_is"(name, name, name);
CREATE FUNCTION "public"."relation_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT relation_owner_is(
        $1, $2, $3,
        'Relation ' || quote_ident($1) || '.' || quote_ident($2) || ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."relation_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.relation_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."relation_owner_is"(name, name, text);
CREATE FUNCTION "public"."relation_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner($1);
BEGIN
    -- Make sure the relation exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Relation ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."relation_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.relation_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."relation_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."relation_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner($1, $2);
BEGIN
    -- Make sure the relation exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Relation ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."relation_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(refcursor, anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(refcursor, anyarray);
CREATE FUNCTION "public"."results_eq"(IN refcursor, IN anyarray) RETURNS "text" 
	AS $BODY$
    SELECT results_eq( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN refcursor, IN anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(refcursor, refcursor)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(refcursor, refcursor);
CREATE FUNCTION "public"."results_eq"(IN refcursor, IN refcursor) RETURNS "text" 
	AS $BODY$
    SELECT results_eq( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN refcursor, IN refcursor) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(refcursor, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(refcursor, text);
CREATE FUNCTION "public"."results_eq"(IN refcursor, IN text) RETURNS "text" 
	AS $BODY$
    SELECT results_eq( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN refcursor, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(text, anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(text, anyarray);
CREATE FUNCTION "public"."results_eq"(IN text, IN anyarray) RETURNS "text" 
	AS $BODY$
    SELECT results_eq( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN text, IN anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(text, refcursor)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(text, refcursor);
CREATE FUNCTION "public"."results_eq"(IN text, IN refcursor) RETURNS "text" 
	AS $BODY$
    SELECT results_eq( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN text, IN refcursor) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(text, text);
CREATE FUNCTION "public"."results_eq"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT results_eq( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(refcursor, anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(refcursor, anyarray, text);
CREATE FUNCTION "public"."results_eq"(IN refcursor, IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    want REFCURSOR;
    res  TEXT;
BEGIN
    OPEN want FOR SELECT $2[i]
    FROM generate_series(array_lower($2, 1), array_upper($2, 1)) s(i);
    res := results_eq($1, want, $3);
    CLOSE want;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN refcursor, IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(refcursor, refcursor, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(refcursor, refcursor, text);
CREATE FUNCTION "public"."results_eq"(IN refcursor, IN refcursor, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have       ALIAS FOR $1;
    want       ALIAS FOR $2;
    have_rec   RECORD;
    want_rec   RECORD;
    have_found BOOLEAN;
    want_found BOOLEAN;
    rownum     INTEGER := 1;
BEGIN
    FETCH have INTO have_rec;
    have_found := FOUND;
    FETCH want INTO want_rec;
    want_found := FOUND;
    WHILE have_found OR want_found LOOP
        IF have_rec IS DISTINCT FROM want_rec OR have_found <> want_found THEN
            RETURN ok( false, $3 ) || E'\n' || diag(
                '    Results differ beginning at row ' || rownum || E':\n' ||
                '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || E'\n' ||
                '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
            );
        END IF;
        rownum = rownum + 1;
        FETCH have INTO have_rec;
        have_found := FOUND;
        FETCH want INTO want_rec;
        want_found := FOUND;
    END LOOP;

    RETURN ok( true, $3 );
EXCEPTION
    WHEN datatype_mismatch THEN
        RETURN ok( false, $3 ) || E'\n' || diag(
            E'    Number of columns or their types differ between the queries' ||
            CASE WHEN have_rec::TEXT = want_rec::text THEN '' ELSE E':\n' ||
                '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || E'\n' ||
                '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
            END
        );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN refcursor, IN refcursor, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(refcursor, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(refcursor, text, text);
CREATE FUNCTION "public"."results_eq"(IN refcursor, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    want REFCURSOR;
    res  TEXT;
BEGIN
    OPEN want FOR EXECUTE _query($2);
    res := results_eq($1, want, $3);
    CLOSE want;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN refcursor, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(text, anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(text, anyarray, text);
CREATE FUNCTION "public"."results_eq"(IN text, IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have REFCURSOR;
    want REFCURSOR;
    res  TEXT;
BEGIN
    OPEN have FOR EXECUTE _query($1);
    OPEN want FOR SELECT $2[i]
    FROM generate_series(array_lower($2, 1), array_upper($2, 1)) s(i);
    res := results_eq(have, want, $3);
    CLOSE have;
    CLOSE want;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN text, IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(text, refcursor, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(text, refcursor, text);
CREATE FUNCTION "public"."results_eq"(IN text, IN refcursor, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have REFCURSOR;
    res  TEXT;
BEGIN
    OPEN have FOR EXECUTE _query($1);
    res := results_eq(have, $2, $3);
    CLOSE have;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN text, IN refcursor, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_eq(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_eq"(text, text, text);
CREATE FUNCTION "public"."results_eq"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have REFCURSOR;
    want REFCURSOR;
    res  TEXT;
BEGIN
    OPEN have FOR EXECUTE _query($1);
    OPEN want FOR EXECUTE _query($2);
    res := results_eq(have, want, $3);
    CLOSE have;
    CLOSE want;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_eq"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(refcursor, anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(refcursor, anyarray);
CREATE FUNCTION "public"."results_ne"(IN refcursor, IN anyarray) RETURNS "text" 
	AS $BODY$
    SELECT results_ne( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN refcursor, IN anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(refcursor, refcursor)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(refcursor, refcursor);
CREATE FUNCTION "public"."results_ne"(IN refcursor, IN refcursor) RETURNS "text" 
	AS $BODY$
    SELECT results_ne( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN refcursor, IN refcursor) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(refcursor, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(refcursor, text);
CREATE FUNCTION "public"."results_ne"(IN refcursor, IN text) RETURNS "text" 
	AS $BODY$
    SELECT results_ne( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN refcursor, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(text, anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(text, anyarray);
CREATE FUNCTION "public"."results_ne"(IN text, IN anyarray) RETURNS "text" 
	AS $BODY$
    SELECT results_ne( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN text, IN anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(text, refcursor)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(text, refcursor);
CREATE FUNCTION "public"."results_ne"(IN text, IN refcursor) RETURNS "text" 
	AS $BODY$
    SELECT results_ne( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN text, IN refcursor) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(text, text);
CREATE FUNCTION "public"."results_ne"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT results_ne( $1, $2, NULL::text );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(refcursor, anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(refcursor, anyarray, text);
CREATE FUNCTION "public"."results_ne"(IN refcursor, IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    want REFCURSOR;
    res  TEXT;
BEGIN
    OPEN want FOR SELECT $2[i]
    FROM generate_series(array_lower($2, 1), array_upper($2, 1)) s(i);
    res := results_ne($1, want, $3);
    CLOSE want;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN refcursor, IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(refcursor, refcursor, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(refcursor, refcursor, text);
CREATE FUNCTION "public"."results_ne"(IN refcursor, IN refcursor, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have       ALIAS FOR $1;
    want       ALIAS FOR $2;
    have_rec   RECORD;
    want_rec   RECORD;
    have_found BOOLEAN;
    want_found BOOLEAN;
BEGIN
    FETCH have INTO have_rec;
    have_found := FOUND;
    FETCH want INTO want_rec;
    want_found := FOUND;
    WHILE have_found OR want_found LOOP
        IF have_rec IS DISTINCT FROM want_rec OR have_found <> want_found THEN
            RETURN ok( true, $3 );
        ELSE
            FETCH have INTO have_rec;
            have_found := FOUND;
            FETCH want INTO want_rec;
            want_found := FOUND;
        END IF;
    END LOOP;
    RETURN ok( false, $3 );
EXCEPTION
    WHEN datatype_mismatch THEN
        RETURN ok( false, $3 ) || E'\n' || diag(
            E'    Columns differ between queries:\n' ||
            '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || E'\n' ||
            '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
        );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN refcursor, IN refcursor, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(refcursor, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(refcursor, text, text);
CREATE FUNCTION "public"."results_ne"(IN refcursor, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    want REFCURSOR;
    res  TEXT;
BEGIN
    OPEN want FOR EXECUTE _query($2);
    res := results_ne($1, want, $3);
    CLOSE want;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN refcursor, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(text, anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(text, anyarray, text);
CREATE FUNCTION "public"."results_ne"(IN text, IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have REFCURSOR;
    want REFCURSOR;
    res  TEXT;
BEGIN
    OPEN have FOR EXECUTE _query($1);
    OPEN want FOR SELECT $2[i]
    FROM generate_series(array_lower($2, 1), array_upper($2, 1)) s(i);
    res := results_ne(have, want, $3);
    CLOSE have;
    CLOSE want;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN text, IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(text, refcursor, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(text, refcursor, text);
CREATE FUNCTION "public"."results_ne"(IN text, IN refcursor, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have REFCURSOR;
    res  TEXT;
BEGIN
    OPEN have FOR EXECUTE _query($1);
    res := results_ne(have, $2, $3);
    CLOSE have;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN text, IN refcursor, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.results_ne(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."results_ne"(text, text, text);
CREATE FUNCTION "public"."results_ne"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    have REFCURSOR;
    want REFCURSOR;
    res  TEXT;
BEGIN
    OPEN have FOR EXECUTE _query($1);
    OPEN want FOR EXECUTE _query($2);
    res := results_ne(have, want, $3);
    CLOSE have;
    CLOSE want;
    RETURN res;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."results_ne"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.roles_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."roles_are"(_name);
CREATE FUNCTION "public"."roles_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT roles_are( $1, 'There should be the correct roles' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."roles_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.roles_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."roles_are"(_name, text);
CREATE FUNCTION "public"."roles_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'roles',
        ARRAY(
            SELECT rolname
              FROM pg_catalog.pg_roles
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT rolname
              FROM pg_catalog.pg_roles
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."roles_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.row_eq(text, anyelement)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."row_eq"(text, anyelement);
CREATE FUNCTION "public"."row_eq"(IN text, IN anyelement) RETURNS "text" 
	AS $BODY$
    SELECT row_eq($1, $2, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."row_eq"(IN text, IN anyelement) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.row_eq(text, anyelement, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."row_eq"(text, anyelement, text);
CREATE FUNCTION "public"."row_eq"(IN text, IN anyelement, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    rec    RECORD;
BEGIN
    EXECUTE _query($1) INTO rec;
    IF NOT rec IS DISTINCT FROM $2 THEN RETURN ok(true, $3); END IF;
    RETURN ok(false, $3 ) || E'\n' || diag(
           '        have: ' || CASE WHEN rec IS NULL THEN 'NULL' ELSE rec::text END ||
        E'\n        want: ' || CASE WHEN $2  IS NULL THEN 'NULL' ELSE $2::text  END
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."row_eq"(IN text, IN anyelement, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rule_is_instead(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rule_is_instead"(name, name);
CREATE FUNCTION "public"."rule_is_instead"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT rule_is_instead($1, $2, 'Rule ' || quote_ident($2) || ' on relation ' || quote_ident($1) || ' should be an INSTEAD rule' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rule_is_instead"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rule_is_instead(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rule_is_instead"(name, name, name);
CREATE FUNCTION "public"."rule_is_instead"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT rule_is_instead( $1, $2, $3, 'Rule ' || quote_ident($3) || ' on relation ' || quote_ident($1) || '.' || quote_ident($2) || ' should be an INSTEAD rule' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rule_is_instead"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rule_is_instead(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rule_is_instead"(name, name, text);
CREATE FUNCTION "public"."rule_is_instead"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    is_it boolean := _is_instead($1, $2);
BEGIN
    IF is_it IS NOT NULL THEN RETURN ok( is_it, $3 ); END IF;
    RETURN ok( FALSE, $3 ) || E'\n' || diag(
        '    Rule ' || quote_ident($2) || ' does not exist'
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rule_is_instead"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rule_is_instead(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rule_is_instead"(name, name, name, text);
CREATE FUNCTION "public"."rule_is_instead"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    is_it boolean := _is_instead($1, $2, $3);
BEGIN
    IF is_it IS NOT NULL THEN RETURN ok( is_it, $4 ); END IF;
    RETURN ok( FALSE, $4 ) || E'\n' || diag(
        '    Rule ' || quote_ident($3) || ' does not exist'
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rule_is_instead"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rule_is_on(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rule_is_on"(name, name, text);
CREATE FUNCTION "public"."rule_is_on"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT rule_is_on(
        $1, $2, $3,
        'Rule ' || quote_ident($2) || ' should be on '
        || _expand_on(_contract_on($3)::char) || ' to ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rule_is_on"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rule_is_on(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rule_is_on"(name, name, name, text);
CREATE FUNCTION "public"."rule_is_on"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT rule_is_on(
        $1, $2, $3, $4,
        'Rule ' || quote_ident($3) || ' should be on ' || _expand_on(_contract_on($4)::char)
        || ' to ' || quote_ident($1) || '.' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rule_is_on"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rule_is_on(name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rule_is_on"(name, name, text, text);
CREATE FUNCTION "public"."rule_is_on"(IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    want char := _contract_on($3);
    have char := _rule_on($1, $2);
BEGIN
    IF have IS NOT NULL THEN
        RETURN is( _expand_on(have), _expand_on(want), $4 );
    END IF;

    RETURN ok( false, $4 ) || E'\n' || diag(
        '    Rule ' || quote_ident($2) || ' does not exist on '
        || quote_ident($1)
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rule_is_on"(IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rule_is_on(name, name, name, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rule_is_on"(name, name, name, text, text);
CREATE FUNCTION "public"."rule_is_on"(IN name, IN name, IN name, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    want char := _contract_on($4);
    have char := _rule_on($1, $2, $3);
BEGIN
    IF have IS NOT NULL THEN
        RETURN is( _expand_on(have), _expand_on(want), $5 );
    END IF;

    RETURN ok( false, $5 ) || E'\n' || diag(
        '    Rule ' || quote_ident($3) || ' does not exist on '
        || quote_ident($1) || '.' || quote_ident($2)
    );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rule_is_on"(IN name, IN name, IN name, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rules_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rules_are"(name, _name);
CREATE FUNCTION "public"."rules_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT rules_are( $1, $2, 'Relation ' || quote_ident($1) || ' should have the correct rules' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rules_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rules_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rules_are"(name, name, _name);
CREATE FUNCTION "public"."rules_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT rules_are( $1, $2, $3, 'Relation ' || quote_ident($1) || '.' || quote_ident($2) || ' should have the correct rules' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rules_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rules_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rules_are"(name, _name, text);
CREATE FUNCTION "public"."rules_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'rules',
        ARRAY(
            SELECT r.rulename
              FROM pg_catalog.pg_rewrite r
              JOIN pg_catalog.pg_class c     ON c.oid = r.ev_class
              JOIN pg_catalog.pg_namespace n ON c.relnamespace = n.oid
             WHERE c.relname = $1
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND pg_catalog.pg_table_is_visible(c.oid)
            EXCEPT
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
        ),
        ARRAY(
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT r.rulename
              FROM pg_catalog.pg_rewrite r
              JOIN pg_catalog.pg_class c     ON c.oid = r.ev_class
              JOIN pg_catalog.pg_namespace n ON c.relnamespace = n.oid
               AND c.relname = $1
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND pg_catalog.pg_table_is_visible(c.oid)
        ),
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rules_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.rules_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."rules_are"(name, name, _name, text);
CREATE FUNCTION "public"."rules_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'rules',
        ARRAY(
            SELECT r.rulename
              FROM pg_catalog.pg_rewrite r
              JOIN pg_catalog.pg_class c     ON c.oid = r.ev_class
              JOIN pg_catalog.pg_namespace n ON c.relnamespace = n.oid
             WHERE c.relname = $2
               AND n.nspname = $1
            EXCEPT
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
        ),
        ARRAY(
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
            EXCEPT
            SELECT r.rulename
              FROM pg_catalog.pg_rewrite r
              JOIN pg_catalog.pg_class c     ON c.oid = r.ev_class
              JOIN pg_catalog.pg_namespace n ON c.relnamespace = n.oid
             WHERE c.relname = $2
               AND n.nspname = $1
        ),
        $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."rules_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.runtests()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."runtests"();
CREATE FUNCTION "public"."runtests"() RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM runtests( '^test' );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."runtests"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.runtests(name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."runtests"(name);
CREATE FUNCTION "public"."runtests"(IN name) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM runtests( $1, '^test' );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."runtests"(IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.runtests(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."runtests"(text);
CREATE FUNCTION "public"."runtests"(IN text) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM _runner(
        findfuncs( '^startup' ),
        findfuncs( '^shutdown' ),
        findfuncs( '^setup' ),
        findfuncs( '^teardown' ),
        findfuncs( $1 )
    );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."runtests"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.runtests(name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."runtests"(name, text);
CREATE FUNCTION "public"."runtests"(IN name, IN text) RETURNS SETOF "text" 
	AS $BODY$
    SELECT * FROM _runner(
        findfuncs( $1, '^startup' ),
        findfuncs( $1, '^shutdown' ),
        findfuncs( $1, '^setup' ),
        findfuncs( $1, '^teardown' ),
        findfuncs( $1, $2 )
    );
$BODY$
	LANGUAGE sql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."runtests"(IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.schema_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."schema_owner_is"(name, name);
CREATE FUNCTION "public"."schema_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT schema_owner_is(
        $1, $2,
        'Schema ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."schema_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.schema_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."schema_owner_is"(name, name, text);
CREATE FUNCTION "public"."schema_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_schema_owner($1);
BEGIN
    -- Make sure the schema exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Schema ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."schema_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.schema_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."schema_privs_are"(name, name, _name);
CREATE FUNCTION "public"."schema_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT schema_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on schema ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."schema_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.schema_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."schema_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."schema_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_schema_privs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'invalid_schema_name' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Schema ' || quote_ident($1) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."schema_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.schemas_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."schemas_are"(_name);
CREATE FUNCTION "public"."schemas_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT schemas_are( $1, 'There should be the correct schemas' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."schemas_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.schemas_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."schemas_are"(_name, text);
CREATE FUNCTION "public"."schemas_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'schemas',
        ARRAY(
            SELECT nspname
              FROM pg_catalog.pg_namespace
             WHERE nspname NOT LIKE 'pg_%'
               AND nspname <> 'information_schema'
             EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT nspname
              FROM pg_catalog.pg_namespace
             WHERE nspname NOT LIKE 'pg_%'
               AND nspname <> 'information_schema'
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."schemas_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequence_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequence_owner_is"(name, name);
CREATE FUNCTION "public"."sequence_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT sequence_owner_is(
        $1, $2,
        'Sequence ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequence_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequence_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequence_owner_is"(name, name, name);
CREATE FUNCTION "public"."sequence_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT sequence_owner_is(
        $1, $2, $3,
        'Sequence ' || quote_ident($1) || '.' || quote_ident($2) || ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequence_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequence_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequence_owner_is"(name, name, text);
CREATE FUNCTION "public"."sequence_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('S'::char, $1);
BEGIN
    -- Make sure the sequence exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Sequence ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequence_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequence_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequence_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."sequence_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('S'::char, $1, $2);
BEGIN
    -- Make sure the sequence exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Sequence ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequence_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequence_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequence_privs_are"(name, name, _name);
CREATE FUNCTION "public"."sequence_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT sequence_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on sequence ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequence_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequence_privs_are(name, name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequence_privs_are"(name, name, name, _name);
CREATE FUNCTION "public"."sequence_privs_are"(IN name, IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT sequence_privs_are(
        $1, $2, $3, $4,
        'Role ' || quote_ident($3) || ' should be granted '
            || CASE WHEN $4[1] IS NULL THEN 'no privileges' ELSE array_to_string($4, ', ') END
            || ' on sequence '|| quote_ident($1) || '.' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequence_privs_are"(IN name, IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequence_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequence_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."sequence_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_sequence_privs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'undefined_table' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Sequence ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequence_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequence_privs_are(name, name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequence_privs_are"(name, name, name, _name, text);
CREATE FUNCTION "public"."sequence_privs_are"(IN name, IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_sequence_privs( $3, quote_ident($1) || '.' || quote_ident($2) );
BEGIN
    IF grants[1] = 'undefined_table' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Sequence ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Role ' || quote_ident($3) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $4, $5);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequence_privs_are"(IN name, IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequences_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequences_are"(_name);
CREATE FUNCTION "public"."sequences_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'sequences', _extras('S', $1), _missing('S', $1),
        'Search path ' || pg_catalog.current_setting('search_path') || ' should have the correct sequences'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequences_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequences_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequences_are"(name, _name);
CREATE FUNCTION "public"."sequences_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'sequences', _extras('S', $1, $2), _missing('S', $1, $2),
        'Schema ' || quote_ident($1) || ' should have the correct sequences'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequences_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequences_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequences_are"(_name, text);
CREATE FUNCTION "public"."sequences_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are( 'sequences', _extras('S', $1), _missing('S', $1), $2);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequences_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.sequences_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."sequences_are"(name, _name, text);
CREATE FUNCTION "public"."sequences_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are( 'sequences', _extras('S', $1, $2), _missing('S', $1, $2), $3);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."sequences_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.server_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."server_privs_are"(name, name, _name);
CREATE FUNCTION "public"."server_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT server_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on server ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."server_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.server_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."server_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."server_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_server_privs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'undefined_server' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Server ' || quote_ident($1) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."server_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_eq(text, anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_eq"(text, anyarray);
CREATE FUNCTION "public"."set_eq"(IN text, IN anyarray) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, NULL::text, '' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_eq"(IN text, IN anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_eq(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_eq"(text, text);
CREATE FUNCTION "public"."set_eq"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, NULL::text, '' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_eq"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_eq(text, anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_eq"(text, anyarray, text);
CREATE FUNCTION "public"."set_eq"(IN text, IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, $3, '' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_eq"(IN text, IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_eq(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_eq"(text, text, text);
CREATE FUNCTION "public"."set_eq"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, $3, '' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_eq"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_has(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_has"(text, text);
CREATE FUNCTION "public"."set_has"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, NULL::TEXT, 'EXCEPT', 'Missing' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_has"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_has(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_has"(text, text, text);
CREATE FUNCTION "public"."set_has"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, $3, 'EXCEPT', 'Missing' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_has"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_hasnt(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_hasnt"(text, text);
CREATE FUNCTION "public"."set_hasnt"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, NULL::TEXT, 'INTERSECT', 'Extra' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_hasnt"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_hasnt(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_hasnt"(text, text, text);
CREATE FUNCTION "public"."set_hasnt"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relcomp( $1, $2, $3, 'INTERSECT', 'Extra' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_hasnt"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_ne(text, anyarray)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_ne"(text, anyarray);
CREATE FUNCTION "public"."set_ne"(IN text, IN anyarray) RETURNS "text" 
	AS $BODY$
    SELECT _relne( $1, $2, NULL::text, '' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_ne"(IN text, IN anyarray) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_ne(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_ne"(text, text);
CREATE FUNCTION "public"."set_ne"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relne( $1, $2, NULL::text, '' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_ne"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_ne(text, anyarray, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_ne"(text, anyarray, text);
CREATE FUNCTION "public"."set_ne"(IN text, IN anyarray, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relne( $1, $2, $3, '' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_ne"(IN text, IN anyarray, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.set_ne(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."set_ne"(text, text, text);
CREATE FUNCTION "public"."set_ne"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _relne( $1, $2, $3, '' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."set_ne"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.setup_10_web()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."setup_10_web"();
CREATE FUNCTION "public"."setup_10_web"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		perform web.clear_sessions();
	exception
		when invalid_schema_name then
			return;
		when undefined_function then 
			return;
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."setup_10_web"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.skip(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."skip"(int4);
CREATE FUNCTION "public"."skip"(IN int4) RETURNS "text" 
	AS $BODY$SELECT skip(NULL, $1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."skip"(IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.skip(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."skip"(text);
CREATE FUNCTION "public"."skip"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT ok( TRUE, 'SKIP: ' || $1 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."skip"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.skip(int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."skip"(int4, text);
CREATE FUNCTION "public"."skip"(IN int4, IN text) RETURNS "text" 
	AS $BODY$SELECT skip($2, $1)$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."skip"(IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.skip(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."skip"(text, int4);
CREATE FUNCTION "public"."skip"(IN why text, IN how_many int4) RETURNS "text" 
	AS $BODY$
DECLARE
    output TEXT[];
BEGIN
    output := '{}';
    FOR i IN 1..how_many LOOP
        output = array_append(output, ok( TRUE, 'SKIP: ' || COALESCE( why, '') ) );
    END LOOP;
    RETURN array_to_string(output, E'\n');
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."skip"(IN why text, IN how_many int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.table_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."table_owner_is"(name, name);
CREATE FUNCTION "public"."table_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT table_owner_is(
        $1, $2,
        'Table ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."table_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.table_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."table_owner_is"(name, name, name);
CREATE FUNCTION "public"."table_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT table_owner_is(
        $1, $2, $3,
        'Table ' || quote_ident($1) || '.' || quote_ident($2) || ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."table_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.table_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."table_owner_is"(name, name, text);
CREATE FUNCTION "public"."table_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('r'::char, $1);
BEGIN
    -- Make sure the table exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Table ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."table_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.table_owner_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."table_owner_is"(name, name, name, text);
CREATE FUNCTION "public"."table_owner_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_rel_owner('r'::char, $1, $2);
BEGIN
    -- Make sure the table exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            E'    Table ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."table_owner_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.table_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."table_privs_are"(name, name, _name);
CREATE FUNCTION "public"."table_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT table_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on table ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."table_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.table_privs_are(name, name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."table_privs_are"(name, name, name, _name);
CREATE FUNCTION "public"."table_privs_are"(IN name, IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT table_privs_are(
        $1, $2, $3, $4,
        'Role ' || quote_ident($3) || ' should be granted '
            || CASE WHEN $4[1] IS NULL THEN 'no privileges' ELSE array_to_string($4, ', ') END
            || ' on table ' || quote_ident($1) || '.' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."table_privs_are"(IN name, IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.table_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."table_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."table_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_table_privs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'undefined_table' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Table ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."table_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.table_privs_are(name, name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."table_privs_are"(name, name, name, _name, text);
CREATE FUNCTION "public"."table_privs_are"(IN name, IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_table_privs( $3, quote_ident($1) || '.' || quote_ident($2) );
BEGIN
    IF grants[1] = 'undefined_table' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Table ' || quote_ident($1) || '.' || quote_ident($2) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $5) || E'\n' || diag(
            '    Role ' || quote_ident($3) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $4, $5);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."table_privs_are"(IN name, IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tables_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tables_are"(_name);
CREATE FUNCTION "public"."tables_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'tables', _extras('r', $1), _missing('r', $1),
        'Search path ' || pg_catalog.current_setting('search_path') || ' should have the correct tables'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tables_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tables_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tables_are"(name, _name);
CREATE FUNCTION "public"."tables_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'tables', _extras('r', $1, $2), _missing('r', $1, $2),
        'Schema ' || quote_ident($1) || ' should have the correct tables'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tables_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tables_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tables_are"(_name, text);
CREATE FUNCTION "public"."tables_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are( 'tables', _extras('r', $1), _missing('r', $1), $2);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tables_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tables_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tables_are"(name, _name, text);
CREATE FUNCTION "public"."tables_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are( 'tables', _extras('r', $1, $2), _missing('r', $1, $2), $3);
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tables_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tablespace_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tablespace_owner_is"(name, name);
CREATE FUNCTION "public"."tablespace_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT tablespace_owner_is(
        $1, $2,
        'Tablespace ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tablespace_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tablespace_owner_is(name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tablespace_owner_is"(name, name, text);
CREATE FUNCTION "public"."tablespace_owner_is"(IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    owner NAME := _get_tablespace_owner($1);
BEGIN
    -- Make sure the tablespace exists.
    IF owner IS NULL THEN
        RETURN ok(FALSE, $3) || E'\n' || diag(
            E'    Tablespace ' || quote_ident($1) || ' does not exist'
        );
    END IF;

    RETURN is(owner, $2, $3);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tablespace_owner_is"(IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tablespace_privs_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tablespace_privs_are"(name, name, _name);
CREATE FUNCTION "public"."tablespace_privs_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT tablespace_privs_are(
        $1, $2, $3,
        'Role ' || quote_ident($2) || ' should be granted '
            || CASE WHEN $3[1] IS NULL THEN 'no privileges' ELSE array_to_string($3, ', ') END
            || ' on tablespace ' || quote_ident($1)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tablespace_privs_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tablespace_privs_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tablespace_privs_are"(name, name, _name, text);
CREATE FUNCTION "public"."tablespace_privs_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    grants TEXT[] := _get_tablespaceprivs( $2, quote_ident($1) );
BEGIN
    IF grants[1] = 'undefined_tablespace' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Tablespace ' || quote_ident($1) || ' does not exist'
        );
    ELSIF grants[1] = 'undefined_role' THEN
        RETURN ok(FALSE, $4) || E'\n' || diag(
            '    Role ' || quote_ident($2) || ' does not exist'
        );
    END IF;
    RETURN _assets_are('privileges', grants, $3, $4);
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tablespace_privs_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tablespaces_are(_name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tablespaces_are"(_name);
CREATE FUNCTION "public"."tablespaces_are"(IN _name) RETURNS "text" 
	AS $BODY$
    SELECT tablespaces_are( $1, 'There should be the correct tablespaces' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tablespaces_are"(IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.tablespaces_are(_name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."tablespaces_are"(_name, text);
CREATE FUNCTION "public"."tablespaces_are"(IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'tablespaces',
        ARRAY(
            SELECT spcname
              FROM pg_catalog.pg_tablespace
            EXCEPT
            SELECT $1[i]
              FROM generate_series(1, array_upper($1, 1)) s(i)
        ),
        ARRAY(
            SELECT $1[i]
               FROM generate_series(1, array_upper($1, 1)) s(i)
            EXCEPT
            SELECT spcname
              FROM pg_catalog.pg_tablespace
        ),
        $2
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."tablespaces_are"(IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_allids_is_removed()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_allids_is_removed"();
CREATE FUNCTION "public"."test_web_function_allids_is_removed"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		return next hasnt_function('web', 'all_session_ids', 'All ids is removed for security reasons.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_allids_is_removed"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_clearsessions_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_clearsessions_exists"();
CREATE FUNCTION "public"."test_web_function_clearsessions_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_function('web', 'clear_sessions', 'Needs a clear function.');
		return next is_definer('web', 'clear_sessions', 'Clear sessions should have definer security.');
		return next function_returns('web', 'clear_sessions', 'void', 'Clear sessions data should not return anything.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_clearsessions_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_clearsessions_removes_data()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_clearsessions_removes_data"();
CREATE FUNCTION "public"."test_web_function_clearsessions_removes_data"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		perform create_test_session();
		perform create_test_session();
		perform web.clear_sessions();
		return next is_empty(
			$$select * from web.session$$,
			'Clear sessions should remove all sessions.');
	end;  
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_clearsessions_removes_data"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_countsessions_counts_nulls()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_countsessions_counts_nulls"();
CREATE FUNCTION "public"."test_web_function_countsessions_counts_nulls"() RETURNS SETOF "text" 
	AS $BODY$
	declare 
		sessionid			text;
		sessiondata			text:=md5(random()::text);
	begin
		select into sessionid create_test_session
			from create_test_session();
		perform web.set_session_data(sessionid, sessiondata, null);
		perform create_test_session();
		perform create_test_session();
		perform create_test_session();
		return next results_eq(
			'select web.count_sessions()',
			'values (4)',
			'Count should include expire set to null.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_countsessions_counts_nulls"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_countsessions_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_countsessions_exists"();
CREATE FUNCTION "public"."test_web_function_countsessions_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_function('web', 'count_sessions', 'Needs a count for the length function.'); 
		return next is_definer('web', 'count_sessions', 'Count sessions should have definer security.');
		return next function_returns('web', 'count_sessions', 'integer', 'Should return the number of active sessions.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_countsessions_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_countsessions_ignores_expired()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_countsessions_ignores_expired"();
CREATE FUNCTION "public"."test_web_function_countsessions_ignores_expired"() RETURNS SETOF "text" 
	AS $BODY$
	declare 
		sessionid			text;
		sessiondata			text:=md5(random()::text);
	begin
		select into sessionid create_test_session
			from create_test_session();
		perform web.set_session_data(sessionid, sessiondata, now() - interval '1 day');
		perform create_test_session();
		perform create_test_session();
		perform create_test_session();
		return next results_eq(
			'select web.count_sessions()',
			'values (3)',
			'Count should ignore expired sessions.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_countsessions_ignores_expired"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_countsessions_returns_count()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_countsessions_returns_count"();
CREATE FUNCTION "public"."test_web_function_countsessions_returns_count"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		perform create_test_session();
		perform create_test_session();
		perform create_test_session();
		perform create_test_session();
		return next results_eq(
			'select web.count_sessions()',
			'values (4)',
			'Count should return the number of sessions open.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_countsessions_returns_count"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_deleteexpired_after_insert()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_deleteexpired_after_insert"();
CREATE FUNCTION "public"."test_web_function_deleteexpired_after_insert"() RETURNS SETOF "text" 
	AS $BODY$
	declare
		sessionid		text;
		sessiondata		text;
	begin
		select into sessionid new_session_id();
		select md5(random()::text) into sessiondata;
		perform web.set_session_data(sessionid, sessiondata, now() - interval '1 day');
		return next is_empty(
			$$select * from web.session 
				where sess_id = '$$ || sessionid || $$'$$,
				'Expired sessions should be deleted after insert.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_deleteexpired_after_insert"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_deleteexpired_after_update()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_deleteexpired_after_update"();
CREATE FUNCTION "public"."test_web_function_deleteexpired_after_update"() RETURNS SETOF "text" 
	AS $BODY$
	declare 
		sessionid			text;
		sessiondata			text:=md5(random()::text);
	begin
		select into sessionid create_test_session
			from create_test_session();
		perform web.set_session_data(sessionid, sessiondata, now() - interval '1 day');
		return next is_empty(
			$$select * from web.session 
				where sess_id = '$$ || sessionid || $$'$$,
				'Expired sessions should be deleted after update.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_deleteexpired_after_update"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_deleteexpired_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_deleteexpired_exists"();
CREATE FUNCTION "public"."test_web_function_deleteexpired_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_function('web', 'remove_expired', 'Needs a function to delete expired records.');
		return next is_definer('web', 'remove_expired', 'Delete expired should have definer security.');
		return next function_returns('web', 'remove_expired', 'trigger', 'Delete expired data should return a trigger.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_deleteexpired_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_destroysession_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_destroysession_exists"();
CREATE FUNCTION "public"."test_web_function_destroysession_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_function('web', 'destroy_session', array['text'], 'Needs to have a destroy function.');
		return next is_definer('web', 'destroy_session', array['text'], 'Session destroy should have definer security.');
		return next function_returns('web', 'destroy_session', array['text'], 'void', 'Session destroy should not return anything.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_destroysession_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_destroysession_removes_data()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_destroysession_removes_data"();
CREATE FUNCTION "public"."test_web_function_destroysession_removes_data"() RETURNS SETOF "text" 
	AS $BODY$
	declare 
		sessionid			text;
	begin
		select into sessionid create_test_session from create_test_session();
		perform web.destroy_session(sessionid);
		return next is_empty(
			$$select web.get_session_data('$$ || sessionid || $$')$$,
			'Session destroy should delete the session');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_destroysession_removes_data"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_getsessiondata_data()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_getsessiondata_data"();
CREATE FUNCTION "public"."test_web_function_getsessiondata_data"() RETURNS SETOF "text" 
	AS $BODY$
	declare 
		sessionid			text;
		sessiondata			text:=md5(random()::text);
	begin
		select into sessionid create_test_session from create_test_session();
		perform web.set_session_data(sessionid, sessiondata, null);
		return next results_eq(
			$$select web.get_session_data('$$ || sessionid || $$')$$,
			$$values ('$$ || sessiondata || $$')$$,
			'Get session data should retrieve the data from the session.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_getsessiondata_data"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_getsessiondata_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_getsessiondata_exists"();
CREATE FUNCTION "public"."test_web_function_getsessiondata_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_function('web', 'get_session_data', array['text'], 'Needs a get_session_data function.');
		return next is_definer('web', 'get_session_data', array['text'], 'Get session data should have definer security.');
		return next function_returns('web', 'get_session_data', array['text'], 'setof text', 'Get session data should not return anything.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_getsessiondata_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_getsessiondata_ignores_expired()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_getsessiondata_ignores_expired"();
CREATE FUNCTION "public"."test_web_function_getsessiondata_ignores_expired"() RETURNS SETOF "text" 
	AS $BODY$
	declare 
		sessionid			text;
		sessiondata			text:=md5(random()::text);
	begin
		select into sessionid create_test_session
			from create_test_session();
		perform web.set_session_data(sessionid, sessiondata, now() - interval '1 day');
		return next is_empty(
			$$select web.get_session_data('$$ || sessionid || $$')$$,
			'Get session data ignores expired sessions.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_getsessiondata_ignores_expired"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_setsessiondata_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_setsessiondata_exists"();
CREATE FUNCTION "public"."test_web_function_setsessiondata_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_function('web', 'set_session_data', array['text', 'text', 'timestamp with time zone'], 'Needs a set session data function.');
		return next is_definer('web', 'set_session_data', array['text', 'text', 'timestamp with time zone'], 'Set session data should have definer security.');
		return next function_returns('web', 'set_session_data', array['text', 'text', 'timestamp with time zone'], 'void', 'Set session data should not return anything.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_setsessiondata_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_setsessiondata_save_data()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_setsessiondata_save_data"();
CREATE FUNCTION "public"."test_web_function_setsessiondata_save_data"() RETURNS SETOF "text" 
	AS $BODY$
	declare
		sessionid		text;
		sessiondata		text;
	begin
		select into sessionid new_session_id();
		select md5(random()::text) into sessiondata;
		perform web.set_session_data(sessionid, sessiondata, null);
		return next results_eq(
			$$select web.get_session_data('$$ || sessionid || $$')$$,
			$$values ('$$ || sessiondata || $$')$$,
			'The set_session_data should create a new session.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_setsessiondata_save_data"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_function_setsessiondata_update_data()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_function_setsessiondata_update_data"();
CREATE FUNCTION "public"."test_web_function_setsessiondata_update_data"() RETURNS SETOF "text" 
	AS $BODY$
	declare
		sessionid			text;
	begin
		select create_test_session into sessionid from create_test_session();
		perform web.set_session_data(sessionid, 'new-data', now() + interval '1 day');
		return next results_eq(
			$$select web.get_session_data('$$ || sessionid || $$')$$,
			$$values ('new-data')$$,
			'The set_session_data should update a session.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_function_setsessiondata_update_data"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_schema()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_schema"();
CREATE FUNCTION "public"."test_web_schema"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		return next has_schema('web', 'There should be a web sessions schema.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_schema"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_data_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_data_exists"();
CREATE FUNCTION "public"."test_web_session_data_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_column('web', 'session', 'sess_data', 'Needs to store the session data.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_data_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_data_type()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_data_type"();
CREATE FUNCTION "public"."test_web_session_data_type"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next col_type_is('web', 'session', 'sess_data', 'text', 'Session data is text.');
	end; 
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_data_type"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_expiration_default()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_expiration_default"();
CREATE FUNCTION "public"."test_web_session_expiration_default"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		return next col_default_is('web', 'session', 'expiration', $a$(now() + '1 day'::interval)$a$, 'Default expiration is on day.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_expiration_default"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_expiration_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_expiration_exists"();
CREATE FUNCTION "public"."test_web_session_expiration_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_column('web', 'session', 'expiration', 'Needs a time limit on the session.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_expiration_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_expiration_has_index()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_expiration_has_index"();
CREATE FUNCTION "public"."test_web_session_expiration_has_index"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		return next has_index('web', 'session', 'expire_idx', array['expiration'], 'Needs an index for the expiration column.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_expiration_has_index"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_expiration_type()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_expiration_type"();
CREATE FUNCTION "public"."test_web_session_expiration_type"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next col_type_is('web', 'session', 'expiration', 'timestamp with time zone', 'expiration needs to be a timestamp.');
	end; 
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_expiration_type"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_id_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_id_exists"();
CREATE FUNCTION "public"."test_web_session_id_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_column('web', 'session', 'sess_id', 'Needs to have a session id column.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_id_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_id_is_pk()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_id_is_pk"();
CREATE FUNCTION "public"."test_web_session_id_is_pk"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		return next col_is_pk('web', 'session', 'sess_id', 'The session id is the primary key');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_id_is_pk"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_id_type()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_id_type"();
CREATE FUNCTION "public"."test_web_session_id_type"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next col_type_is('web', 'session', 'sess_id', 'text', 'Session id is a string.');
	end; 
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_id_type"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_session_table()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_session_table"();
CREATE FUNCTION "public"."test_web_session_table"() RETURNS SETOF "text" 
	AS $BODY$
	begin
		return next has_table('web', 'session', 'There should be a session table.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_session_table"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_trigger_deleteexpired_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_trigger_deleteexpired_exists"();
CREATE FUNCTION "public"."test_web_trigger_deleteexpired_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next trigger_is(
			'web',
			'session',
			'delete_expired_trig',
			'web',
			'remove_expired',
			'Needs a delete expired trigger.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_trigger_deleteexpired_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.test_web_user_exists()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."test_web_user_exists"();
CREATE FUNCTION "public"."test_web_user_exists"() RETURNS SETOF "text" 
	AS $BODY$
	begin 
		return next has_user('nodepg', 'Needs to have the nodepg user.');
	end;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."test_web_user_exists"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ilike(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ilike"(text, text);
CREATE FUNCTION "public"."throws_ilike"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT throws_ilike($1, $2, 'Should throw exception like ' || quote_literal($2) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ilike"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ilike(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ilike"(text, text, text);
CREATE FUNCTION "public"."throws_ilike"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    EXECUTE _query($1);
    RETURN ok( FALSE, $3 ) || E'\n' || diag( '    no exception thrown' );
EXCEPTION WHEN OTHERS THEN
    return _tlike( SQLERRM ~~* $2, SQLERRM, $2, $3 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ilike"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_imatching(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_imatching"(text, text);
CREATE FUNCTION "public"."throws_imatching"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT throws_imatching($1, $2, 'Should throw exception matching ' || quote_literal($2) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_imatching"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_imatching(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_imatching"(text, text, text);
CREATE FUNCTION "public"."throws_imatching"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    EXECUTE _query($1);
    RETURN ok( FALSE, $3 ) || E'\n' || diag( '    no exception thrown' );
EXCEPTION WHEN OTHERS THEN
    return _tlike( SQLERRM ~* $2, SQLERRM, $2, $3 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_imatching"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_like(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_like"(text, text);
CREATE FUNCTION "public"."throws_like"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT throws_like($1, $2, 'Should throw exception like ' || quote_literal($2) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_like"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_like(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_like"(text, text, text);
CREATE FUNCTION "public"."throws_like"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    EXECUTE _query($1);
    RETURN ok( FALSE, $3 ) || E'\n' || diag( '    no exception thrown' );
EXCEPTION WHEN OTHERS THEN
    return _tlike( SQLERRM ~~ $2, SQLERRM, $2, $3 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_like"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_matching(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_matching"(text, text);
CREATE FUNCTION "public"."throws_matching"(IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT throws_matching($1, $2, 'Should throw exception matching ' || quote_literal($2) );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_matching"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_matching(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_matching"(text, text, text);
CREATE FUNCTION "public"."throws_matching"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    EXECUTE _query($1);
    RETURN ok( FALSE, $3 ) || E'\n' || diag( '    no exception thrown' );
EXCEPTION WHEN OTHERS THEN
    return _tlike( SQLERRM ~ $2, SQLERRM, $2, $3 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_matching"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ok(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ok"(text);
CREATE FUNCTION "public"."throws_ok"(IN text) RETURNS "text" 
	AS $BODY$
    SELECT throws_ok( $1, NULL, NULL, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ok"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ok(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ok"(text, int4);
CREATE FUNCTION "public"."throws_ok"(IN text, IN int4) RETURNS "text" 
	AS $BODY$
    SELECT throws_ok( $1, $2::char(5), NULL, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ok"(IN text, IN int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ok(text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ok"(text, text);
CREATE FUNCTION "public"."throws_ok"(IN text, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF octet_length($2) = 5 THEN
        RETURN throws_ok( $1, $2::char(5), NULL, NULL );
    ELSE
        RETURN throws_ok( $1, NULL, $2, NULL );
    END IF;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ok"(IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ok(text, int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ok"(text, int4, text);
CREATE FUNCTION "public"."throws_ok"(IN text, IN int4, IN text) RETURNS "text" 
	AS $BODY$
    SELECT throws_ok( $1, $2::char(5), $3, NULL );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ok"(IN text, IN int4, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ok(text, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ok"(text, text, text);
CREATE FUNCTION "public"."throws_ok"(IN text, IN text, IN text) RETURNS "text" 
	AS $BODY$
BEGIN
    IF octet_length($2) = 5 THEN
        RETURN throws_ok( $1, $2::char(5), $3, NULL );
    ELSE
        RETURN throws_ok( $1, NULL, $2, $3 );
    END IF;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ok"(IN text, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ok(text, bpchar, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ok"(text, bpchar, text, text);
CREATE FUNCTION "public"."throws_ok"(IN text, IN bpchar, IN text, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    query     TEXT := _query($1);
    errcode   ALIAS FOR $2;
    errmsg    ALIAS FOR $3;
    desctext  ALIAS FOR $4;
    descr     TEXT;
BEGIN
    descr := COALESCE(
          desctext,
          'threw ' || errcode || ': ' || errmsg,
          'threw ' || errcode,
          'threw ' || errmsg,
          'threw an exception'
    );
    EXECUTE query;
    RETURN ok( FALSE, descr ) || E'\n' || diag(
           '      caught: no exception' ||
        E'\n      wanted: ' || COALESCE( errcode, 'an exception' )
    );
EXCEPTION WHEN OTHERS THEN
    IF (errcode IS NULL OR SQLSTATE = errcode)
        AND ( errmsg IS NULL OR SQLERRM = errmsg)
    THEN
        -- The expected errcode and/or message was thrown.
        RETURN ok( TRUE, descr );
    ELSE
        -- This was not the expected errcode or errmsg.
        RETURN ok( FALSE, descr ) || E'\n' || diag(
               '      caught: ' || SQLSTATE || ': ' || SQLERRM ||
            E'\n      wanted: ' || COALESCE( errcode, 'an exception' ) ||
            COALESCE( ': ' || errmsg, '')
        );
    END IF;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ok"(IN text, IN bpchar, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.throws_ok(text, int4, text, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."throws_ok"(text, int4, text, text);
CREATE FUNCTION "public"."throws_ok"(IN text, IN int4, IN text, IN text) RETURNS "text" 
	AS $BODY$
    SELECT throws_ok( $1, $2::char(5), $3, $4 );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."throws_ok"(IN text, IN int4, IN text, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.todo(int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."todo"(int4);
CREATE FUNCTION "public"."todo"(IN how_many int4) RETURNS SETOF "bool" 
	AS $BODY$
BEGIN
    PERFORM _add('todo', COALESCE(how_many, 1), '');
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."todo"(IN how_many int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.todo(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."todo"(text);
CREATE FUNCTION "public"."todo"(IN why text) RETURNS SETOF "bool" 
	AS $BODY$
BEGIN
    PERFORM _add('todo', 1, COALESCE(why, ''));
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."todo"(IN why text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.todo(int4, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."todo"(int4, text);
CREATE FUNCTION "public"."todo"(IN how_many int4, IN why text) RETURNS SETOF "bool" 
	AS $BODY$
BEGIN
    PERFORM _add('todo', COALESCE(how_many, 1), COALESCE(why, ''));
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."todo"(IN how_many int4, IN why text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.todo(text, int4)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."todo"(text, int4);
CREATE FUNCTION "public"."todo"(IN why text, IN how_many int4) RETURNS SETOF "bool" 
	AS $BODY$
BEGIN
    PERFORM _add('todo', COALESCE(how_many, 1), COALESCE(why, ''));
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."todo"(IN why text, IN how_many int4) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.todo_end()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."todo_end"();
CREATE FUNCTION "public"."todo_end"() RETURNS SETOF "bool" 
	AS $BODY$
DECLARE
    id integer;
BEGIN
    id := _get_latest( 'todo', -1 );
    IF id IS NULL THEN
        RAISE EXCEPTION 'todo_end() called without todo_start()';
    END IF;
    EXECUTE 'DELETE FROM __tcache__ WHERE id = ' || id;
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."todo_end"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.todo_start()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."todo_start"();
CREATE FUNCTION "public"."todo_start"() RETURNS SETOF "bool" 
	AS $BODY$
BEGIN
    PERFORM _add('todo', -1, '');
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."todo_start"() OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.todo_start(text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."todo_start"(text);
CREATE FUNCTION "public"."todo_start"(IN text) RETURNS SETOF "bool" 
	AS $BODY$
BEGIN
    PERFORM _add('todo', -1, COALESCE($1, ''));
    RETURN;
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."todo_start"(IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.trigger_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."trigger_is"(name, name, name);
CREATE FUNCTION "public"."trigger_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT trigger_is(
        $1, $2, $3,
        'Trigger ' || quote_ident($2) || ' should call ' || quote_ident($3) || '()'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."trigger_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.trigger_is(name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."trigger_is"(name, name, name, text);
CREATE FUNCTION "public"."trigger_is"(IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    pname text;
BEGIN
    SELECT p.proname
      FROM pg_catalog.pg_trigger t
      JOIN pg_catalog.pg_class ct ON ct.oid = t.tgrelid
      JOIN pg_catalog.pg_proc p   ON p.oid = t.tgfoid
     WHERE ct.relname = $1
       AND t.tgname   = $2
       AND pg_catalog.pg_table_is_visible(ct.oid)
      INTO pname;

    RETURN is( pname, $3::text, $4 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."trigger_is"(IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.trigger_is(name, name, name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."trigger_is"(name, name, name, name, name);
CREATE FUNCTION "public"."trigger_is"(IN name, IN name, IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT trigger_is(
        $1, $2, $3, $4, $5,
        'Trigger ' || quote_ident($3) || ' should call ' || quote_ident($4) || '.' || quote_ident($5) || '()'
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."trigger_is"(IN name, IN name, IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.trigger_is(name, name, name, name, name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."trigger_is"(name, name, name, name, name, text);
CREATE FUNCTION "public"."trigger_is"(IN name, IN name, IN name, IN name, IN name, IN text) RETURNS "text" 
	AS $BODY$
DECLARE
    pname text;
BEGIN
    SELECT quote_ident(ni.nspname) || '.' || quote_ident(p.proname)
      FROM pg_catalog.pg_trigger t
      JOIN pg_catalog.pg_class ct     ON ct.oid = t.tgrelid
      JOIN pg_catalog.pg_namespace nt ON nt.oid = ct.relnamespace
      JOIN pg_catalog.pg_proc p       ON p.oid = t.tgfoid
      JOIN pg_catalog.pg_namespace ni ON ni.oid = p.pronamespace
     WHERE nt.nspname = $1
       AND ct.relname = $2
       AND t.tgname   = $3
      INTO pname;

    RETURN is( pname, quote_ident($4) || '.' || quote_ident($5), $6 );
END;
$BODY$
	LANGUAGE plpgsql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."trigger_is"(IN name, IN name, IN name, IN name, IN name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.triggers_are(name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."triggers_are"(name, _name);
CREATE FUNCTION "public"."triggers_are"(IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT triggers_are( $1, $2, 'Table ' || quote_ident($1) || ' should have the correct triggers' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."triggers_are"(IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.triggers_are(name, name, _name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."triggers_are"(name, name, _name);
CREATE FUNCTION "public"."triggers_are"(IN name, IN name, IN _name) RETURNS "text" 
	AS $BODY$
    SELECT triggers_are( $1, $2, $3, 'Table ' || quote_ident($1) || '.' || quote_ident($2) || ' should have the correct triggers' );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."triggers_are"(IN name, IN name, IN _name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.triggers_are(name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."triggers_are"(name, _name, text);
CREATE FUNCTION "public"."triggers_are"(IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'triggers',
        ARRAY(
            SELECT t.tgname
              FROM pg_catalog.pg_trigger t
              JOIN pg_catalog.pg_class c ON c.oid = t.tgrelid
              JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
             WHERE c.relname = $1
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND NOT t.tgisinternal
            EXCEPT
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
        ),
        ARRAY(
            SELECT $2[i]
              FROM generate_series(1, array_upper($2, 1)) s(i)
            EXCEPT
            SELECT t.tgname
              FROM pg_catalog.pg_trigger t
              JOIN pg_catalog.pg_class c ON c.oid = t.tgrelid
              JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
               AND n.nspname NOT IN ('pg_catalog', 'information_schema')
               AND NOT t.tgisinternal
        ),
        $3
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."triggers_are"(IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.triggers_are(name, name, _name, text)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."triggers_are"(name, name, _name, text);
CREATE FUNCTION "public"."triggers_are"(IN name, IN name, IN _name, IN text) RETURNS "text" 
	AS $BODY$
    SELECT _are(
        'triggers',
        ARRAY(
            SELECT t.tgname
              FROM pg_catalog.pg_trigger t
              JOIN pg_catalog.pg_class c     ON c.oid = t.tgrelid
              JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
             WHERE n.nspname = $1
               AND c.relname = $2
               AND NOT t.tgisinternal
            EXCEPT
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
        ),
        ARRAY(
            SELECT $3[i]
              FROM generate_series(1, array_upper($3, 1)) s(i)
            EXCEPT
            SELECT t.tgname
              FROM pg_catalog.pg_trigger t
              JOIN pg_catalog.pg_class c     ON c.oid = t.tgrelid
              JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
             WHERE n.nspname = $1
               AND c.relname = $2
               AND NOT t.tgisinternal
        ),
        $4
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."triggers_are"(IN name, IN name, IN _name, IN text) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.type_owner_is(name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."type_owner_is"(name, name);
CREATE FUNCTION "public"."type_owner_is"(IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT type_owner_is(
        $1, $2,
        'Type ' || quote_ident($1) || ' should be owned by ' || quote_ident($2)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."type_owner_is"(IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.type_owner_is(name, name, name)
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."type_owner_is"(name, name, name);
CREATE FUNCTION "public"."type_owner_is"(IN name, IN name, IN name) RETURNS "text" 
	AS $BODY$
    SELECT type_owner_is(
        $1, $2, $3,
        'Type ' || quote_ident($1) || '.' || quote_ident($2) || ' should be owned by ' || quote_ident($3)
    );
$BODY$
	LANGUAGE sql
	COST 100
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."type_owner_is"(IN name, IN name, IN name) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pg_stat_statements()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pg_stat_statements"();
CREATE FUNCTION "public"."pg_stat_statements"(OUT userid oid, OUT dbid oid, OUT query text, OUT calls int8, OUT total_time float8, OUT "rows" int8, OUT shared_blks_hit int8, OUT shared_blks_read int8, OUT shared_blks_dirtied int8, OUT shared_blks_written int8, OUT local_blks_hit int8, OUT local_blks_read int8, OUT local_blks_dirtied int8, OUT local_blks_written int8, OUT temp_blks_read int8, OUT temp_blks_written int8, OUT blk_read_time float8, OUT blk_write_time float8) RETURNS SETOF "record" 
	AS '$libdir/pg_stat_statements','pg_stat_statements'
	LANGUAGE c
	COST 1
	ROWS 1000
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pg_stat_statements"(OUT userid oid, OUT dbid oid, OUT query text, OUT calls int8, OUT total_time float8, OUT "rows" int8, OUT shared_blks_hit int8, OUT shared_blks_read int8, OUT shared_blks_dirtied int8, OUT shared_blks_written int8, OUT local_blks_hit int8, OUT local_blks_read int8, OUT local_blks_dirtied int8, OUT local_blks_written int8, OUT temp_blks_read int8, OUT temp_blks_written int8, OUT blk_read_time float8, OUT blk_write_time float8) OWNER TO "s3rccp";

-- ----------------------------
--  Function structure for public.pg_stat_statements_reset()
-- ----------------------------
DROP FUNCTION IF EXISTS "public"."pg_stat_statements_reset"();
CREATE FUNCTION "public"."pg_stat_statements_reset"() RETURNS "void" 
	AS '$libdir/pg_stat_statements','pg_stat_statements_reset'
	LANGUAGE c
	COST 1
	CALLED ON NULL INPUT
	SECURITY INVOKER
	VOLATILE;
ALTER FUNCTION "public"."pg_stat_statements_reset"() OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for spatial_ref_sys
-- ----------------------------
DROP TABLE IF EXISTS "public"."spatial_ref_sys";
CREATE TABLE "public"."spatial_ref_sys" (
	"srid" int4 NOT NULL,
	"auth_name" varchar(256) COLLATE "default",
	"auth_srid" int4,
	"srtext" varchar(2048) COLLATE "default",
	"proj4text" varchar(2048) COLLATE "default"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."spatial_ref_sys" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for actions
-- ----------------------------
DROP TABLE IF EXISTS "public"."actions";
CREATE TABLE "public"."actions" (
	"data_type" char(1) NOT NULL COLLATE "default",
	"action" char(1) NOT NULL COLLATE "default",
	"id" int8 NOT NULL
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."actions" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for planet_osm_line
-- ----------------------------
DROP TABLE IF EXISTS "public"."planet_osm_line";
CREATE TABLE "public"."planet_osm_line" (
	"osm_id" int8,
	"way" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."planet_osm_line" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for planet_osm_polygon
-- ----------------------------
DROP TABLE IF EXISTS "public"."planet_osm_polygon";
CREATE TABLE "public"."planet_osm_polygon" (
	"osm_id" int8,
	"way" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."planet_osm_polygon" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for planet_osm_roads
-- ----------------------------
DROP TABLE IF EXISTS "public"."planet_osm_roads";
CREATE TABLE "public"."planet_osm_roads" (
	"osm_id" int8,
	"way" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."planet_osm_roads" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for relation_members
-- ----------------------------
DROP TABLE IF EXISTS "public"."relation_members";
CREATE TABLE "public"."relation_members" (
	"relation_id" int8 NOT NULL,
	"member_id" int8 NOT NULL,
	"member_type" char(1) NOT NULL COLLATE "default",
	"member_role" text NOT NULL COLLATE "default",
	"sequence_id" int4 NOT NULL
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."relation_members" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for relations
-- ----------------------------
DROP TABLE IF EXISTS "public"."relations";
CREATE TABLE "public"."relations" (
	"id" int8 NOT NULL,
	"version" int4 NOT NULL,
	"user_id" int4 NOT NULL,
	"tstamp" timestamp(6) NOT NULL,
	"changeset_id" int8 NOT NULL,
	"tags" "public"."hstore"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."relations" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for schema_info
-- ----------------------------
DROP TABLE IF EXISTS "public"."schema_info";
CREATE TABLE "public"."schema_info" (
	"version" int4 NOT NULL
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."schema_info" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for way_nodes
-- ----------------------------
DROP TABLE IF EXISTS "public"."way_nodes";
CREATE TABLE "public"."way_nodes" (
	"way_id" int8 NOT NULL,
	"node_id" int8 NOT NULL,
	"sequence_id" int4 NOT NULL
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."way_nodes" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for ways
-- ----------------------------
DROP TABLE IF EXISTS "public"."ways";
CREATE TABLE "public"."ways" (
	"id" int8 NOT NULL,
	"version" int4 NOT NULL,
	"user_id" int4 NOT NULL,
	"tstamp" timestamp(6) NOT NULL,
	"changeset_id" int8 NOT NULL,
	"tags" "public"."hstore",
	"nodes" int8[],
	"bbox" "public"."geometry",
	"linestring" "public"."geometry"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."ways" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for applications
-- ----------------------------
DROP TABLE IF EXISTS "public"."applications";
CREATE TABLE "public"."applications" (
	"id" int4 NOT NULL DEFAULT nextval('app_seq'::regclass),
	"name" text COLLATE "default",
	"description" text COLLATE "default",
	"link" text COLLATE "default",
	"icon_url" text COLLATE "default",
	"logo_url" text COLLATE "default",
	"company" text COLLATE "default",
	"secret" text COLLATE "default",
	"created_at" timestamp(6) NULL,
	"updated_at" timestamp(6) NULL,
	"status" text COLLATE "default",
	"fbappid" text COLLATE "default"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."applications" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for useage
-- ----------------------------
DROP TABLE IF EXISTS "public"."useage";
CREATE TABLE "public"."useage" (
	"user_id" int4 NOT NULL,
	"date" timestamp(6) NOT NULL,
	"location" varchar NOT NULL COLLATE "default",
	"what" varchar NOT NULL COLLATE "default",
	"contents" varchar NOT NULL COLLATE "default"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."useage" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for changesets
-- ----------------------------
DROP TABLE IF EXISTS "public"."changesets";
CREATE TABLE "public"."changesets" (
	"id" int8 NOT NULL,
	"user_id" int4,
	"content" varchar COLLATE "default",
	"status" varchar COLLATE "default",
	"created_at" timestamp(6) NULL,
	"updated_at" timestamp(6) NULL
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."changesets" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS "public"."users";
CREATE TABLE "public"."users" (
	"id" int4 NOT NULL DEFAULT nextval('user_seq'::regclass),
	"name" varchar NOT NULL COLLATE "default",
	"email" varchar COLLATE "default",
	"organization" varchar COLLATE "default",
	"created_at" timestamp(6) NULL,
	"updated_at" timestamp(6) NULL,
	"is_admin" bool,
	"is_banned" bool,
	"gravatar" varchar COLLATE "default",
	"cat_src" varchar COLLATE "default",
	"latitude" float4,
	"longitude" float4,
	"lang" varchar COLLATE "default",
	"region" varchar COLLATE "default",
	"license_accepted" bool
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."users" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for planet_osm_point
-- ----------------------------
DROP TABLE IF EXISTS "public"."planet_osm_point";
CREATE TABLE "public"."planet_osm_point" (
	"id" int8 NOT NULL DEFAULT nextval('landslide_seq'::regclass),
	"date" text COLLATE "default",
	"time" text COLLATE "default",
	"country" text COLLATE "default",
	"nearest_places" text COLLATE "default",
	"hazard_type" text COLLATE "default",
	"landslide_type" text COLLATE "default",
	"trigger" text COLLATE "default",
	"storm_name" text COLLATE "default",
	"fatalities" int4,
	"injuries" int4,
	"source_name" text COLLATE "default",
	"source_link" text COLLATE "default",
	"comments" text COLLATE "default",
	"location_description" text COLLATE "default",
	"location_accuracy" text COLLATE "default",
	"landslide_size" text COLLATE "default",
	"photos_link" text COLLATE "default",
	"way" "public"."geometry",
	"cat_src" text COLLATE "default",
	"cat_id" int4,
	"countryname" text COLLATE "default",
	"near" text COLLATE "default",
	"distance" float8,
	"adminname1" text COLLATE "default",
	"adminname2" text COLLATE "default",
	"adminname3" text COLLATE "default",
	"population" int4,
	"tz" text COLLATE "default",
	"countrycode" text COLLATE "default",
	"continentcode" text COLLATE "default",
	"key" text COLLATE "default",
	"version" int4,
	"user_id" int4,
	"tstamp" timestamp(6) NULL,
	"changeset_id" int8,
	"github" text COLLATE "default"
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."planet_osm_point" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for downloads
-- ----------------------------
DROP TABLE IF EXISTS "public"."downloads";
CREATE TABLE "public"."downloads" (
	"id" int4 NOT NULL DEFAULT nextval('download_seq'::regclass),
	"ip" varchar NOT NULL COLLATE "default",
	"date" date NOT NULL,
	"fmt" varchar NOT NULL COLLATE "default",
	"count" int4 NOT NULL,
	"elts" varchar NOT NULL COLLATE "default",
	"user_id" int4
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."downloads" OWNER TO "s3rccp";

-- ----------------------------
--  Table structure for session
-- ----------------------------
DROP TABLE IF EXISTS "public"."session";
CREATE TABLE "public"."session" (
	"sid" varchar NOT NULL COLLATE "default",
	"sess" json NOT NULL,
	"expire" timestamp(6) NOT NULL
)
WITH (OIDS=FALSE);
ALTER TABLE "public"."session" OWNER TO "s3rccp";

-- ----------------------------
--  View structure for geography_columns
-- ----------------------------
DROP VIEW IF EXISTS "public"."geography_columns";
CREATE VIEW "public"."geography_columns" AS SELECT current_database() AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geography_column, postgis_typmod_dims(a.atttypmod) AS coord_dimension, postgis_typmod_srid(a.atttypmod) AS srid, postgis_typmod_type(a.atttypmod) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE (((((((t.typname = 'geography'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND (NOT pg_is_other_temp_schema(c.relnamespace))) AND has_table_privilege(c.oid, 'SELECT'::text));

-- ----------------------------
--  View structure for geometry_columns
-- ----------------------------
DROP VIEW IF EXISTS "public"."geometry_columns";
CREATE VIEW "public"."geometry_columns" AS SELECT (current_database())::character varying(256) AS f_table_catalog, (n.nspname)::character varying(256) AS f_table_schema, (c.relname)::character varying(256) AS f_table_name, (a.attname)::character varying(256) AS f_geometry_column, COALESCE(NULLIF(postgis_typmod_dims(a.atttypmod), 2), postgis_constraint_dims((n.nspname)::text, (c.relname)::text, (a.attname)::text), 2) AS coord_dimension, COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), postgis_constraint_srid((n.nspname)::text, (c.relname)::text, (a.attname)::text), 0) AS srid, (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), (postgis_constraint_type((n.nspname)::text, (c.relname)::text, (a.attname)::text))::text, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE (((((((((t.typname = 'geometry'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (NOT pg_is_other_temp_schema(c.relnamespace))) AND (NOT ((n.nspname = 'public'::name) AND (c.relname = 'raster_columns'::name)))) AND has_table_privilege(c.oid, 'SELECT'::text));
CREATE OR REPLACE RULE "geometry_columns_delete" AS ON DELETE TO "public"."geometry_columns" DO INSTEAD (INSTEAD NOTHING);
CREATE OR REPLACE RULE "geometry_columns_insert" AS ON INSERT TO "public"."geometry_columns" DO INSTEAD (INSTEAD NOTHING);
CREATE OR REPLACE RULE "geometry_columns_update" AS ON UPDATE TO "public"."geometry_columns" DO INSTEAD (INSTEAD NOTHING);

-- ----------------------------
--  View structure for raster_columns
-- ----------------------------
DROP VIEW IF EXISTS "public"."raster_columns";
CREATE VIEW "public"."raster_columns" AS SELECT current_database() AS r_table_catalog, n.nspname AS r_table_schema, c.relname AS r_table_name, a.attname AS r_raster_column, COALESCE(_raster_constraint_info_srid(n.nspname, c.relname, a.attname), (SELECT st_srid('010100000000000000000000000000000000000000'::geometry) AS st_srid)) AS srid, _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'x'::bpchar) AS scale_x, _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'y'::bpchar) AS scale_y, _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'width'::text) AS blocksize_x, _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'height'::text) AS blocksize_y, COALESCE(_raster_constraint_info_alignment(n.nspname, c.relname, a.attname), false) AS same_alignment, COALESCE(_raster_constraint_info_regular_blocking(n.nspname, c.relname, a.attname), false) AS regular_blocking, _raster_constraint_info_num_bands(n.nspname, c.relname, a.attname) AS num_bands, _raster_constraint_info_pixel_types(n.nspname, c.relname, a.attname) AS pixel_types, _raster_constraint_info_nodata_values(n.nspname, c.relname, a.attname) AS nodata_values, _raster_constraint_info_out_db(n.nspname, c.relname, a.attname) AS out_db, _raster_constraint_info_extent(n.nspname, c.relname, a.attname) AS extent FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE (((((((t.typname = 'raster'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (NOT pg_is_other_temp_schema(c.relnamespace)));

-- ----------------------------
--  View structure for raster_overviews
-- ----------------------------
DROP VIEW IF EXISTS "public"."raster_overviews";
CREATE VIEW "public"."raster_overviews" AS SELECT current_database() AS o_table_catalog, n.nspname AS o_table_schema, c.relname AS o_table_name, a.attname AS o_raster_column, current_database() AS r_table_catalog, (split_part(split_part(s.consrc, '''::name'::text, 1), ''''::text, 2))::name AS r_table_schema, (split_part(split_part(s.consrc, '''::name'::text, 2), ''''::text, 2))::name AS r_table_name, (split_part(split_part(s.consrc, '''::name'::text, 3), ''''::text, 2))::name AS r_raster_column, (btrim(split_part(s.consrc, ','::text, 2)))::integer AS overview_factor FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n, pg_constraint s WHERE ((((((((((t.typname = 'raster'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char"))) AND (s.connamespace = n.oid)) AND (s.conrelid = c.oid)) AND (s.consrc ~~ '%_overview_constraint(%'::text)) AND (NOT pg_is_other_temp_schema(c.relnamespace)));

-- ----------------------------
--  View structure for pg_all_foreign_keys
-- ----------------------------
DROP VIEW IF EXISTS "public"."pg_all_foreign_keys";
CREATE VIEW "public"."pg_all_foreign_keys" AS SELECT n1.nspname AS fk_schema_name, c1.relname AS fk_table_name, k1.conname AS fk_constraint_name, c1.oid AS fk_table_oid, _pg_sv_column_array(k1.conrelid, k1.conkey) AS fk_columns, n2.nspname AS pk_schema_name, c2.relname AS pk_table_name, k2.conname AS pk_constraint_name, c2.oid AS pk_table_oid, ci.relname AS pk_index_name, _pg_sv_column_array(k1.confrelid, k1.confkey) AS pk_columns, CASE k1.confmatchtype WHEN 'f'::"char" THEN 'FULL'::text WHEN 'p'::"char" THEN 'PARTIAL'::text WHEN 'u'::"char" THEN 'NONE'::text ELSE NULL::text END AS match_type, CASE k1.confdeltype WHEN 'a'::"char" THEN 'NO ACTION'::text WHEN 'c'::"char" THEN 'CASCADE'::text WHEN 'd'::"char" THEN 'SET DEFAULT'::text WHEN 'n'::"char" THEN 'SET NULL'::text WHEN 'r'::"char" THEN 'RESTRICT'::text ELSE NULL::text END AS on_delete, CASE k1.confupdtype WHEN 'a'::"char" THEN 'NO ACTION'::text WHEN 'c'::"char" THEN 'CASCADE'::text WHEN 'd'::"char" THEN 'SET DEFAULT'::text WHEN 'n'::"char" THEN 'SET NULL'::text WHEN 'r'::"char" THEN 'RESTRICT'::text ELSE NULL::text END AS on_update, k1.condeferrable AS is_deferrable, k1.condeferred AS is_deferred FROM ((((((((pg_constraint k1 JOIN pg_namespace n1 ON ((n1.oid = k1.connamespace))) JOIN pg_class c1 ON ((c1.oid = k1.conrelid))) JOIN pg_class c2 ON ((c2.oid = k1.confrelid))) JOIN pg_namespace n2 ON ((n2.oid = c2.relnamespace))) JOIN pg_depend d ON (((((((d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = k1.oid)) AND (d.objsubid = 0)) AND (d.deptype = 'n'::"char")) AND (d.refclassid = ('pg_class'::regclass)::oid)) AND (d.refobjsubid = 0)))) JOIN pg_class ci ON (((ci.oid = d.refobjid) AND (ci.relkind = 'i'::"char")))) LEFT JOIN pg_depend d2 ON (((((((d2.classid = ('pg_class'::regclass)::oid) AND (d2.objid = ci.oid)) AND (d2.objsubid = 0)) AND (d2.deptype = 'i'::"char")) AND (d2.refclassid = ('pg_constraint'::regclass)::oid)) AND (d2.refobjsubid = 0)))) LEFT JOIN pg_constraint k2 ON (((k2.oid = d2.refobjid) AND (k2.contype = ANY (ARRAY['p'::"char", 'u'::"char"]))))) WHERE ((((k1.conrelid <> (0)::oid) AND (k1.confrelid <> (0)::oid)) AND (k1.contype = 'f'::"char")) AND _pg_sv_table_accessible(n1.oid, c1.oid));

-- ----------------------------
--  View structure for tap_funky
-- ----------------------------
DROP VIEW IF EXISTS "public"."tap_funky";
CREATE VIEW "public"."tap_funky" AS SELECT p.oid, n.nspname AS schema, p.proname AS name, pg_get_userbyid(p.proowner) AS owner, array_to_string((p.proargtypes)::regtype[], ','::text) AS args, (CASE p.proretset WHEN true THEN 'setof '::text ELSE ''::text END || (p.prorettype)::regtype) AS returns, p.prolang AS langoid, p.proisstrict AS is_strict, p.proisagg AS is_agg, p.prosecdef AS is_definer, p.proretset AS returns_set, (p.provolatile)::character(1) AS volatility, pg_function_is_visible(p.oid) AS is_visible FROM (pg_proc p JOIN pg_namespace n ON ((p.pronamespace = n.oid)));

-- ----------------------------
--  View structure for pg_stat_statements
-- ----------------------------
DROP VIEW IF EXISTS "public"."pg_stat_statements";
CREATE VIEW "public"."pg_stat_statements" AS SELECT pg_stat_statements.userid, pg_stat_statements.dbid, pg_stat_statements.query, pg_stat_statements.calls, pg_stat_statements.total_time, pg_stat_statements.rows, pg_stat_statements.shared_blks_hit, pg_stat_statements.shared_blks_read, pg_stat_statements.shared_blks_dirtied, pg_stat_statements.shared_blks_written, pg_stat_statements.local_blks_hit, pg_stat_statements.local_blks_read, pg_stat_statements.local_blks_dirtied, pg_stat_statements.local_blks_written, pg_stat_statements.temp_blks_read, pg_stat_statements.temp_blks_written, pg_stat_statements.blk_read_time, pg_stat_statements.blk_write_time FROM pg_stat_statements() pg_stat_statements(userid, dbid, query, calls, total_time, rows, shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written, local_blks_hit, local_blks_read, local_blks_dirtied, local_blks_written, temp_blks_read, temp_blks_written, blk_read_time, blk_write_time);


-- ----------------------------
--  Alter sequences owned by
-- ----------------------------
ALTER SEQUENCE "public"."app_seq" RESTART 3;
ALTER SEQUENCE "public"."download_seq" RESTART 470;
ALTER SEQUENCE "public"."id_seq" RESTART 15;
ALTER SEQUENCE "public"."landslide_seq" RESTART 7629;
ALTER SEQUENCE "public"."user_seq" RESTART 232;
-- ----------------------------
--  Primary key structure for table spatial_ref_sys
-- ----------------------------
ALTER TABLE "public"."spatial_ref_sys" ADD PRIMARY KEY ("srid") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Checks structure for table spatial_ref_sys
-- ----------------------------
ALTER TABLE "public"."spatial_ref_sys" ADD CONSTRAINT "spatial_ref_sys_srid_check" CHECK (((srid > 0) AND (srid <= 998999))) NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table actions
-- ----------------------------
ALTER TABLE "public"."actions" ADD PRIMARY KEY ("data_type", "id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Indexes structure for table planet_osm_line
-- ----------------------------
CREATE INDEX  "planet_osm_line_index" ON "public"."planet_osm_line" USING gist(way "public"."gist_geometry_ops_2d") WITH (FILLFACTOR = 100, BUFFERING = OFF);

-- ----------------------------
--  Indexes structure for table planet_osm_polygon
-- ----------------------------
CREATE INDEX  "planet_osm_polygon_index" ON "public"."planet_osm_polygon" USING gist(way "public"."gist_geometry_ops_2d") WITH (FILLFACTOR = 100, BUFFERING = OFF);

-- ----------------------------
--  Indexes structure for table planet_osm_roads
-- ----------------------------
CREATE INDEX  "planet_osm_roads_index" ON "public"."planet_osm_roads" USING gist(way "public"."gist_geometry_ops_2d") WITH (FILLFACTOR = 100, BUFFERING = OFF);

-- ----------------------------
--  Primary key structure for table relation_members
-- ----------------------------
ALTER TABLE "public"."relation_members" ADD PRIMARY KEY ("relation_id", "sequence_id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Indexes structure for table relation_members
-- ----------------------------
CREATE INDEX  "idx_relation_members_member_id_and_type" ON "public"."relation_members" USING btree(member_id "pg_catalog"."int8_ops" ASC NULLS LAST, member_type COLLATE "default" "pg_catalog"."bpchar_ops" ASC NULLS LAST);

-- ----------------------------
--  Primary key structure for table relations
-- ----------------------------
ALTER TABLE "public"."relations" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table schema_info
-- ----------------------------
ALTER TABLE "public"."schema_info" ADD PRIMARY KEY ("version") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table way_nodes
-- ----------------------------
ALTER TABLE "public"."way_nodes" ADD PRIMARY KEY ("way_id", "sequence_id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Indexes structure for table way_nodes
-- ----------------------------
CREATE INDEX  "idx_way_nodes_node_id" ON "public"."way_nodes" USING btree(node_id "pg_catalog"."int8_ops" ASC NULLS LAST);

-- ----------------------------
--  Primary key structure for table ways
-- ----------------------------
ALTER TABLE "public"."ways" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Indexes structure for table ways
-- ----------------------------
CREATE INDEX  "idx_ways_bbox" ON "public"."ways" USING gist(bbox "public"."gist_geometry_ops_2d") WITH (BUFFERING = OFF);
CREATE INDEX  "idx_ways_linestring" ON "public"."ways" USING gist(linestring "public"."gist_geometry_ops_2d") WITH (BUFFERING = OFF);

-- ----------------------------
--  Primary key structure for table applications
-- ----------------------------
ALTER TABLE "public"."applications" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table changesets
-- ----------------------------
ALTER TABLE "public"."changesets" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table users
-- ----------------------------
ALTER TABLE "public"."users" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table planet_osm_point
-- ----------------------------
ALTER TABLE "public"."planet_osm_point" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table downloads
-- ----------------------------
ALTER TABLE "public"."downloads" ADD PRIMARY KEY ("id") NOT DEFERRABLE INITIALLY IMMEDIATE;

-- ----------------------------
--  Primary key structure for table session
-- ----------------------------
ALTER TABLE "public"."session" ADD PRIMARY KEY ("sid") NOT DEFERRABLE INITIALLY IMMEDIATE;

